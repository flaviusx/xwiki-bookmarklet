<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>Bookmarklet</web>
  <name>BookmarkletSkin</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.Admin</creator>
  <creationDate>1394860965000</creationDate>
  <parent>XWiki.XWikiSkins</parent>
  <author>XWiki.Admin</author>
  <customClass/>
  <contentAuthor>XWiki.Admin</contentAuthor>
  <date>1394877825000</date>
  <contentUpdateDate>1394862202000</contentUpdateDate>
  <version>3.18</version>
  <title>BookmarkletSkin</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>true</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden/>
  <content/>
  <attachment>
    <filename>377.gif</filename>
    <author>XWiki.Admin</author>
    <date>1372256013000</date>
    <version>1.1</version>
    <comment/>
    <content>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</content>
    <filesize>29504</filesize>
  </attachment>
  <attachment>
    <filename>jquery-1.9.1.min.js</filename>
    <author>XWiki.Admin</author>
    <date>1372254740000</date>
    <version>1.1</version>
    <comment/>
    <content>LyohIGpRdWVyeSB2MS45LjEgfCAoYykgMjAwNSwgMjAxMiBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiB8IGpxdWVyeS5vcmcvbGljZW5zZQovL0Agc291cmNlTWFwcGluZ1VSTD1qcXVlcnkubWluLm1hcAoqLyhmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT10eXBlb2YgdCxvPWUuZG9jdW1lbnQsYT1lLmxvY2F0aW9uLHM9ZS5qUXVlcnksdT1lLiQsbD17fSxjPVtdLHA9IjEuOS4xIixmPWMuY29uY2F0LGQ9Yy5wdXNoLGg9Yy5zbGljZSxnPWMuaW5kZXhPZixtPWwudG9TdHJpbmcseT1sLmhhc093blByb3BlcnR5LHY9cC50cmltLGI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGIuZm4uaW5pdChlLHQscil9LHg9L1srLV0/KD86XGQqXC58KVxkKyg/OltlRV1bKy1dP1xkK3wpLy5zb3VyY2Usdz0vXFMrL2csVD0vXltcc1x1RkVGRlx4QTBdK3xbXHNcdUZFRkZceEEwXSskL2csTj0vXig/Oig8W1x3XFddKz4pW14+XSp8IyhbXHctXSopKSQvLEM9L148KFx3KylccypcLz8+KD86PFwvXDE+fCkkLyxrPS9eW1xdLDp7fVxzXSokLyxFPS8oPzpefDp8LCkoPzpccypcWykrL2csUz0vXFwoPzpbIlxcXC9iZm5ydF18dVtcZGEtZkEtRl17NH0pL2csQT0vIlteIlxcXHJcbl0qInx0cnVlfGZhbHNlfG51bGx8LT8oPzpcZCtcLnwpXGQrKD86W2VFXVsrLV0/XGQrfCkvZyxqPS9eLW1zLS8sRD0vLShbXGRhLXpdKS9naSxMPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX0sSD1mdW5jdGlvbihlKXsoby5hZGRFdmVudExpc3RlbmVyfHwibG9hZCI9PT1lLnR5cGV8fCJjb21wbGV0ZSI9PT1vLnJlYWR5U3RhdGUpJiYocSgpLGIucmVhZHkoKSl9LHE9ZnVuY3Rpb24oKXtvLmFkZEV2ZW50TGlzdGVuZXI/KG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsSCwhMSksZS5yZW1vdmVFdmVudExpc3RlbmVyKCJsb2FkIixILCExKSk6KG8uZGV0YWNoRXZlbnQoIm9ucmVhZHlzdGF0ZWNoYW5nZSIsSCksZS5kZXRhY2hFdmVudCgib25sb2FkIixIKSl9O2IuZm49Yi5wcm90b3R5cGU9e2pxdWVyeTpwLGNvbnN0cnVjdG9yOmIsaW5pdDpmdW5jdGlvbihlLG4scil7dmFyIGksYTtpZighZSlyZXR1cm4gdGhpcztpZigic3RyaW5nIj09dHlwZW9mIGUpe2lmKGk9IjwiPT09ZS5jaGFyQXQoMCkmJiI+Ij09PWUuY2hhckF0KGUubGVuZ3RoLTEpJiZlLmxlbmd0aD49Mz9bbnVsbCxlLG51bGxdOk4uZXhlYyhlKSwhaXx8IWlbMV0mJm4pcmV0dXJuIW58fG4uanF1ZXJ5PyhufHxyKS5maW5kKGUpOnRoaXMuY29uc3RydWN0b3IobikuZmluZChlKTtpZihpWzFdKXtpZihuPW4gaW5zdGFuY2VvZiBiP25bMF06bixiLm1lcmdlKHRoaXMsYi5wYXJzZUhUTUwoaVsxXSxuJiZuLm5vZGVUeXBlP24ub3duZXJEb2N1bWVudHx8bjpvLCEwKSksQy50ZXN0KGlbMV0pJiZiLmlzUGxhaW5PYmplY3QobikpZm9yKGkgaW4gbiliLmlzRnVuY3Rpb24odGhpc1tpXSk/dGhpc1tpXShuW2ldKTp0aGlzLmF0dHIoaSxuW2ldKTtyZXR1cm4gdGhpc31pZihhPW8uZ2V0RWxlbWVudEJ5SWQoaVsyXSksYSYmYS5wYXJlbnROb2RlKXtpZihhLmlkIT09aVsyXSlyZXR1cm4gci5maW5kKGUpO3RoaXMubGVuZ3RoPTEsdGhpc1swXT1hfXJldHVybiB0aGlzLmNvbnRleHQ9byx0aGlzLnNlbGVjdG9yPWUsdGhpc31yZXR1cm4gZS5ub2RlVHlwZT8odGhpcy5jb250ZXh0PXRoaXNbMF09ZSx0aGlzLmxlbmd0aD0xLHRoaXMpOmIuaXNGdW5jdGlvbihlKT9yLnJlYWR5KGUpOihlLnNlbGVjdG9yIT09dCYmKHRoaXMuc2VsZWN0b3I9ZS5zZWxlY3Rvcix0aGlzLmNvbnRleHQ9ZS5jb250ZXh0KSxiLm1ha2VBcnJheShlLHRoaXMpKX0sc2VsZWN0b3I6IiIsbGVuZ3RoOjAsc2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aH0sdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBoLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT90aGlzLnRvQXJyYXkoKTowPmU/dGhpc1t0aGlzLmxlbmd0aCtlXTp0aGlzW2VdfSxwdXNoU3RhY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9Yi5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksZSk7cmV0dXJuIHQucHJldk9iamVjdD10aGlzLHQuY29udGV4dD10aGlzLmNvbnRleHQsdH0sZWFjaDpmdW5jdGlvbihlLHQpe3JldHVybiBiLmVhY2godGhpcyxlLHQpfSxyZWFkeTpmdW5jdGlvbihlKXtyZXR1cm4gYi5yZWFkeS5wcm9taXNlKCkuZG9uZShlKSx0aGlzfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhoLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGVuZ3RoLG49K2UrKDA+ZT90OjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhuPj0wJiZ0Pm4/W3RoaXNbbl1dOltdKX0sbWFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhiLm1hcCh0aGlzLGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUuY2FsbCh0LG4sdCl9KSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IobnVsbCl9LHB1c2g6ZCxzb3J0OltdLnNvcnQsc3BsaWNlOltdLnNwbGljZX0sYi5mbi5pbml0LnByb3RvdHlwZT1iLmZuLGIuZXh0ZW5kPWIuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsbixyLGksbyxhLHM9YXJndW1lbnRzWzBdfHx7fSx1PTEsbD1hcmd1bWVudHMubGVuZ3RoLGM9ITE7Zm9yKCJib29sZWFuIj09dHlwZW9mIHMmJihjPXMscz1hcmd1bWVudHNbMV18fHt9LHU9MiksIm9iamVjdCI9PXR5cGVvZiBzfHxiLmlzRnVuY3Rpb24ocyl8fChzPXt9KSxsPT09dSYmKHM9dGhpcywtLXUpO2w+dTt1KyspaWYobnVsbCE9KG89YXJndW1lbnRzW3VdKSlmb3IoaSBpbiBvKWU9c1tpXSxyPW9baV0scyE9PXImJihjJiZyJiYoYi5pc1BsYWluT2JqZWN0KHIpfHwobj1iLmlzQXJyYXkocikpKT8obj8obj0hMSxhPWUmJmIuaXNBcnJheShlKT9lOltdKTphPWUmJmIuaXNQbGFpbk9iamVjdChlKT9lOnt9LHNbaV09Yi5leHRlbmQoYyxhLHIpKTpyIT09dCYmKHNbaV09cikpO3JldHVybiBzfSxiLmV4dGVuZCh7bm9Db25mbGljdDpmdW5jdGlvbih0KXtyZXR1cm4gZS4kPT09YiYmKGUuJD11KSx0JiZlLmpRdWVyeT09PWImJihlLmpRdWVyeT1zKSxifSxpc1JlYWR5OiExLHJlYWR5V2FpdDoxLGhvbGRSZWFkeTpmdW5jdGlvbihlKXtlP2IucmVhZHlXYWl0Kys6Yi5yZWFkeSghMCl9LHJlYWR5OmZ1bmN0aW9uKGUpe2lmKGU9PT0hMD8hLS1iLnJlYWR5V2FpdDohYi5pc1JlYWR5KXtpZighby5ib2R5KXJldHVybiBzZXRUaW1lb3V0KGIucmVhZHkpO2IuaXNSZWFkeT0hMCxlIT09ITAmJi0tYi5yZWFkeVdhaXQ+MHx8KG4ucmVzb2x2ZVdpdGgobyxbYl0pLGIuZm4udHJpZ2dlciYmYihvKS50cmlnZ2VyKCJyZWFkeSIpLm9mZigicmVhZHkiKSl9fSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGUpe3JldHVybiJmdW5jdGlvbiI9PT1iLnR5cGUoZSl9LGlzQXJyYXk6QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuImFycmF5Ij09PWIudHlwZShlKX0saXNXaW5kb3c6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUmJmU9PWUud2luZG93fSxpc051bWVyaWM6ZnVuY3Rpb24oZSl7cmV0dXJuIWlzTmFOKHBhcnNlRmxvYXQoZSkpJiZpc0Zpbml0ZShlKX0sdHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9lKyIiOiJvYmplY3QiPT10eXBlb2YgZXx8ImZ1bmN0aW9uIj09dHlwZW9mIGU/bFttLmNhbGwoZSldfHwib2JqZWN0Ijp0eXBlb2YgZX0saXNQbGFpbk9iamVjdDpmdW5jdGlvbihlKXtpZighZXx8Im9iamVjdCIhPT1iLnR5cGUoZSl8fGUubm9kZVR5cGV8fGIuaXNXaW5kb3coZSkpcmV0dXJuITE7dHJ5e2lmKGUuY29uc3RydWN0b3ImJiF5LmNhbGwoZSwiY29uc3RydWN0b3IiKSYmIXkuY2FsbChlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwiaXNQcm90b3R5cGVPZiIpKXJldHVybiExfWNhdGNoKG4pe3JldHVybiExfXZhciByO2ZvcihyIGluIGUpO3JldHVybiByPT09dHx8eS5jYWxsKGUscil9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZQ==dHVybiExO3JldHVybiEwfSxlcnJvcjpmdW5jdGlvbihlKXt0aHJvdyBFcnJvcihlKX0scGFyc2VIVE1MOmZ1bmN0aW9uKGUsdCxuKXtpZighZXx8InN0cmluZyIhPXR5cGVvZiBlKXJldHVybiBudWxsOyJib29sZWFuIj09dHlwZW9mIHQmJihuPXQsdD0hMSksdD10fHxvO3ZhciByPUMuZXhlYyhlKSxpPSFuJiZbXTtyZXR1cm4gcj9bdC5jcmVhdGVFbGVtZW50KHJbMV0pXToocj1iLmJ1aWxkRnJhZ21lbnQoW2VdLHQsaSksaSYmYihpKS5yZW1vdmUoKSxiLm1lcmdlKFtdLHIuY2hpbGROb2RlcykpfSxwYXJzZUpTT046ZnVuY3Rpb24obil7cmV0dXJuIGUuSlNPTiYmZS5KU09OLnBhcnNlP2UuSlNPTi5wYXJzZShuKTpudWxsPT09bj9uOiJzdHJpbmciPT10eXBlb2YgbiYmKG49Yi50cmltKG4pLG4mJmsudGVzdChuLnJlcGxhY2UoUywiQCIpLnJlcGxhY2UoQSwiXSIpLnJlcGxhY2UoRSwiIikpKT9GdW5jdGlvbigicmV0dXJuICIrbikoKTooYi5lcnJvcigiSW52YWxpZCBKU09OOiAiK24pLHQpfSxwYXJzZVhNTDpmdW5jdGlvbihuKXt2YXIgcixpO2lmKCFufHwic3RyaW5nIiE9dHlwZW9mIG4pcmV0dXJuIG51bGw7dHJ5e2UuRE9NUGFyc2VyPyhpPW5ldyBET01QYXJzZXIscj1pLnBhcnNlRnJvbVN0cmluZyhuLCJ0ZXh0L3htbCIpKToocj1uZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTERPTSIpLHIuYXN5bmM9ImZhbHNlIixyLmxvYWRYTUwobikpfWNhdGNoKG8pe3I9dH1yZXR1cm4gciYmci5kb2N1bWVudEVsZW1lbnQmJiFyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwYXJzZXJlcnJvciIpLmxlbmd0aHx8Yi5lcnJvcigiSW52YWxpZCBYTUw6ICIrbikscn0sbm9vcDpmdW5jdGlvbigpe30sZ2xvYmFsRXZhbDpmdW5jdGlvbih0KXt0JiZiLnRyaW0odCkmJihlLmV4ZWNTY3JpcHR8fGZ1bmN0aW9uKHQpe2UuZXZhbC5jYWxsKGUsdCl9KSh0KX0sY2FtZWxDYXNlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoaiwibXMtIikucmVwbGFjZShELEwpfSxub2RlTmFtZTpmdW5jdGlvbihlLHQpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCl9LGVhY2g6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9MCxvPWUubGVuZ3RoLGE9TShlKTtpZihuKXtpZihhKXtmb3IoO28+aTtpKyspaWYocj10LmFwcGx5KGVbaV0sbikscj09PSExKWJyZWFrfWVsc2UgZm9yKGkgaW4gZSlpZihyPXQuYXBwbHkoZVtpXSxuKSxyPT09ITEpYnJlYWt9ZWxzZSBpZihhKXtmb3IoO28+aTtpKyspaWYocj10LmNhbGwoZVtpXSxpLGVbaV0pLHI9PT0hMSlicmVha31lbHNlIGZvcihpIGluIGUpaWYocj10LmNhbGwoZVtpXSxpLGVbaV0pLHI9PT0hMSlicmVhaztyZXR1cm4gZX0sdHJpbTp2JiYhdi5jYWxsKCJcdWZlZmZcdTAwYTAiKT9mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT8iIjp2LmNhbGwoZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lPyIiOihlKyIiKS5yZXBsYWNlKFQsIiIpfSxtYWtlQXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHxbXTtyZXR1cm4gbnVsbCE9ZSYmKE0oT2JqZWN0KGUpKT9iLm1lcmdlKG4sInN0cmluZyI9PXR5cGVvZiBlP1tlXTplKTpkLmNhbGwobixlKSksbn0saW5BcnJheTpmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYodCl7aWYoZylyZXR1cm4gZy5jYWxsKHQsZSxuKTtmb3Iocj10Lmxlbmd0aCxuPW4/MD5uP01hdGgubWF4KDAscituKTpuOjA7cj5uO24rKylpZihuIGluIHQmJnRbbl09PT1lKXJldHVybiBufXJldHVybi0xfSxtZXJnZTpmdW5jdGlvbihlLG4pe3ZhciByPW4ubGVuZ3RoLGk9ZS5sZW5ndGgsbz0wO2lmKCJudW1iZXIiPT10eXBlb2Ygcilmb3IoO3I+bztvKyspZVtpKytdPW5bb107ZWxzZSB3aGlsZShuW29dIT09dCllW2krK109bltvKytdO3JldHVybiBlLmxlbmd0aD1pLGV9LGdyZXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9W10sbz0wLGE9ZS5sZW5ndGg7Zm9yKG49ISFuO2E+bztvKyspcj0hIXQoZVtvXSxvKSxuIT09ciYmaS5wdXNoKGVbb10pO3JldHVybiBpfSxtYXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9MCxvPWUubGVuZ3RoLGE9TShlKSxzPVtdO2lmKGEpZm9yKDtvPmk7aSsrKXI9dChlW2ldLGksbiksbnVsbCE9ciYmKHNbcy5sZW5ndGhdPXIpO2Vsc2UgZm9yKGkgaW4gZSlyPXQoZVtpXSxpLG4pLG51bGwhPXImJihzW3MubGVuZ3RoXT1yKTtyZXR1cm4gZi5hcHBseShbXSxzKX0sZ3VpZDoxLHByb3h5OmZ1bmN0aW9uKGUsbil7dmFyIHIsaSxvO3JldHVybiJzdHJpbmciPT10eXBlb2YgbiYmKG89ZVtuXSxuPWUsZT1vKSxiLmlzRnVuY3Rpb24oZSk/KHI9aC5jYWxsKGFyZ3VtZW50cywyKSxpPWZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkobnx8dGhpcyxyLmNvbmNhdChoLmNhbGwoYXJndW1lbnRzKSkpfSxpLmd1aWQ9ZS5ndWlkPWUuZ3VpZHx8Yi5ndWlkKyssaSk6dH0sYWNjZXNzOmZ1bmN0aW9uKGUsbixyLGksbyxhLHMpe3ZhciB1PTAsbD1lLmxlbmd0aCxjPW51bGw9PXI7aWYoIm9iamVjdCI9PT1iLnR5cGUocikpe289ITA7Zm9yKHUgaW4gciliLmFjY2VzcyhlLG4sdSxyW3VdLCEwLGEscyl9ZWxzZSBpZihpIT09dCYmKG89ITAsYi5pc0Z1bmN0aW9uKGkpfHwocz0hMCksYyYmKHM/KG4uY2FsbChlLGkpLG49bnVsbCk6KGM9bixuPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYy5jYWxsKGIoZSksbil9KSksbikpZm9yKDtsPnU7dSsrKW4oZVt1XSxyLHM/aTppLmNhbGwoZVt1XSx1LG4oZVt1XSxyKSkpO3JldHVybiBvP2U6Yz9uLmNhbGwoZSk6bD9uKGVbMF0scik6YX0sbm93OmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9fSksYi5yZWFkeS5wcm9taXNlPWZ1bmN0aW9uKHQpe2lmKCFuKWlmKG49Yi5EZWZlcnJlZCgpLCJjb21wbGV0ZSI9PT1vLnJlYWR5U3RhdGUpc2V0VGltZW91dChiLnJlYWR5KTtlbHNlIGlmKG8uYWRkRXZlbnRMaXN0ZW5lcilvLmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLEgsITEpLGUuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsSCwhMSk7ZWxzZXtvLmF0dGFjaEV2ZW50KCJvbnJlYWR5c3RhdGVjaGFuZ2UiLEgpLGUuYXR0YWNoRXZlbnQoIm9ubG9hZCIsSCk7dmFyIHI9ITE7dHJ5e3I9bnVsbD09ZS5mcmFtZUVsZW1lbnQmJm8uZG9jdW1lbnRFbGVtZW50fWNhdGNoKGkpe31yJiZyLmRvU2Nyb2xsJiZmdW5jdGlvbiBhKCl7aWYoIWIuaXNSZWFkeSl7dHJ5e3IuZG9TY3JvbGwoImxlZnQiKX1jYXRjaChlKXtyZXR1cm4gc2V0VGltZW91dChhLDUwKX1xKCksYi5yZWFkeSgpfX0oKX1yZXR1cm4gbi5wcm9taXNlKHQpfSxiLmVhY2goIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IiLnNwbGl0KCIgIiksZnVuY3Rpb24oZSx0KXtsWyJbb2JqZWN0ICIrdCsiXSJdPXQudG9Mb3dlckNhc2UoKX0pO2Z1bmN0aW9uIE0oZSl7dmFyIHQ9ZS5sZW5ndGgsbj1iLnR5cGUoZSk7cmV0dXJuIGIuaXNXaW5kb3coZSk/ITE6MT09PWUubm9kZVR5cGUmJnQ/ITA6ImFycmF5Ij09PW58fCJmdW5jdGlvbiIhPT1uJiYoMD09PXR8fCJudW1iZXIiPT10eXBlb2YgdCYmdD4wJiZ0LTEgaW4gZSl9cj1iKG8pO3ZhciBfPXt9O2Z1bmN0aW9uIEYoZSl7dmFyIHQ9X1tlXT17fTtyZXR1cm4gYi5lYWNoKGUubWF0Y2godyl8fFtdLGZ1bmN0aW9uKGUsbil7dFtuXT0hMH0pLHR9Yi5DYWxsYmFja3M9ZnVuY3Rpb24oZSl7ZT0ic3RyaW5nIj09dHlwZW9mIGU/X1tlXXx8RihlKTpiLmV4dGVuZCh7fSxlKTt2YXIgbixyLGksbyxhLHMsdT1bXSxsPSFlLm9uY2UmJltdLGM9ZnVuY3Rpb24odCl7Zm9yKHI9ZS5tZW1vcnkmJnQsaT0hMCxhPXN8fDAscz0wLG89dS5sZW5ndGgsbj0hMDt1JiZvPmE7YSsrKWlmKHVbYV0uYXBwbHkodFswXSx0WzFdKT09PSExJiZlLnN0b3BPbkZhbHNlKXtyPSExO2JyZWFrfW49ITEsdSYmKGw/bC5sZW5ndGgmJmMobC5zaGlmdCgpKTpyP3U9W106cC5kaXNhYmxlKCkpfSxwPXthZGQ6ZnVuY3Rpb24oKXtpZih1KXt2YXIgdD11Lmxlbmd0aDsoZnVuY3Rpb24gaSh0KXtiLmVhY2godCxmdW5jdGlvbih0LG4pe3ZhciByPWIudHlwZShuKTsiZnVuY3Rpb24iPT09cj9lLnVuaXF1ZQ==JiZwLmhhcyhuKXx8dS5wdXNoKG4pOm4mJm4ubGVuZ3RoJiYic3RyaW5nIiE9PXImJmkobil9KX0pKGFyZ3VtZW50cyksbj9vPXUubGVuZ3RoOnImJihzPXQsYyhyKSl9cmV0dXJuIHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiB1JiZiLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGUsdCl7dmFyIHI7d2hpbGUoKHI9Yi5pbkFycmF5KHQsdSxyKSk+LTEpdS5zcGxpY2UociwxKSxuJiYobz49ciYmby0tLGE+PXImJmEtLSl9KSx0aGlzfSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/Yi5pbkFycmF5KGUsdSk+LTE6ISghdXx8IXUubGVuZ3RoKX0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gdT1bXSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHU9bD1yPXQsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hdX0sbG9jazpmdW5jdGlvbigpe3JldHVybiBsPXQscnx8cC5kaXNhYmxlKCksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuIWx9LGZpcmVXaXRoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8W10sdD1bZSx0LnNsaWNlP3Quc2xpY2UoKTp0XSwhdXx8aSYmIWx8fChuP2wucHVzaCh0KTpjKHQpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIHAuZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFpfX07cmV0dXJuIHB9LGIuZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihlKXt2YXIgdD1bWyJyZXNvbHZlIiwiZG9uZSIsYi5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksInJlc29sdmVkIl0sWyJyZWplY3QiLCJmYWlsIixiLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwicmVqZWN0ZWQiXSxbIm5vdGlmeSIsInByb2dyZXNzIixiLkNhbGxiYWNrcygibWVtb3J5IildXSxuPSJwZW5kaW5nIixyPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBufSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gaS5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LHRoZW46ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHM7cmV0dXJuIGIuRGVmZXJyZWQoZnVuY3Rpb24obil7Yi5lYWNoKHQsZnVuY3Rpb24odCxvKXt2YXIgYT1vWzBdLHM9Yi5pc0Z1bmN0aW9uKGVbdF0pJiZlW3RdO2lbb1sxXV0oZnVuY3Rpb24oKXt2YXIgZT1zJiZzLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtlJiZiLmlzRnVuY3Rpb24oZS5wcm9taXNlKT9lLnByb21pc2UoKS5kb25lKG4ucmVzb2x2ZSkuZmFpbChuLnJlamVjdCkucHJvZ3Jlc3Mobi5ub3RpZnkpOm5bYSsiV2l0aCJdKHRoaXM9PT1yP24ucHJvbWlzZSgpOnRoaXMscz9bZV06YXJndW1lbnRzKX0pfSksZT1udWxsfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lP2IuZXh0ZW5kKGUscik6cn19LGk9e307cmV0dXJuIHIucGlwZT1yLnRoZW4sYi5lYWNoKHQsZnVuY3Rpb24oZSxvKXt2YXIgYT1vWzJdLHM9b1szXTtyW29bMV1dPWEuYWRkLHMmJmEuYWRkKGZ1bmN0aW9uKCl7bj1zfSx0WzFeZV1bMl0uZGlzYWJsZSx0WzJdWzJdLmxvY2spLGlbb1swXV09ZnVuY3Rpb24oKXtyZXR1cm4gaVtvWzBdKyJXaXRoIl0odGhpcz09PWk/cjp0aGlzLGFyZ3VtZW50cyksdGhpc30saVtvWzBdKyJXaXRoIl09YS5maXJlV2l0aH0pLHIucHJvbWlzZShpKSxlJiZlLmNhbGwoaSxpKSxpfSx3aGVuOmZ1bmN0aW9uKGUpe3ZhciB0PTAsbj1oLmNhbGwoYXJndW1lbnRzKSxyPW4ubGVuZ3RoLGk9MSE9PXJ8fGUmJmIuaXNGdW5jdGlvbihlLnByb21pc2UpP3I6MCxvPTE9PT1pP2U6Yi5EZWZlcnJlZCgpLGE9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBmdW5jdGlvbihyKXt0W2VdPXRoaXMsbltlXT1hcmd1bWVudHMubGVuZ3RoPjE/aC5jYWxsKGFyZ3VtZW50cyk6cixuPT09cz9vLm5vdGlmeVdpdGgodCxuKTotLWl8fG8ucmVzb2x2ZVdpdGgodCxuKX19LHMsdSxsO2lmKHI+MSlmb3Iocz1BcnJheShyKSx1PUFycmF5KHIpLGw9QXJyYXkocik7cj50O3QrKyluW3RdJiZiLmlzRnVuY3Rpb24oblt0XS5wcm9taXNlKT9uW3RdLnByb21pc2UoKS5kb25lKGEodCxsLG4pKS5mYWlsKG8ucmVqZWN0KS5wcm9ncmVzcyhhKHQsdSxzKSk6LS1pO3JldHVybiBpfHxvLnJlc29sdmVXaXRoKGwsbiksby5wcm9taXNlKCl9fSksYi5zdXBwb3J0PWZ1bmN0aW9uKCl7dmFyIHQsbixyLGEscyx1LGwsYyxwLGYsZD1vLmNyZWF0ZUVsZW1lbnQoImRpdiIpO2lmKGQuc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCJ0IiksZC5pbm5lckhUTUw9IiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPiIsbj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikscj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJhIilbMF0sIW58fCFyfHwhbi5sZW5ndGgpcmV0dXJue307cz1vLmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpLGw9cy5hcHBlbmRDaGlsZChvLmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpKSxhPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0IilbMF0sci5zdHlsZS5jc3NUZXh0PSJ0b3A6MXB4O2Zsb2F0OmxlZnQ7b3BhY2l0eTouNSIsdD17Z2V0U2V0QXR0cmlidXRlOiJ0IiE9PWQuY2xhc3NOYW1lLGxlYWRpbmdXaGl0ZXNwYWNlOjM9PT1kLmZpcnN0Q2hpbGQubm9kZVR5cGUsdGJvZHk6IWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInRib2R5IikubGVuZ3RoLGh0bWxTZXJpYWxpemU6ISFkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaW5rIikubGVuZ3RoLHN0eWxlOi90b3AvLnRlc3Qoci5nZXRBdHRyaWJ1dGUoInN0eWxlIikpLGhyZWZOb3JtYWxpemVkOiIvYSI9PT1yLmdldEF0dHJpYnV0ZSgiaHJlZiIpLG9wYWNpdHk6L14wLjUvLnRlc3Qoci5zdHlsZS5vcGFjaXR5KSxjc3NGbG9hdDohIXIuc3R5bGUuY3NzRmxvYXQsY2hlY2tPbjohIWEudmFsdWUsb3B0U2VsZWN0ZWQ6bC5zZWxlY3RlZCxlbmN0eXBlOiEhby5jcmVhdGVFbGVtZW50KCJmb3JtIikuZW5jdHlwZSxodG1sNUNsb25lOiI8Om5hdj48LzpuYXY+IiE9PW8uY3JlYXRlRWxlbWVudCgibmF2IikuY2xvbmVOb2RlKCEwKS5vdXRlckhUTUwsYm94TW9kZWw6IkNTUzFDb21wYXQiPT09by5jb21wYXRNb2RlLGRlbGV0ZUV4cGFuZG86ITAsbm9DbG9uZUV2ZW50OiEwLGlubGluZUJsb2NrTmVlZHNMYXlvdXQ6ITEsc2hyaW5rV3JhcEJsb2NrczohMSxyZWxpYWJsZU1hcmdpblJpZ2h0OiEwLGJveFNpemluZ1JlbGlhYmxlOiEwLHBpeGVsUG9zaXRpb246ITF9LGEuY2hlY2tlZD0hMCx0Lm5vQ2xvbmVDaGVja2VkPWEuY2xvbmVOb2RlKCEwKS5jaGVja2VkLHMuZGlzYWJsZWQ9ITAsdC5vcHREaXNhYmxlZD0hbC5kaXNhYmxlZDt0cnl7ZGVsZXRlIGQudGVzdH1jYXRjaChoKXt0LmRlbGV0ZUV4cGFuZG89ITF9YT1vLmNyZWF0ZUVsZW1lbnQoImlucHV0IiksYS5zZXRBdHRyaWJ1dGUoInZhbHVlIiwiIiksdC5pbnB1dD0iIj09PWEuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpLGEudmFsdWU9InQiLGEuc2V0QXR0cmlidXRlKCJ0eXBlIiwicmFkaW8iKSx0LnJhZGlvVmFsdWU9InQiPT09YS52YWx1ZSxhLnNldEF0dHJpYnV0ZSgiY2hlY2tlZCIsInQiKSxhLnNldEF0dHJpYnV0ZSgibmFtZSIsInQiKSx1PW8uY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHUuYXBwZW5kQ2hpbGQoYSksdC5hcHBlbmRDaGVja2VkPWEuY2hlY2tlZCx0LmNoZWNrQ2xvbmU9dS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsZC5hdHRhY2hFdmVudCYmKGQuYXR0YWNoRXZlbnQoIm9uY2xpY2siLGZ1bmN0aW9uKCl7dC5ub0Nsb25lRXZlbnQ9ITF9KSxkLmNsb25lTm9kZSghMCkuY2xpY2soKSk7Zm9yKGYgaW57c3VibWl0OiEwLGNoYW5nZTohMCxmb2N1c2luOiEwfSlkLnNldEF0dHJpYnV0ZShjPSJvbiIrZiwidCIpLHRbZisiQnViYmxlcyJdPWMgaW4gZXx8ZC5hdHRyaWJ1dGVzW2NdLmV4cGFuZG89PT0hMTtyZXR1cm4gZC5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD0iY29udGVudC1ib3giLGQuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD0iIix0LmNsZWFyQ2xvbmVTdHlsZT0iY29udGVudC1ib3giPT09ZC5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxiKGZ1bmN0aW9uKCl7dmFyIG4scixhLA==cz0icGFkZGluZzowO21hcmdpbjowO2JvcmRlcjowO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94OyIsdT1vLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07dSYmKG49by5jcmVhdGVFbGVtZW50KCJkaXYiKSxuLnN0eWxlLmNzc1RleHQ9ImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4Iix1LmFwcGVuZENoaWxkKG4pLmFwcGVuZENoaWxkKGQpLGQuaW5uZXJIVE1MPSI8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+IixhPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInRkIiksYVswXS5zdHlsZS5jc3NUZXh0PSJwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjA7ZGlzcGxheTpub25lIixwPTA9PT1hWzBdLm9mZnNldEhlaWdodCxhWzBdLnN0eWxlLmRpc3BsYXk9IiIsYVsxXS5zdHlsZS5kaXNwbGF5PSJub25lIix0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cz1wJiYwPT09YVswXS5vZmZzZXRIZWlnaHQsZC5pbm5lckhUTUw9IiIsZC5zdHlsZS5jc3NUZXh0PSJib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzoxcHg7Ym9yZGVyOjFweDtkaXNwbGF5OmJsb2NrO3dpZHRoOjRweDttYXJnaW4tdG9wOjElO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxJTsiLHQuYm94U2l6aW5nPTQ9PT1kLm9mZnNldFdpZHRoLHQuZG9lc05vdEluY2x1ZGVNYXJnaW5JbkJvZHlPZmZzZXQ9MSE9PXUub2Zmc2V0VG9wLGUuZ2V0Q29tcHV0ZWRTdHlsZSYmKHQucGl4ZWxQb3NpdGlvbj0iMSUiIT09KGUuZ2V0Q29tcHV0ZWRTdHlsZShkLG51bGwpfHx7fSkudG9wLHQuYm94U2l6aW5nUmVsaWFibGU9IjRweCI9PT0oZS5nZXRDb21wdXRlZFN0eWxlKGQsbnVsbCl8fHt3aWR0aDoiNHB4In0pLndpZHRoLHI9ZC5hcHBlbmRDaGlsZChvLmNyZWF0ZUVsZW1lbnQoImRpdiIpKSxyLnN0eWxlLmNzc1RleHQ9ZC5zdHlsZS5jc3NUZXh0PXMsci5zdHlsZS5tYXJnaW5SaWdodD1yLnN0eWxlLndpZHRoPSIwIixkLnN0eWxlLndpZHRoPSIxcHgiLHQucmVsaWFibGVNYXJnaW5SaWdodD0hcGFyc2VGbG9hdCgoZS5nZXRDb21wdXRlZFN0eWxlKHIsbnVsbCl8fHt9KS5tYXJnaW5SaWdodCkpLHR5cGVvZiBkLnN0eWxlLnpvb20hPT1pJiYoZC5pbm5lckhUTUw9IiIsZC5zdHlsZS5jc3NUZXh0PXMrIndpZHRoOjFweDtwYWRkaW5nOjFweDtkaXNwbGF5OmlubGluZTt6b29tOjEiLHQuaW5saW5lQmxvY2tOZWVkc0xheW91dD0zPT09ZC5vZmZzZXRXaWR0aCxkLnN0eWxlLmRpc3BsYXk9ImJsb2NrIixkLmlubmVySFRNTD0iPGRpdj48L2Rpdj4iLGQuZmlyc3RDaGlsZC5zdHlsZS53aWR0aD0iNXB4Iix0LnNocmlua1dyYXBCbG9ja3M9MyE9PWQub2Zmc2V0V2lkdGgsdC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0JiYodS5zdHlsZS56b29tPTEpKSx1LnJlbW92ZUNoaWxkKG4pLG49ZD1hPXI9bnVsbCl9KSxuPXM9dT1sPXI9YT1udWxsLHR9KCk7dmFyIE89Lyg/Olx7W1xzXFNdKlx9fFxbW1xzXFNdKlxdKSQvLEI9LyhbQS1aXSkvZztmdW5jdGlvbiBQKGUsbixyLGkpe2lmKGIuYWNjZXB0RGF0YShlKSl7dmFyIG8sYSxzPWIuZXhwYW5kbyx1PSJzdHJpbmciPT10eXBlb2YgbixsPWUubm9kZVR5cGUscD1sP2IuY2FjaGU6ZSxmPWw/ZVtzXTplW3NdJiZzO2lmKGYmJnBbZl0mJihpfHxwW2ZdLmRhdGEpfHwhdXx8ciE9PXQpcmV0dXJuIGZ8fChsP2Vbc109Zj1jLnBvcCgpfHxiLmd1aWQrKzpmPXMpLHBbZl18fChwW2ZdPXt9LGx8fChwW2ZdLnRvSlNPTj1iLm5vb3ApKSwoIm9iamVjdCI9PXR5cGVvZiBufHwiZnVuY3Rpb24iPT10eXBlb2YgbikmJihpP3BbZl09Yi5leHRlbmQocFtmXSxuKTpwW2ZdLmRhdGE9Yi5leHRlbmQocFtmXS5kYXRhLG4pKSxvPXBbZl0saXx8KG8uZGF0YXx8KG8uZGF0YT17fSksbz1vLmRhdGEpLHIhPT10JiYob1tiLmNhbWVsQ2FzZShuKV09ciksdT8oYT1vW25dLG51bGw9PWEmJihhPW9bYi5jYW1lbENhc2UobildKSk6YT1vLGF9fWZ1bmN0aW9uIFIoZSx0LG4pe2lmKGIuYWNjZXB0RGF0YShlKSl7dmFyIHIsaSxvLGE9ZS5ub2RlVHlwZSxzPWE/Yi5jYWNoZTplLHU9YT9lW2IuZXhwYW5kb106Yi5leHBhbmRvO2lmKHNbdV0pe2lmKHQmJihvPW4/c1t1XTpzW3VdLmRhdGEpKXtiLmlzQXJyYXkodCk/dD10LmNvbmNhdChiLm1hcCh0LGIuY2FtZWxDYXNlKSk6dCBpbiBvP3Q9W3RdOih0PWIuY2FtZWxDYXNlKHQpLHQ9dCBpbiBvP1t0XTp0LnNwbGl0KCIgIikpO2ZvcihyPTAsaT10Lmxlbmd0aDtpPnI7cisrKWRlbGV0ZSBvW3Rbcl1dO2lmKCEobj8kOmIuaXNFbXB0eU9iamVjdCkobykpcmV0dXJufShufHwoZGVsZXRlIHNbdV0uZGF0YSwkKHNbdV0pKSkmJihhP2IuY2xlYW5EYXRhKFtlXSwhMCk6Yi5zdXBwb3J0LmRlbGV0ZUV4cGFuZG98fHMhPXMud2luZG93P2RlbGV0ZSBzW3VdOnNbdV09bnVsbCl9fX1iLmV4dGVuZCh7Y2FjaGU6e30sZXhwYW5kbzoialF1ZXJ5IisocCtNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cRC9nLCIiKSxub0RhdGE6e2VtYmVkOiEwLG9iamVjdDoiY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwIixhcHBsZXQ6ITB9LGhhc0RhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9ZS5ub2RlVHlwZT9iLmNhY2hlW2VbYi5leHBhbmRvXV06ZVtiLmV4cGFuZG9dLCEhZSYmISQoZSl9LGRhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBQKGUsdCxuKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe3JldHVybiBSKGUsdCl9LF9kYXRhOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUChlLHQsbiwhMCl9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIFIoZSx0LCEwKX0sYWNjZXB0RGF0YTpmdW5jdGlvbihlKXtpZihlLm5vZGVUeXBlJiYxIT09ZS5ub2RlVHlwZSYmOSE9PWUubm9kZVR5cGUpcmV0dXJuITE7dmFyIHQ9ZS5ub2RlTmFtZSYmYi5ub0RhdGFbZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXTtyZXR1cm4hdHx8dCE9PSEwJiZlLmdldEF0dHJpYnV0ZSgiY2xhc3NpZCIpPT09dH19KSxiLmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihlLG4pe3ZhciByLGksbz10aGlzWzBdLGE9MCxzPW51bGw7aWYoZT09PXQpe2lmKHRoaXMubGVuZ3RoJiYocz1iLmRhdGEobyksMT09PW8ubm9kZVR5cGUmJiFiLl9kYXRhKG8sInBhcnNlZEF0dHJzIikpKXtmb3Iocj1vLmF0dHJpYnV0ZXM7ci5sZW5ndGg+YTthKyspaT1yW2FdLm5hbWUsaS5pbmRleE9mKCJkYXRhLSIpfHwoaT1iLmNhbWVsQ2FzZShpLnNsaWNlKDUpKSxXKG8saSxzW2ldKSk7Yi5fZGF0YShvLCJwYXJzZWRBdHRycyIsITApfXJldHVybiBzfXJldHVybiJvYmplY3QiPT10eXBlb2YgZT90aGlzLmVhY2goZnVuY3Rpb24oKXtiLmRhdGEodGhpcyxlKX0pOmIuYWNjZXNzKHRoaXMsZnVuY3Rpb24obil7cmV0dXJuIG49PT10P28/VyhvLGUsYi5kYXRhKG8sZSkpOm51bGw6KHRoaXMuZWFjaChmdW5jdGlvbigpe2IuZGF0YSh0aGlzLGUsbil9KSx0KX0sbnVsbCxuLGFyZ3VtZW50cy5sZW5ndGg+MSxudWxsLCEwKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yi5yZW1vdmVEYXRhKHRoaXMsZSl9KX19KTtmdW5jdGlvbiBXKGUsbixyKXtpZihyPT09dCYmMT09PWUubm9kZVR5cGUpe3ZhciBpPSJkYXRhLSIrbi5yZXBsYWNlKEIsIi0kMSIpLnRvTG93ZXJDYXNlKCk7aWYocj1lLmdldEF0dHJpYnV0ZShpKSwic3RyaW5nIj09dHlwZW9mIHIpe3RyeXtyPSJ0cnVlIj09PXI/ITA6ImZhbHNlIj09PXI/ITE6Im51bGwiPT09cj9udWxsOityKyIiPT09cj8rcjpPLnRlc3Qocik/Yi5wYXJzZUpTT04ocik6cn1jYXRjaChvKXt9Yi5kYXRhKGUsbixyKX1lbHNlIHI9dH1yZXR1cm4gcn1mdW5jdGlvbiAkKGUpe3ZhciB0O2Zvcih0IGluIGUpaWYoKCJkYXRhIiE9PXR8fCFiLmlzRW1wdHlPYmplY3QoZVt0XSkpJiYidG9KU09OIiE9PXQpcmV0dXJuITE7cmV0dXJuITB9Yg==LmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpO3JldHVybiBlPyhuPShufHwiZngiKSsicXVldWUiLGk9Yi5fZGF0YShlLG4pLHImJighaXx8Yi5pc0FycmF5KHIpP2k9Yi5fZGF0YShlLG4sYi5tYWtlQXJyYXkocikpOmkucHVzaChyKSksaXx8W10pOnR9LGRlcXVldWU6ZnVuY3Rpb24oZSx0KXt0PXR8fCJmeCI7dmFyIG49Yi5xdWV1ZShlLHQpLHI9bi5sZW5ndGgsaT1uLnNoaWZ0KCksbz1iLl9xdWV1ZUhvb2tzKGUsdCksYT1mdW5jdGlvbigpe2IuZGVxdWV1ZShlLHQpfTsiaW5wcm9ncmVzcyI9PT1pJiYoaT1uLnNoaWZ0KCksci0tKSxvLmN1cj1pLGkmJigiZngiPT09dCYmbi51bnNoaWZ0KCJpbnByb2dyZXNzIiksZGVsZXRlIG8uc3RvcCxpLmNhbGwoZSxhLG8pKSwhciYmbyYmby5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dCsicXVldWVIb29rcyI7cmV0dXJuIGIuX2RhdGEoZSxuKXx8Yi5fZGF0YShlLG4se2VtcHR5OmIuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLmFkZChmdW5jdGlvbigpe2IuX3JlbW92ZURhdGEoZSx0KyJxdWV1ZSIpLGIuX3JlbW92ZURhdGEoZSxuKX0pfSl9fSksYi5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGUsbil7dmFyIHI9MjtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGUmJihuPWUsZT0iZngiLHItLSkscj5hcmd1bWVudHMubGVuZ3RoP2IucXVldWUodGhpc1swXSxlKTpuPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWIucXVldWUodGhpcyxlLG4pO2IuX3F1ZXVlSG9va3ModGhpcyxlKSwiZngiPT09ZSYmImlucHJvZ3Jlc3MiIT09dFswXSYmYi5kZXF1ZXVlKHRoaXMsZSl9KX0sZGVxdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yi5kZXF1ZXVlKHRoaXMsZSl9KX0sZGVsYXk6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1iLmZ4P2IuZnguc3BlZWRzW2VdfHxlOmUsdD10fHwiZngiLHRoaXMucXVldWUodCxmdW5jdGlvbih0LG4pe3ZhciByPXNldFRpbWVvdXQodCxlKTtuLnN0b3A9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocil9fSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucXVldWUoZXx8ImZ4IixbXSl9LHByb21pc2U6ZnVuY3Rpb24oZSxuKXt2YXIgcixpPTEsbz1iLkRlZmVycmVkKCksYT10aGlzLHM9dGhpcy5sZW5ndGgsdT1mdW5jdGlvbigpey0taXx8by5yZXNvbHZlV2l0aChhLFthXSl9OyJzdHJpbmciIT10eXBlb2YgZSYmKG49ZSxlPXQpLGU9ZXx8ImZ4Ijt3aGlsZShzLS0pcj1iLl9kYXRhKGFbc10sZSsicXVldWVIb29rcyIpLHImJnIuZW1wdHkmJihpKyssci5lbXB0eS5hZGQodSkpO3JldHVybiB1KCksby5wcm9taXNlKG4pfX0pO3ZhciBJLHosWD0vW1x0XHJcbl0vZyxVPS9cci9nLFY9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkL2ksWT0vXig/OmF8YXJlYSkkL2ksSj0vXig/OmNoZWNrZWR8c2VsZWN0ZWR8YXV0b2ZvY3VzfGF1dG9wbGF5fGFzeW5jfGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkKSQvaSxHPS9eKD86Y2hlY2tlZHxzZWxlY3RlZCkkL2ksUT1iLnN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLEs9Yi5zdXBwb3J0LmlucHV0O2IuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGIuYWNjZXNzKHRoaXMsYi5hdHRyLGUsdCxhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtiLnJlbW92ZUF0dHIodGhpcyxlKX0pfSxwcm9wOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGIuYWNjZXNzKHRoaXMsYi5wcm9wLGUsdCxhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGUpe3JldHVybiBlPWIucHJvcEZpeFtlXXx8ZSx0aGlzLmVhY2goZnVuY3Rpb24oKXt0cnl7dGhpc1tlXT10LGRlbGV0ZSB0aGlzW2VdfWNhdGNoKG4pe319KX0sYWRkQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhPTAscz10aGlzLmxlbmd0aCx1PSJzdHJpbmciPT10eXBlb2YgZSYmZTtpZihiLmlzRnVuY3Rpb24oZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbih0KXtiKHRoaXMpLmFkZENsYXNzKGUuY2FsbCh0aGlzLHQsdGhpcy5jbGFzc05hbWUpKX0pO2lmKHUpZm9yKHQ9KGV8fCIiKS5tYXRjaCh3KXx8W107cz5hO2ErKylpZihuPXRoaXNbYV0scj0xPT09bi5ub2RlVHlwZSYmKG4uY2xhc3NOYW1lPygiICIrbi5jbGFzc05hbWUrIiAiKS5yZXBsYWNlKFgsIiAiKToiICIpKXtvPTA7d2hpbGUoaT10W28rK10pMD5yLmluZGV4T2YoIiAiK2krIiAiKSYmKHIrPWkrIiAiKTtuLmNsYXNzTmFtZT1iLnRyaW0ocil9cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYT0wLHM9dGhpcy5sZW5ndGgsdT0wPT09YXJndW1lbnRzLmxlbmd0aHx8InN0cmluZyI9PXR5cGVvZiBlJiZlO2lmKGIuaXNGdW5jdGlvbihlKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKHQpe2IodGhpcykucmVtb3ZlQ2xhc3MoZS5jYWxsKHRoaXMsdCx0aGlzLmNsYXNzTmFtZSkpfSk7aWYodSlmb3IodD0oZXx8IiIpLm1hdGNoKHcpfHxbXTtzPmE7YSsrKWlmKG49dGhpc1thXSxyPTE9PT1uLm5vZGVUeXBlJiYobi5jbGFzc05hbWU/KCIgIituLmNsYXNzTmFtZSsiICIpLnJlcGxhY2UoWCwiICIpOiIiKSl7bz0wO3doaWxlKGk9dFtvKytdKXdoaWxlKHIuaW5kZXhPZigiICIraSsiICIpPj0wKXI9ci5yZXBsYWNlKCIgIitpKyIgIiwiICIpO24uY2xhc3NOYW1lPWU/Yi50cmltKHIpOiIifXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihlLHQpe3ZhciBuPXR5cGVvZiBlLHI9ImJvb2xlYW4iPT10eXBlb2YgdDtyZXR1cm4gYi5pc0Z1bmN0aW9uKGUpP3RoaXMuZWFjaChmdW5jdGlvbihuKXtiKHRoaXMpLnRvZ2dsZUNsYXNzKGUuY2FsbCh0aGlzLG4sdGhpcy5jbGFzc05hbWUsdCksdCl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXtpZigic3RyaW5nIj09PW4pe3ZhciBvLGE9MCxzPWIodGhpcyksdT10LGw9ZS5tYXRjaCh3KXx8W107d2hpbGUobz1sW2ErK10pdT1yP3U6IXMuaGFzQ2xhc3Mobyksc1t1PyJhZGRDbGFzcyI6InJlbW92ZUNsYXNzIl0obyl9ZWxzZShuPT09aXx8ImJvb2xlYW4iPT09bikmJih0aGlzLmNsYXNzTmFtZSYmYi5fZGF0YSh0aGlzLCJfX2NsYXNzTmFtZV9fIix0aGlzLmNsYXNzTmFtZSksdGhpcy5jbGFzc05hbWU9dGhpcy5jbGFzc05hbWV8fGU9PT0hMT8iIjpiLl9kYXRhKHRoaXMsIl9fY2xhc3NOYW1lX18iKXx8IiIpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0PSIgIitlKyIgIixuPTAscj10aGlzLmxlbmd0aDtmb3IoO3I+bjtuKyspaWYoMT09PXRoaXNbbl0ubm9kZVR5cGUmJigiICIrdGhpc1tuXS5jbGFzc05hbWUrIiAiKS5yZXBsYWNlKFgsIiAiKS5pbmRleE9mKHQpPj0wKXJldHVybiEwO3JldHVybiExfSx2YWw6ZnVuY3Rpb24oZSl7dmFyIG4scixpLG89dGhpc1swXTt7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gaT1iLmlzRnVuY3Rpb24oZSksdGhpcy5lYWNoKGZ1bmN0aW9uKG4pe3ZhciBvLGE9Yih0aGlzKTsxPT09dGhpcy5ub2RlVHlwZSYmKG89aT9lLmNhbGwodGhpcyxuLGEudmFsKCkpOmUsbnVsbD09bz9vPSIiOiJudW1iZXIiPT10eXBlb2Ygbz9vKz0iIjpiLmlzQXJyYXkobykmJihvPWIubWFwKG8sZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/IiI6ZSsiIn0pKSxyPWIudmFsSG9va3NbdGhpcy50eXBlXXx8Yi52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLHImJiJzZXQiaW4gciYmci5zZXQodGhpcyxvLCJ2YWx1ZSIpIT09dHx8KHRoaXMudmFsdWU9bykpfSk7aWYobylyZXR1cm4gcj1iLnZhbEhvb2tzW28udHlwZV18fGIudmFsSG9va3Nbby5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxyJiYiZ2V0ImluIHImJihuPXIuZ2V0KG8sInZhbHVlIikpIT09dD9uOihuPW8udmFsdWUsInN0cmluZyI9PXR5cGVvZiBuP24ucmVwbGFjZShVLCIiKTpudWxsPT1uPyIiOm4pfX19KSxiLmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Zw==ZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5hdHRyaWJ1dGVzLnZhbHVlO3JldHVybiF0fHx0LnNwZWNpZmllZD9lLnZhbHVlOmUudGV4dH19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0LG4scj1lLm9wdGlvbnMsaT1lLnNlbGVjdGVkSW5kZXgsbz0ic2VsZWN0LW9uZSI9PT1lLnR5cGV8fDA+aSxhPW8/bnVsbDpbXSxzPW8/aSsxOnIubGVuZ3RoLHU9MD5pP3M6bz9pOjA7Zm9yKDtzPnU7dSsrKWlmKG49clt1XSwhKCFuLnNlbGVjdGVkJiZ1IT09aXx8KGIuc3VwcG9ydC5vcHREaXNhYmxlZD9uLmRpc2FibGVkOm51bGwhPT1uLmdldEF0dHJpYnV0ZSgiZGlzYWJsZWQiKSl8fG4ucGFyZW50Tm9kZS5kaXNhYmxlZCYmYi5ub2RlTmFtZShuLnBhcmVudE5vZGUsIm9wdGdyb3VwIikpKXtpZih0PWIobikudmFsKCksbylyZXR1cm4gdDthLnB1c2godCl9cmV0dXJuIGF9LHNldDpmdW5jdGlvbihlLHQpe3ZhciBuPWIubWFrZUFycmF5KHQpO3JldHVybiBiKGUpLmZpbmQoIm9wdGlvbiIpLmVhY2goZnVuY3Rpb24oKXt0aGlzLnNlbGVjdGVkPWIuaW5BcnJheShiKHRoaXMpLnZhbCgpLG4pPj0wfSksbi5sZW5ndGh8fChlLnNlbGVjdGVkSW5kZXg9LTEpLG59fX0sYXR0cjpmdW5jdGlvbihlLG4scil7dmFyIG8sYSxzLHU9ZS5ub2RlVHlwZTtpZihlJiYzIT09dSYmOCE9PXUmJjIhPT11KXJldHVybiB0eXBlb2YgZS5nZXRBdHRyaWJ1dGU9PT1pP2IucHJvcChlLG4scik6KGE9MSE9PXV8fCFiLmlzWE1MRG9jKGUpLGEmJihuPW4udG9Mb3dlckNhc2UoKSxvPWIuYXR0ckhvb2tzW25dfHwoSi50ZXN0KG4pP3o6SSkpLHI9PT10P28mJmEmJiJnZXQiaW4gbyYmbnVsbCE9PShzPW8uZ2V0KGUsbikpP3M6KHR5cGVvZiBlLmdldEF0dHJpYnV0ZSE9PWkmJihzPWUuZ2V0QXR0cmlidXRlKG4pKSxudWxsPT1zP3Q6cyk6bnVsbCE9PXI/byYmYSYmInNldCJpbiBvJiYocz1vLnNldChlLHIsbikpIT09dD9zOihlLnNldEF0dHJpYnV0ZShuLHIrIiIpLHIpOihiLnJlbW92ZUF0dHIoZSxuKSx0KSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk9MCxvPXQmJnQubWF0Y2godyk7aWYobyYmMT09PWUubm9kZVR5cGUpd2hpbGUobj1vW2krK10pcj1iLnByb3BGaXhbbl18fG4sSi50ZXN0KG4pPyFRJiZHLnRlc3Qobik/ZVtiLmNhbWVsQ2FzZSgiZGVmYXVsdC0iK24pXT1lW3JdPSExOmVbcl09ITE6Yi5hdHRyKGUsbiwiIiksZS5yZW1vdmVBdHRyaWJ1dGUoUT9uOnIpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihlLHQpe2lmKCFiLnN1cHBvcnQucmFkaW9WYWx1ZSYmInJhZGlvIj09PXQmJmIubm9kZU5hbWUoZSwiaW5wdXQiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoInR5cGUiLHQpLG4mJihlLnZhbHVlPW4pLHR9fX19LHByb3BGaXg6e3RhYmluZGV4OiJ0YWJJbmRleCIscmVhZG9ubHk6InJlYWRPbmx5IiwiZm9yIjoiaHRtbEZvciIsImNsYXNzIjoiY2xhc3NOYW1lIixtYXhsZW5ndGg6Im1heExlbmd0aCIsY2VsbHNwYWNpbmc6ImNlbGxTcGFjaW5nIixjZWxscGFkZGluZzoiY2VsbFBhZGRpbmciLHJvd3NwYW46InJvd1NwYW4iLGNvbHNwYW46ImNvbFNwYW4iLHVzZW1hcDoidXNlTWFwIixmcmFtZWJvcmRlcjoiZnJhbWVCb3JkZXIiLGNvbnRlbnRlZGl0YWJsZToiY29udGVudEVkaXRhYmxlIn0scHJvcDpmdW5jdGlvbihlLG4scil7dmFyIGksbyxhLHM9ZS5ub2RlVHlwZTtpZihlJiYzIT09cyYmOCE9PXMmJjIhPT1zKXJldHVybiBhPTEhPT1zfHwhYi5pc1hNTERvYyhlKSxhJiYobj1iLnByb3BGaXhbbl18fG4sbz1iLnByb3BIb29rc1tuXSksciE9PXQ/byYmInNldCJpbiBvJiYoaT1vLnNldChlLHIsbikpIT09dD9pOmVbbl09cjpvJiYiZ2V0ImluIG8mJm51bGwhPT0oaT1vLmdldChlLG4pKT9pOmVbbl19LHByb3BIb29rczp7dGFiSW5kZXg6e2dldDpmdW5jdGlvbihlKXt2YXIgbj1lLmdldEF0dHJpYnV0ZU5vZGUoInRhYmluZGV4Iik7cmV0dXJuIG4mJm4uc3BlY2lmaWVkP3BhcnNlSW50KG4udmFsdWUsMTApOlYudGVzdChlLm5vZGVOYW1lKXx8WS50ZXN0KGUubm9kZU5hbWUpJiZlLmhyZWY/MDp0fX19fSksej17Z2V0OmZ1bmN0aW9uKGUsbil7dmFyIHI9Yi5wcm9wKGUsbiksaT0iYm9vbGVhbiI9PXR5cGVvZiByJiZlLmdldEF0dHJpYnV0ZShuKSxvPSJib29sZWFuIj09dHlwZW9mIHI/SyYmUT9udWxsIT1pOkcudGVzdChuKT9lW2IuY2FtZWxDYXNlKCJkZWZhdWx0LSIrbildOiEhaTplLmdldEF0dHJpYnV0ZU5vZGUobik7cmV0dXJuIG8mJm8udmFsdWUhPT0hMT9uLnRvTG93ZXJDYXNlKCk6dH0sc2V0OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdD09PSExP2IucmVtb3ZlQXR0cihlLG4pOksmJlF8fCFHLnRlc3Qobik/ZS5zZXRBdHRyaWJ1dGUoIVEmJmIucHJvcEZpeFtuXXx8bixuKTplW2IuY2FtZWxDYXNlKCJkZWZhdWx0LSIrbildPWVbbl09ITAsbn19LEsmJlF8fChiLmF0dHJIb29rcy52YWx1ZT17Z2V0OmZ1bmN0aW9uKGUsbil7dmFyIHI9ZS5nZXRBdHRyaWJ1dGVOb2RlKG4pO3JldHVybiBiLm5vZGVOYW1lKGUsImlucHV0Iik/ZS5kZWZhdWx0VmFsdWU6ciYmci5zcGVjaWZpZWQ/ci52YWx1ZTp0fSxzZXQ6ZnVuY3Rpb24oZSxuLHIpe3JldHVybiBiLm5vZGVOYW1lKGUsImlucHV0Iik/KGUuZGVmYXVsdFZhbHVlPW4sdCk6SSYmSS5zZXQoZSxuLHIpfX0pLFF8fChJPWIudmFsSG9va3MuYnV0dG9uPXtnZXQ6ZnVuY3Rpb24oZSxuKXt2YXIgcj1lLmdldEF0dHJpYnV0ZU5vZGUobik7cmV0dXJuIHImJigiaWQiPT09bnx8Im5hbWUiPT09bnx8ImNvb3JkcyI9PT1uPyIiIT09ci52YWx1ZTpyLnNwZWNpZmllZCk/ci52YWx1ZTp0fSxzZXQ6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpPWUuZ2V0QXR0cmlidXRlTm9kZShyKTtyZXR1cm4gaXx8ZS5zZXRBdHRyaWJ1dGVOb2RlKGk9ZS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZShyKSksaS52YWx1ZT1uKz0iIiwidmFsdWUiPT09cnx8bj09PWUuZ2V0QXR0cmlidXRlKHIpP246dH19LGIuYXR0ckhvb2tzLmNvbnRlbnRlZGl0YWJsZT17Z2V0OkkuZ2V0LHNldDpmdW5jdGlvbihlLHQsbil7SS5zZXQoZSwiIj09PXQ/ITE6dCxuKX19LGIuZWFjaChbIndpZHRoIiwiaGVpZ2h0Il0sZnVuY3Rpb24oZSxuKXtiLmF0dHJIb29rc1tuXT1iLmV4dGVuZChiLmF0dHJIb29rc1tuXSx7c2V0OmZ1bmN0aW9uKGUscil7cmV0dXJuIiI9PT1yPyhlLnNldEF0dHJpYnV0ZShuLCJhdXRvIikscik6dH19KX0pKSxiLnN1cHBvcnQuaHJlZk5vcm1hbGl6ZWR8fChiLmVhY2goWyJocmVmIiwic3JjIiwid2lkdGgiLCJoZWlnaHQiXSxmdW5jdGlvbihlLG4pe2IuYXR0ckhvb2tzW25dPWIuZXh0ZW5kKGIuYXR0ckhvb2tzW25dLHtnZXQ6ZnVuY3Rpb24oZSl7dmFyIHI9ZS5nZXRBdHRyaWJ1dGUobiwyKTtyZXR1cm4gbnVsbD09cj90OnJ9fSl9KSxiLmVhY2goWyJocmVmIiwic3JjIl0sZnVuY3Rpb24oZSx0KXtiLnByb3BIb29rc1t0XT17Z2V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSh0LDQpfX19KSksYi5zdXBwb3J0LnN0eWxlfHwoYi5hdHRySG9va3Muc3R5bGU9e2dldDpmdW5jdGlvbihlKXtyZXR1cm4gZS5zdHlsZS5jc3NUZXh0fHx0fSxzZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5zdHlsZS5jc3NUZXh0PXQrIiJ9fSksYi5zdXBwb3J0Lm9wdFNlbGVjdGVkfHwoYi5wcm9wSG9va3Muc2VsZWN0ZWQ9Yi5leHRlbmQoYi5wcm9wSG9va3Muc2VsZWN0ZWQse2dldDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7cmV0dXJuIHQmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCksbnVsbH19KSksYi5zdXBwb3J0LmVuY3R5cGV8fChiLnByb3BGaXguZW5jdHlwZT0iZW5jb2RpbmciKSxiLnN1cHBvcnQuY2hlY2tPbnx8Yi5lYWNoKFsicmFkaW8iLCJjaGVja2JveCJdLGZ1bmN0aW9uKCl7Yi52YWxIb29rc1t0aGlzXT17Z2V0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZS5nZXRBdHRyaWJ1dGUoInZhbHVlIik/Im9uIjplLnZhbHVlfX19KSxiLmVhY2goWyJyYWRpbyIsImNoZWNrYm94Il0sZnVuY3Rpb24oKXtiLnZhbEhvb2tzW3RoaXNdPWIuZXh0ZW5kKGIudg==YWxIb29rc1t0aGlzXSx7c2V0OmZ1bmN0aW9uKGUsbil7cmV0dXJuIGIuaXNBcnJheShuKT9lLmNoZWNrZWQ9Yi5pbkFycmF5KGIoZSkudmFsKCksbik+PTA6dH19KX0pO3ZhciBaPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaSxldD0vXmtleS8sdHQ9L14oPzptb3VzZXxjb250ZXh0bWVudSl8Y2xpY2svLG50PS9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxydD0vXihbXi5dKikoPzpcLiguKyl8KSQvO2Z1bmN0aW9uIGl0KCl7cmV0dXJuITB9ZnVuY3Rpb24gb3QoKXtyZXR1cm4hMX1iLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKGUsbixyLG8sYSl7dmFyIHMsdSxsLGMscCxmLGQsaCxnLG0seSx2PWIuX2RhdGEoZSk7aWYodil7ci5oYW5kbGVyJiYoYz1yLHI9Yy5oYW5kbGVyLGE9Yy5zZWxlY3Rvciksci5ndWlkfHwoci5ndWlkPWIuZ3VpZCsrKSwodT12LmV2ZW50cyl8fCh1PXYuZXZlbnRzPXt9KSwoZj12LmhhbmRsZSl8fChmPXYuaGFuZGxlPWZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgYj09PWl8fGUmJmIuZXZlbnQudHJpZ2dlcmVkPT09ZS50eXBlP3Q6Yi5ldmVudC5kaXNwYXRjaC5hcHBseShmLmVsZW0sYXJndW1lbnRzKX0sZi5lbGVtPWUpLG49KG58fCIiKS5tYXRjaCh3KXx8WyIiXSxsPW4ubGVuZ3RoO3doaWxlKGwtLSlzPXJ0LmV4ZWMobltsXSl8fFtdLGc9eT1zWzFdLG09KHNbMl18fCIiKS5zcGxpdCgiLiIpLnNvcnQoKSxwPWIuZXZlbnQuc3BlY2lhbFtnXXx8e30sZz0oYT9wLmRlbGVnYXRlVHlwZTpwLmJpbmRUeXBlKXx8ZyxwPWIuZXZlbnQuc3BlY2lhbFtnXXx8e30sZD1iLmV4dGVuZCh7dHlwZTpnLG9yaWdUeXBlOnksZGF0YTpvLGhhbmRsZXI6cixndWlkOnIuZ3VpZCxzZWxlY3RvcjphLG5lZWRzQ29udGV4dDphJiZiLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoYSksbmFtZXNwYWNlOm0uam9pbigiLiIpfSxjKSwoaD11W2ddKXx8KGg9dVtnXT1bXSxoLmRlbGVnYXRlQ291bnQ9MCxwLnNldHVwJiZwLnNldHVwLmNhbGwoZSxvLG0sZikhPT0hMXx8KGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoZyxmLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KCJvbiIrZyxmKSkpLHAuYWRkJiYocC5hZGQuY2FsbChlLGQpLGQuaGFuZGxlci5ndWlkfHwoZC5oYW5kbGVyLmd1aWQ9ci5ndWlkKSksYT9oLnNwbGljZShoLmRlbGVnYXRlQ291bnQrKywwLGQpOmgucHVzaChkKSxiLmV2ZW50Lmdsb2JhbFtnXT0hMDtlPW51bGx9fSxyZW1vdmU6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdSxsLGMscCxmLGQsaCxnLG09Yi5oYXNEYXRhKGUpJiZiLl9kYXRhKGUpO2lmKG0mJihjPW0uZXZlbnRzKSl7dD0odHx8IiIpLm1hdGNoKHcpfHxbIiJdLGw9dC5sZW5ndGg7d2hpbGUobC0tKWlmKHM9cnQuZXhlYyh0W2xdKXx8W10sZD1nPXNbMV0saD0oc1syXXx8IiIpLnNwbGl0KCIuIikuc29ydCgpLGQpe3A9Yi5ldmVudC5zcGVjaWFsW2RdfHx7fSxkPShyP3AuZGVsZWdhdGVUeXBlOnAuYmluZFR5cGUpfHxkLGY9Y1tkXXx8W10scz1zWzJdJiZSZWdFeHAoIihefFxcLikiK2guam9pbigiXFwuKD86LipcXC58KSIpKyIoXFwufCQpIiksdT1vPWYubGVuZ3RoO3doaWxlKG8tLSlhPWZbb10sIWkmJmchPT1hLm9yaWdUeXBlfHxuJiZuLmd1aWQhPT1hLmd1aWR8fHMmJiFzLnRlc3QoYS5uYW1lc3BhY2UpfHxyJiZyIT09YS5zZWxlY3RvciYmKCIqKiIhPT1yfHwhYS5zZWxlY3Rvcil8fChmLnNwbGljZShvLDEpLGEuc2VsZWN0b3ImJmYuZGVsZWdhdGVDb3VudC0tLHAucmVtb3ZlJiZwLnJlbW92ZS5jYWxsKGUsYSkpO3UmJiFmLmxlbmd0aCYmKHAudGVhcmRvd24mJnAudGVhcmRvd24uY2FsbChlLGgsbS5oYW5kbGUpIT09ITF8fGIucmVtb3ZlRXZlbnQoZSxkLG0uaGFuZGxlKSxkZWxldGUgY1tkXSl9ZWxzZSBmb3IoZCBpbiBjKWIuZXZlbnQucmVtb3ZlKGUsZCt0W2xdLG4sciwhMCk7Yi5pc0VtcHR5T2JqZWN0KGMpJiYoZGVsZXRlIG0uaGFuZGxlLGIuX3JlbW92ZURhdGEoZSwiZXZlbnRzIikpfX0sdHJpZ2dlcjpmdW5jdGlvbihuLHIsaSxhKXt2YXIgcyx1LGwsYyxwLGYsZCxoPVtpfHxvXSxnPXkuY2FsbChuLCJ0eXBlIik/bi50eXBlOm4sbT15LmNhbGwobiwibmFtZXNwYWNlIik/bi5uYW1lc3BhY2Uuc3BsaXQoIi4iKTpbXTtpZihsPWY9aT1pfHxvLDMhPT1pLm5vZGVUeXBlJiY4IT09aS5ub2RlVHlwZSYmIW50LnRlc3QoZytiLmV2ZW50LnRyaWdnZXJlZCkmJihnLmluZGV4T2YoIi4iKT49MCYmKG09Zy5zcGxpdCgiLiIpLGc9bS5zaGlmdCgpLG0uc29ydCgpKSx1PTA+Zy5pbmRleE9mKCI6IikmJiJvbiIrZyxuPW5bYi5leHBhbmRvXT9uOm5ldyBiLkV2ZW50KGcsIm9iamVjdCI9PXR5cGVvZiBuJiZuKSxuLmlzVHJpZ2dlcj0hMCxuLm5hbWVzcGFjZT1tLmpvaW4oIi4iKSxuLm5hbWVzcGFjZV9yZT1uLm5hbWVzcGFjZT9SZWdFeHAoIihefFxcLikiK20uam9pbigiXFwuKD86LipcXC58KSIpKyIoXFwufCQpIik6bnVsbCxuLnJlc3VsdD10LG4udGFyZ2V0fHwobi50YXJnZXQ9aSkscj1udWxsPT1yP1tuXTpiLm1ha2VBcnJheShyLFtuXSkscD1iLmV2ZW50LnNwZWNpYWxbZ118fHt9LGF8fCFwLnRyaWdnZXJ8fHAudHJpZ2dlci5hcHBseShpLHIpIT09ITEpKXtpZighYSYmIXAubm9CdWJibGUmJiFiLmlzV2luZG93KGkpKXtmb3IoYz1wLmRlbGVnYXRlVHlwZXx8ZyxudC50ZXN0KGMrZyl8fChsPWwucGFyZW50Tm9kZSk7bDtsPWwucGFyZW50Tm9kZSloLnB1c2gobCksZj1sO2Y9PT0oaS5vd25lckRvY3VtZW50fHxvKSYmaC5wdXNoKGYuZGVmYXVsdFZpZXd8fGYucGFyZW50V2luZG93fHxlKX1kPTA7d2hpbGUoKGw9aFtkKytdKSYmIW4uaXNQcm9wYWdhdGlvblN0b3BwZWQoKSluLnR5cGU9ZD4xP2M6cC5iaW5kVHlwZXx8ZyxzPShiLl9kYXRhKGwsImV2ZW50cyIpfHx7fSlbbi50eXBlXSYmYi5fZGF0YShsLCJoYW5kbGUiKSxzJiZzLmFwcGx5KGwscikscz11JiZsW3VdLHMmJmIuYWNjZXB0RGF0YShsKSYmcy5hcHBseSYmcy5hcHBseShsLHIpPT09ITEmJm4ucHJldmVudERlZmF1bHQoKTtpZihuLnR5cGU9ZywhKGF8fG4uaXNEZWZhdWx0UHJldmVudGVkKCl8fHAuX2RlZmF1bHQmJnAuX2RlZmF1bHQuYXBwbHkoaS5vd25lckRvY3VtZW50LHIpIT09ITF8fCJjbGljayI9PT1nJiZiLm5vZGVOYW1lKGksImEiKXx8IWIuYWNjZXB0RGF0YShpKXx8IXV8fCFpW2ddfHxiLmlzV2luZG93KGkpKSl7Zj1pW3VdLGYmJihpW3VdPW51bGwpLGIuZXZlbnQudHJpZ2dlcmVkPWc7dHJ5e2lbZ10oKX1jYXRjaCh2KXt9Yi5ldmVudC50cmlnZ2VyZWQ9dCxmJiYoaVt1XT1mKX1yZXR1cm4gbi5yZXN1bHR9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXtlPWIuZXZlbnQuZml4KGUpO3ZhciBuLHIsaSxvLGEscz1bXSx1PWguY2FsbChhcmd1bWVudHMpLGw9KGIuX2RhdGEodGhpcywiZXZlbnRzIil8fHt9KVtlLnR5cGVdfHxbXSxjPWIuZXZlbnQuc3BlY2lhbFtlLnR5cGVdfHx7fTtpZih1WzBdPWUsZS5kZWxlZ2F0ZVRhcmdldD10aGlzLCFjLnByZURpc3BhdGNofHxjLnByZURpc3BhdGNoLmNhbGwodGhpcyxlKSE9PSExKXtzPWIuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLGUsbCksbj0wO3doaWxlKChvPXNbbisrXSkmJiFlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe2UuY3VycmVudFRhcmdldD1vLmVsZW0sYT0wO3doaWxlKChpPW8uaGFuZGxlcnNbYSsrXSkmJiFlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpKCFlLm5hbWVzcGFjZV9yZXx8ZS5uYW1lc3BhY2VfcmUudGVzdChpLm5hbWVzcGFjZSkpJiYoZS5oYW5kbGVPYmo9aSxlLmRhdGE9aS5kYXRhLHI9KChiLmV2ZW50LnNwZWNpYWxbaS5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGkuaGFuZGxlcikuYXBwbHkoby5lbGVtLHUpLHIhPT10JiYoZS5yZXN1bHQ9cik9PT0hMSYmKGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGMucG9zdERpc3BhdGNoJiZjLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsZSksZS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihlLG4pe3ZhciByLGksbyxhLHM9W10sdT1uLmRlbGVnYXRlQ291bnQsbD1lLnRhcmdldDtpZih1Jg==Jmwubm9kZVR5cGUmJighZS5idXR0b258fCJjbGljayIhPT1lLnR5cGUpKWZvcig7bCE9dGhpcztsPWwucGFyZW50Tm9kZXx8dGhpcylpZigxPT09bC5ub2RlVHlwZSYmKGwuZGlzYWJsZWQhPT0hMHx8ImNsaWNrIiE9PWUudHlwZSkpe2ZvcihvPVtdLGE9MDt1PmE7YSsrKWk9blthXSxyPWkuc2VsZWN0b3IrIiAiLG9bcl09PT10JiYob1tyXT1pLm5lZWRzQ29udGV4dD9iKHIsdGhpcykuaW5kZXgobCk+PTA6Yi5maW5kKHIsdGhpcyxudWxsLFtsXSkubGVuZ3RoKSxvW3JdJiZvLnB1c2goaSk7by5sZW5ndGgmJnMucHVzaCh7ZWxlbTpsLGhhbmRsZXJzOm99KX1yZXR1cm4gbi5sZW5ndGg+dSYmcy5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6bi5zbGljZSh1KX0pLHN9LGZpeDpmdW5jdGlvbihlKXtpZihlW2IuZXhwYW5kb10pcmV0dXJuIGU7dmFyIHQsbixyLGk9ZS50eXBlLGE9ZSxzPXRoaXMuZml4SG9va3NbaV07c3x8KHRoaXMuZml4SG9va3NbaV09cz10dC50ZXN0KGkpP3RoaXMubW91c2VIb29rczpldC50ZXN0KGkpP3RoaXMua2V5SG9va3M6e30pLHI9cy5wcm9wcz90aGlzLnByb3BzLmNvbmNhdChzLnByb3BzKTp0aGlzLnByb3BzLGU9bmV3IGIuRXZlbnQoYSksdD1yLmxlbmd0aDt3aGlsZSh0LS0pbj1yW3RdLGVbbl09YVtuXTtyZXR1cm4gZS50YXJnZXR8fChlLnRhcmdldD1hLnNyY0VsZW1lbnR8fG8pLDM9PT1lLnRhcmdldC5ub2RlVHlwZSYmKGUudGFyZ2V0PWUudGFyZ2V0LnBhcmVudE5vZGUpLGUubWV0YUtleT0hIWUubWV0YUtleSxzLmZpbHRlcj9zLmZpbHRlcihlLGEpOmV9LHByb3BzOiJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2giLnNwbGl0KCIgIiksZml4SG9va3M6e30sa2V5SG9va3M6e3Byb3BzOiJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlIi5zcGxpdCgiICIpLGZpbHRlcjpmdW5jdGlvbihlLHQpe3JldHVybiBudWxsPT1lLndoaWNoJiYoZS53aGljaD1udWxsIT10LmNoYXJDb2RlP3QuY2hhckNvZGU6dC5rZXlDb2RlKSxlfX0sbW91c2VIb29rczp7cHJvcHM6ImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudCIuc3BsaXQoIiAiKSxmaWx0ZXI6ZnVuY3Rpb24oZSxuKXt2YXIgcixpLGEscz1uLmJ1dHRvbix1PW4uZnJvbUVsZW1lbnQ7cmV0dXJuIG51bGw9PWUucGFnZVgmJm51bGwhPW4uY2xpZW50WCYmKGk9ZS50YXJnZXQub3duZXJEb2N1bWVudHx8byxhPWkuZG9jdW1lbnRFbGVtZW50LHI9aS5ib2R5LGUucGFnZVg9bi5jbGllbnRYKyhhJiZhLnNjcm9sbExlZnR8fHImJnIuc2Nyb2xsTGVmdHx8MCktKGEmJmEuY2xpZW50TGVmdHx8ciYmci5jbGllbnRMZWZ0fHwwKSxlLnBhZ2VZPW4uY2xpZW50WSsoYSYmYS5zY3JvbGxUb3B8fHImJnIuc2Nyb2xsVG9wfHwwKS0oYSYmYS5jbGllbnRUb3B8fHImJnIuY2xpZW50VG9wfHwwKSksIWUucmVsYXRlZFRhcmdldCYmdSYmKGUucmVsYXRlZFRhcmdldD11PT09ZS50YXJnZXQ/bi50b0VsZW1lbnQ6dSksZS53aGljaHx8cz09PXR8fChlLndoaWNoPTEmcz8xOjImcz8zOjQmcz8yOjApLGV9fSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYi5ub2RlTmFtZSh0aGlzLCJpbnB1dCIpJiYiY2hlY2tib3giPT09dGhpcy50eXBlJiZ0aGlzLmNsaWNrPyh0aGlzLmNsaWNrKCksITEpOnR9fSxmb2N1czp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKHRoaXMhPT1vLmFjdGl2ZUVsZW1lbnQmJnRoaXMuZm9jdXMpdHJ5e3JldHVybiB0aGlzLmZvY3VzKCksITF9Y2F0Y2goZSl7fX0sZGVsZWdhdGVUeXBlOiJmb2N1c2luIn0sYmx1cjp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzPT09by5hY3RpdmVFbGVtZW50JiZ0aGlzLmJsdXI/KHRoaXMuYmx1cigpLCExKTp0fSxkZWxlZ2F0ZVR5cGU6ImZvY3Vzb3V0In0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oZSl7ZS5yZXN1bHQhPT10JiYoZS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWUucmVzdWx0KX19fSxzaW11bGF0ZTpmdW5jdGlvbihlLHQsbixyKXt2YXIgaT1iLmV4dGVuZChuZXcgYi5FdmVudCxuLHt0eXBlOmUsaXNTaW11bGF0ZWQ6ITAsb3JpZ2luYWxFdmVudDp7fX0pO3I/Yi5ldmVudC50cmlnZ2VyKGksbnVsbCx0KTpiLmV2ZW50LmRpc3BhdGNoLmNhbGwodCxpKSxpLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZuLnByZXZlbnREZWZhdWx0KCl9fSxiLnJlbW92ZUV2ZW50PW8ucmVtb3ZlRXZlbnRMaXN0ZW5lcj9mdW5jdGlvbihlLHQsbil7ZS5yZW1vdmVFdmVudExpc3RlbmVyJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuLCExKX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByPSJvbiIrdDtlLmRldGFjaEV2ZW50JiYodHlwZW9mIGVbcl09PT1pJiYoZVtyXT1udWxsKSxlLmRldGFjaEV2ZW50KHIsbikpfSxiLkV2ZW50PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBiLkV2ZW50PyhlJiZlLnR5cGU/KHRoaXMub3JpZ2luYWxFdmVudD1lLHRoaXMudHlwZT1lLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZS5kZWZhdWx0UHJldmVudGVkfHxlLnJldHVyblZhbHVlPT09ITF8fGUuZ2V0UHJldmVudERlZmF1bHQmJmUuZ2V0UHJldmVudERlZmF1bHQoKT9pdDpvdCk6dGhpcy50eXBlPWUsbiYmYi5leHRlbmQodGhpcyxuKSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8Yi5ub3coKSx0aGlzW2IuZXhwYW5kb109ITAsdCk6bmV3IGIuRXZlbnQoZSxuKX0sYi5FdmVudC5wcm90b3R5cGU9e2lzRGVmYXVsdFByZXZlbnRlZDpvdCxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpvdCxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpvdCxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1pdCxlJiYoZS5wcmV2ZW50RGVmYXVsdD9lLnByZXZlbnREZWZhdWx0KCk6ZS5yZXR1cm5WYWx1ZT0hMSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWl0LGUmJihlLnN0b3BQcm9wYWdhdGlvbiYmZS5zdG9wUHJvcGFnYXRpb24oKSxlLmNhbmNlbEJ1YmJsZT0hMCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9aXQsdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LGIuZWFjaCh7bW91c2VlbnRlcjoibW91c2VvdmVyIixtb3VzZWxlYXZlOiJtb3VzZW91dCJ9LGZ1bmN0aW9uKGUsdCl7Yi5ldmVudC5zcGVjaWFsW2VdPXtkZWxlZ2F0ZVR5cGU6dCxiaW5kVHlwZTp0LGhhbmRsZTpmdW5jdGlvbihlKXt2YXIgbixyPXRoaXMsaT1lLnJlbGF0ZWRUYXJnZXQsbz1lLmhhbmRsZU9iajsKcmV0dXJuKCFpfHxpIT09ciYmIWIuY29udGFpbnMocixpKSkmJihlLnR5cGU9by5vcmlnVHlwZSxuPW8uaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZS50eXBlPXQpLG59fX0pLGIuc3VwcG9ydC5zdWJtaXRCdWJibGVzfHwoYi5ldmVudC5zcGVjaWFsLnN1Ym1pdD17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gYi5ub2RlTmFtZSh0aGlzLCJmb3JtIik/ITE6KGIuZXZlbnQuYWRkKHRoaXMsImNsaWNrLl9zdWJtaXQga2V5cHJlc3MuX3N1Ym1pdCIsZnVuY3Rpb24oZSl7dmFyIG49ZS50YXJnZXQscj1iLm5vZGVOYW1lKG4sImlucHV0Iil8fGIubm9kZU5hbWUobiwiYnV0dG9uIik/bi5mb3JtOnQ7ciYmIWIuX2RhdGEociwic3VibWl0QnViYmxlcyIpJiYoYi5ldmVudC5hZGQociwic3VibWl0Ll9zdWJtaXQiLGZ1bmN0aW9uKGUpe2UuX3N1Ym1pdF9idWJibGU9ITB9KSxiLl9kYXRhKHIsInN1Ym1pdEJ1YmJsZXMiLCEwKSl9KSx0KX0scG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe2UuX3N1Ym1pdF9idWJibGUmJihkZWxldGUgZS5fc3VibWl0X2J1YmJsZSx0aGlzLnBhcmVudE5vZGUmJg==IWUuaXNUcmlnZ2VyJiZiLmV2ZW50LnNpbXVsYXRlKCJzdWJtaXQiLHRoaXMucGFyZW50Tm9kZSxlLCEwKSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7cmV0dXJuIGIubm9kZU5hbWUodGhpcywiZm9ybSIpPyExOihiLmV2ZW50LnJlbW92ZSh0aGlzLCIuX3N1Ym1pdCIpLHQpfX0pLGIuc3VwcG9ydC5jaGFuZ2VCdWJibGVzfHwoYi5ldmVudC5zcGVjaWFsLmNoYW5nZT17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gWi50ZXN0KHRoaXMubm9kZU5hbWUpPygoImNoZWNrYm94Ij09PXRoaXMudHlwZXx8InJhZGlvIj09PXRoaXMudHlwZSkmJihiLmV2ZW50LmFkZCh0aGlzLCJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlIixmdW5jdGlvbihlKXsiY2hlY2tlZCI9PT1lLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lJiYodGhpcy5fanVzdF9jaGFuZ2VkPSEwKX0pLGIuZXZlbnQuYWRkKHRoaXMsImNsaWNrLl9jaGFuZ2UiLGZ1bmN0aW9uKGUpe3RoaXMuX2p1c3RfY2hhbmdlZCYmIWUuaXNUcmlnZ2VyJiYodGhpcy5fanVzdF9jaGFuZ2VkPSExKSxiLmV2ZW50LnNpbXVsYXRlKCJjaGFuZ2UiLHRoaXMsZSwhMCl9KSksITEpOihiLmV2ZW50LmFkZCh0aGlzLCJiZWZvcmVhY3RpdmF0ZS5fY2hhbmdlIixmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtaLnRlc3QodC5ub2RlTmFtZSkmJiFiLl9kYXRhKHQsImNoYW5nZUJ1YmJsZXMiKSYmKGIuZXZlbnQuYWRkKHQsImNoYW5nZS5fY2hhbmdlIixmdW5jdGlvbihlKXshdGhpcy5wYXJlbnROb2RlfHxlLmlzU2ltdWxhdGVkfHxlLmlzVHJpZ2dlcnx8Yi5ldmVudC5zaW11bGF0ZSgiY2hhbmdlIix0aGlzLnBhcmVudE5vZGUsZSwhMCl9KSxiLl9kYXRhKHQsImNoYW5nZUJ1YmJsZXMiLCEwKSl9KSx0KX0saGFuZGxlOmZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0O3JldHVybiB0aGlzIT09bnx8ZS5pc1NpbXVsYXRlZHx8ZS5pc1RyaWdnZXJ8fCJyYWRpbyIhPT1uLnR5cGUmJiJjaGVja2JveCIhPT1uLnR5cGU/ZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dH0sdGVhcmRvd246ZnVuY3Rpb24oKXtyZXR1cm4gYi5ldmVudC5yZW1vdmUodGhpcywiLl9jaGFuZ2UiKSwhWi50ZXN0KHRoaXMubm9kZU5hbWUpfX0pLGIuc3VwcG9ydC5mb2N1c2luQnViYmxlc3x8Yi5lYWNoKHtmb2N1czoiZm9jdXNpbiIsYmx1cjoiZm9jdXNvdXQifSxmdW5jdGlvbihlLHQpe3ZhciBuPTAscj1mdW5jdGlvbihlKXtiLmV2ZW50LnNpbXVsYXRlKHQsZS50YXJnZXQsYi5ldmVudC5maXgoZSksITApfTtiLmV2ZW50LnNwZWNpYWxbdF09e3NldHVwOmZ1bmN0aW9uKCl7MD09PW4rKyYmby5hZGRFdmVudExpc3RlbmVyKGUsciwhMCl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7MD09PS0tbiYmby5yZW1vdmVFdmVudExpc3RlbmVyKGUsciwhMCl9fX0pLGIuZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihlLG4scixpLG8pe3ZhciBhLHM7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXsic3RyaW5nIiE9dHlwZW9mIG4mJihyPXJ8fG4sbj10KTtmb3IoYSBpbiBlKXRoaXMub24oYSxuLHIsZVthXSxvKTtyZXR1cm4gdGhpc31pZihudWxsPT1yJiZudWxsPT1pPyhpPW4scj1uPXQpOm51bGw9PWkmJigic3RyaW5nIj09dHlwZW9mIG4/KGk9cixyPXQpOihpPXIscj1uLG49dCkpLGk9PT0hMSlpPW90O2Vsc2UgaWYoIWkpcmV0dXJuIHRoaXM7cmV0dXJuIDE9PT1vJiYocz1pLGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGIoKS5vZmYoZSkscy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGkuZ3VpZD1zLmd1aWR8fChzLmd1aWQ9Yi5ndWlkKyspKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtiLmV2ZW50LmFkZCh0aGlzLGUsaSxyLG4pfSl9LG9uZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5vbihlLHQsbixyLDEpfSxvZmY6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG87aWYoZSYmZS5wcmV2ZW50RGVmYXVsdCYmZS5oYW5kbGVPYmopcmV0dXJuIGk9ZS5oYW5kbGVPYmosYihlLmRlbGVnYXRlVGFyZ2V0KS5vZmYoaS5uYW1lc3BhY2U/aS5vcmlnVHlwZSsiLiIraS5uYW1lc3BhY2U6aS5vcmlnVHlwZSxpLnNlbGVjdG9yLGkuaGFuZGxlciksdGhpcztpZigib2JqZWN0Ij09dHlwZW9mIGUpe2ZvcihvIGluIGUpdGhpcy5vZmYobyxuLGVbb10pO3JldHVybiB0aGlzfXJldHVybihuPT09ITF8fCJmdW5jdGlvbiI9PXR5cGVvZiBuKSYmKHI9bixuPXQpLHI9PT0hMSYmKHI9b3QpLHRoaXMuZWFjaChmdW5jdGlvbigpe2IuZXZlbnQucmVtb3ZlKHRoaXMsZSxyLG4pfSl9LGJpbmQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLm9uKGUsbnVsbCx0LG4pfSx1bmJpbmQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vZmYoZSxudWxsLHQpfSxkZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5vbih0LGUsbixyKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGUsIioqIik6dGhpcy5vZmYodCxlfHwiKioiLG4pfSx0cmlnZ2VyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2IuZXZlbnQudHJpZ2dlcihlLHQsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oZSxuKXt2YXIgcj10aGlzWzBdO3JldHVybiByP2IuZXZlbnQudHJpZ2dlcihlLG4sciwhMCk6dH19KSxmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGEscyx1LGwsYyxwLGYsZCxoLGcsbSx5LHYseD0ic2l6emxlIistbmV3IERhdGUsdz1lLmRvY3VtZW50LFQ9e30sTj0wLEM9MCxrPWl0KCksRT1pdCgpLFM9aXQoKSxBPXR5cGVvZiB0LGo9MTw8MzEsRD1bXSxMPUQucG9wLEg9RC5wdXNoLHE9RC5zbGljZSxNPUQuaW5kZXhPZnx8ZnVuY3Rpb24oZSl7dmFyIHQ9MCxuPXRoaXMubGVuZ3RoO2Zvcig7bj50O3QrKylpZih0aGlzW3RdPT09ZSlyZXR1cm4gdDtyZXR1cm4tMX0sXz0iW1xceDIwXFx0XFxyXFxuXFxmXSIsRj0iKD86XFxcXC58W1xcdy1dfFteXFx4MDAtXFx4YTBdKSsiLE89Ri5yZXBsYWNlKCJ3IiwidyMiKSxCPSIoWypeJHwhfl0/PSkiLFA9IlxcWyIrXysiKigiK0YrIikiK18rIiooPzoiK0IrXysiKig/OihbJ1wiXSkoKD86XFxcXC58W15cXFxcXSkqPylcXDN8KCIrTysiKXwpfCkiK18rIipcXF0iLFI9IjooIitGKyIpKD86XFwoKChbJ1wiXSkoKD86XFxcXC58W15cXFxcXSkqPylcXDN8KCg/OlxcXFwufFteXFxcXCgpW1xcXV18IitQLnJlcGxhY2UoMyw4KSsiKSopfC4qKVxcKXwpIixXPVJlZ0V4cCgiXiIrXysiK3woKD86XnxbXlxcXFxdKSg/OlxcXFwuKSopIitfKyIrJCIsImciKSwkPVJlZ0V4cCgiXiIrXysiKiwiK18rIioiKSxJPVJlZ0V4cCgiXiIrXysiKihbXFx4MjBcXHRcXHJcXG5cXGY+K35dKSIrXysiKiIpLHo9UmVnRXhwKFIpLFg9UmVnRXhwKCJeIitPKyIkIiksVT17SUQ6UmVnRXhwKCJeIygiK0YrIikiKSxDTEFTUzpSZWdFeHAoIl5cXC4oIitGKyIpIiksTkFNRTpSZWdFeHAoIl5cXFtuYW1lPVsnXCJdPygiK0YrIilbJ1wiXT9cXF0iKSxUQUc6UmVnRXhwKCJeKCIrRi5yZXBsYWNlKCJ3IiwidyoiKSsiKSIpLEFUVFI6UmVnRXhwKCJeIitQKSxQU0VVRE86UmVnRXhwKCJeIitSKSxDSElMRDpSZWdFeHAoIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcKCIrXysiKihldmVufG9kZHwoKFsrLV18KShcXGQqKW58KSIrXysiKig/OihbKy1dfCkiK18rIiooXFxkKyl8KSkiK18rIipcXCl8KSIsImkiKSxuZWVkc0NvbnRleHQ6UmVnRXhwKCJeIitfKyIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXCgiK18rIiooKD86LVxcZCk/XFxkKikiK18rIipcXCl8KSg/PVteLV18JCkiLCJpIil9LFY9L1tceDIwXHRcclxuXGZdKlsrfl0vLFk9L15bXntdK1x7XHMqXFtuYXRpdmUgY29kZS8sSj0vXig/OiMoW1x3LV0rKXwoXHcrKXxcLihbXHctXSspKSQvLEc9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxRPS9eaFxkJC9pLEs9Lyd8XFwvZyxaPS9cPVtceDIwXHRcclxuXGZdKihbXiciXF1dKilbXHgyMFx0XHJcblxmXSpcXS9nLGV0PS9cXChbXGRhLWZBLUZdezEsNn1bXHgyMFx0XHJcblxmXT98LikvZyx0dD1mdW5jdGlvbihlLHQpew==dmFyIG49IjB4Iit0LTY1NTM2O3JldHVybiBuIT09bj90OjA+bj9TdHJpbmcuZnJvbUNoYXJDb2RlKG4rNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8bj4+MTAsNTYzMjB8MTAyMyZuKX07dHJ5e3EuY2FsbCh3LmRvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzLDApWzBdLm5vZGVUeXBlfWNhdGNoKG50KXtxPWZ1bmN0aW9uKGUpe3ZhciB0LG49W107d2hpbGUodD10aGlzW2UrK10pbi5wdXNoKHQpO3JldHVybiBufX1mdW5jdGlvbiBydChlKXtyZXR1cm4gWS50ZXN0KGUrIiIpfWZ1bmN0aW9uIGl0KCl7dmFyIGUsdD1bXTtyZXR1cm4gZT1mdW5jdGlvbihuLHIpe3JldHVybiB0LnB1c2gobis9IiAiKT5pLmNhY2hlTGVuZ3RoJiZkZWxldGUgZVt0LnNoaWZ0KCldLGVbbl09cn19ZnVuY3Rpb24gb3QoZSl7cmV0dXJuIGVbeF09ITAsZX1mdW5jdGlvbiBhdChlKXt2YXIgdD1wLmNyZWF0ZUVsZW1lbnQoImRpdiIpO3RyeXtyZXR1cm4gZSh0KX1jYXRjaChuKXtyZXR1cm4hMX1maW5hbGx5e3Q9bnVsbH19ZnVuY3Rpb24gc3QoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsLGYsZyxtLHY7aWYoKHQ/dC5vd25lckRvY3VtZW50fHx0OncpIT09cCYmYyh0KSx0PXR8fHAsbj1ufHxbXSwhZXx8InN0cmluZyIhPXR5cGVvZiBlKXJldHVybiBuO2lmKDEhPT0ocz10Lm5vZGVUeXBlKSYmOSE9PXMpcmV0dXJuW107aWYoIWQmJiFyKXtpZihpPUouZXhlYyhlKSlpZihhPWlbMV0pe2lmKDk9PT1zKXtpZihvPXQuZ2V0RWxlbWVudEJ5SWQoYSksIW98fCFvLnBhcmVudE5vZGUpcmV0dXJuIG47aWYoby5pZD09PWEpcmV0dXJuIG4ucHVzaChvKSxufWVsc2UgaWYodC5vd25lckRvY3VtZW50JiYobz10Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYSkpJiZ5KHQsbykmJm8uaWQ9PT1hKXJldHVybiBuLnB1c2gobyksbn1lbHNle2lmKGlbMl0pcmV0dXJuIEguYXBwbHkobixxLmNhbGwodC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKSwwKSksbjtpZigoYT1pWzNdKSYmVC5nZXRCeUNsYXNzTmFtZSYmdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBILmFwcGx5KG4scS5jYWxsKHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShhKSwwKSksbn1pZihULnFzYSYmIWgudGVzdChlKSl7aWYoZj0hMCxnPXgsbT10LHY9OT09PXMmJmUsMT09PXMmJiJvYmplY3QiIT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtsPWZ0KGUpLChmPXQuZ2V0QXR0cmlidXRlKCJpZCIpKT9nPWYucmVwbGFjZShLLCJcXCQmIik6dC5zZXRBdHRyaWJ1dGUoImlkIixnKSxnPSJbaWQ9JyIrZysiJ10gIix1PWwubGVuZ3RoO3doaWxlKHUtLSlsW3VdPWcrZHQobFt1XSk7bT1WLnRlc3QoZSkmJnQucGFyZW50Tm9kZXx8dCx2PWwuam9pbigiLCIpfWlmKHYpdHJ5e3JldHVybiBILmFwcGx5KG4scS5jYWxsKG0ucXVlcnlTZWxlY3RvckFsbCh2KSwwKSksbn1jYXRjaChiKXt9ZmluYWxseXtmfHx0LnJlbW92ZUF0dHJpYnV0ZSgiaWQiKX19fXJldHVybiB3dChlLnJlcGxhY2UoVywiJDEiKSx0LG4scil9YT1zdC5pc1hNTD1mdW5jdGlvbihlKXt2YXIgdD1lJiYoZS5vd25lckRvY3VtZW50fHxlKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIHQ/IkhUTUwiIT09dC5ub2RlTmFtZTohMX0sYz1zdC5zZXREb2N1bWVudD1mdW5jdGlvbihlKXt2YXIgbj1lP2Uub3duZXJEb2N1bWVudHx8ZTp3O3JldHVybiBuIT09cCYmOT09PW4ubm9kZVR5cGUmJm4uZG9jdW1lbnRFbGVtZW50PyhwPW4sZj1uLmRvY3VtZW50RWxlbWVudCxkPWEobiksVC50YWdOYW1lTm9Db21tZW50cz1hdChmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBlbmRDaGlsZChuLmNyZWF0ZUNvbW1lbnQoIiIpKSwhZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpLmxlbmd0aH0pLFQuYXR0cmlidXRlcz1hdChmdW5jdGlvbihlKXtlLmlubmVySFRNTD0iPHNlbGVjdD48L3NlbGVjdD4iO3ZhciB0PXR5cGVvZiBlLmxhc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIm11bHRpcGxlIik7cmV0dXJuImJvb2xlYW4iIT09dCYmInN0cmluZyIhPT10fSksVC5nZXRCeUNsYXNzTmFtZT1hdChmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9IjxkaXYgY2xhc3M9J2hpZGRlbiBlJz48L2Rpdj48ZGl2IGNsYXNzPSdoaWRkZW4nPjwvZGl2PiIsZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImUiKS5sZW5ndGg/KGUubGFzdENoaWxkLmNsYXNzTmFtZT0iZSIsMj09PWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiZSIpLmxlbmd0aCk6ITF9KSxULmdldEJ5TmFtZT1hdChmdW5jdGlvbihlKXtlLmlkPXgrMCxlLmlubmVySFRNTD0iPGEgbmFtZT0nIit4KyInPjwvYT48ZGl2IG5hbWU9JyIreCsiJz48L2Rpdj4iLGYuaW5zZXJ0QmVmb3JlKGUsZi5maXJzdENoaWxkKTt2YXIgdD1uLmdldEVsZW1lbnRzQnlOYW1lJiZuLmdldEVsZW1lbnRzQnlOYW1lKHgpLmxlbmd0aD09PTIrbi5nZXRFbGVtZW50c0J5TmFtZSh4KzApLmxlbmd0aDtyZXR1cm4gVC5nZXRJZE5vdE5hbWU9IW4uZ2V0RWxlbWVudEJ5SWQoeCksZi5yZW1vdmVDaGlsZChlKSx0fSksaS5hdHRySGFuZGxlPWF0KGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD0iPGEgaHJlZj0nIyc+PC9hPiIsZS5maXJzdENoaWxkJiZ0eXBlb2YgZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSE9PUEmJiIjIj09PWUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoImhyZWYiKX0pP3t9OntocmVmOmZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSgiaHJlZiIsMil9LHR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKCJ0eXBlIil9fSxULmdldElkTm90TmFtZT8oaS5maW5kLklEPWZ1bmN0aW9uKGUsdCl7aWYodHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQhPT1BJiYhZCl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbiYmbi5wYXJlbnROb2RlP1tuXTpbXX19LGkuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZShldCx0dCk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSgiaWQiKT09PXR9fSk6KGkuZmluZC5JRD1mdW5jdGlvbihlLG4pe2lmKHR5cGVvZiBuLmdldEVsZW1lbnRCeUlkIT09QSYmIWQpe3ZhciByPW4uZ2V0RWxlbWVudEJ5SWQoZSk7cmV0dXJuIHI/ci5pZD09PWV8fHR5cGVvZiByLmdldEF0dHJpYnV0ZU5vZGUhPT1BJiZyLmdldEF0dHJpYnV0ZU5vZGUoImlkIikudmFsdWU9PT1lP1tyXTp0OltdfX0saS5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKGV0LHR0KTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSE9PUEmJmUuZ2V0QXR0cmlidXRlTm9kZSgiaWQiKTtyZXR1cm4gbiYmbi52YWx1ZT09PXR9fSksaS5maW5kLlRBRz1ULnRhZ05hbWVOb0NvbW1lbnRzP2Z1bmN0aW9uKGUsbil7cmV0dXJuIHR5cGVvZiBuLmdldEVsZW1lbnRzQnlUYWdOYW1lIT09QT9uLmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOnR9OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPTAsbz10LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmKCIqIj09PWUpe3doaWxlKG49b1tpKytdKTE9PT1uLm5vZGVUeXBlJiZyLnB1c2gobik7cmV0dXJuIHJ9cmV0dXJuIG99LGkuZmluZC5OQU1FPVQuZ2V0QnlOYW1lJiZmdW5jdGlvbihlLG4pe3JldHVybiB0eXBlb2Ygbi5nZXRFbGVtZW50c0J5TmFtZSE9PUE/bi5nZXRFbGVtZW50c0J5TmFtZShuYW1lKTp0fSxpLmZpbmQuQ0xBU1M9VC5nZXRCeUNsYXNzTmFtZSYmZnVuY3Rpb24oZSxuKXtyZXR1cm4gdHlwZW9mIG4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZT09PUF8fGQ/dDpuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSl9LGc9W10saD1bIjpmb2N1cyJdLChULnFzYT1ydChuLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGF0KGZ1bmN0aW9uKGUpe2UuaW5uZXJIVE1MPSI8c2VsZWN0PjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+IixlLnF1ZXJ5U2VsZWN0b3JBbGwoIltzZWxlY3RlZF0iKS5sZW5ndGh8fGgucHVzaCgiXFxbIitfKyIqKD86Y2hlY2tlZHxkaXNhYmxlZHxpc21hcHxtdWx0aXBsZXxyZWFkb25seXxzZWxlY3RlZHx2YWx1ZSkiKSxlLnF1ZQ==cnlTZWxlY3RvckFsbCgiOmNoZWNrZWQiKS5sZW5ndGh8fGgucHVzaCgiOmNoZWNrZWQiKX0pLGF0KGZ1bmN0aW9uKGUpe2UuaW5uZXJIVE1MPSI8aW5wdXQgdHlwZT0naGlkZGVuJyBpPScnLz4iLGUucXVlcnlTZWxlY3RvckFsbCgiW2lePScnXSIpLmxlbmd0aCYmaC5wdXNoKCJbKl4kXT0iK18rIiooPzpcIlwifCcnKSIpLGUucXVlcnlTZWxlY3RvckFsbCgiOmVuYWJsZWQiKS5sZW5ndGh8fGgucHVzaCgiOmVuYWJsZWQiLCI6ZGlzYWJsZWQiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIiosOngiKSxoLnB1c2goIiwuKjoiKX0pKSwoVC5tYXRjaGVzU2VsZWN0b3I9cnQobT1mLm1hdGNoZXNTZWxlY3Rvcnx8Zi5tb3pNYXRjaGVzU2VsZWN0b3J8fGYud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxmLm9NYXRjaGVzU2VsZWN0b3J8fGYubXNNYXRjaGVzU2VsZWN0b3IpKSYmYXQoZnVuY3Rpb24oZSl7VC5kaXNjb25uZWN0ZWRNYXRjaD1tLmNhbGwoZSwiZGl2IiksbS5jYWxsKGUsIltzIT0nJ106eCIpLGcucHVzaCgiIT0iLFIpfSksaD1SZWdFeHAoaC5qb2luKCJ8IikpLGc9UmVnRXhwKGcuam9pbigifCIpKSx5PXJ0KGYuY29udGFpbnMpfHxmLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uP2Z1bmN0aW9uKGUsdCl7dmFyIG49OT09PWUubm9kZVR5cGU/ZS5kb2N1bWVudEVsZW1lbnQ6ZSxyPXQmJnQucGFyZW50Tm9kZTtyZXR1cm4gZT09PXJ8fCEoIXJ8fDEhPT1yLm5vZGVUeXBlfHwhKG4uY29udGFpbnM/bi5jb250YWlucyhyKTplLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHIpKSl9OmZ1bmN0aW9uKGUsdCl7aWYodCl3aGlsZSh0PXQucGFyZW50Tm9kZSlpZih0PT09ZSlyZXR1cm4hMDtyZXR1cm4hMX0sdj1mLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uP2Z1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIGU9PT10Pyh1PSEwLDApOihyPXQuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCkpPzEmcnx8ZS5wYXJlbnROb2RlJiYxMT09PWUucGFyZW50Tm9kZS5ub2RlVHlwZT9lPT09bnx8eSh3LGUpPy0xOnQ9PT1ufHx5KHcsdCk/MTowOjQmcj8tMToxOmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24/LTE6MX06ZnVuY3Rpb24oZSx0KXt2YXIgcixpPTAsbz1lLnBhcmVudE5vZGUsYT10LnBhcmVudE5vZGUscz1bZV0sbD1bdF07aWYoZT09PXQpcmV0dXJuIHU9ITAsMDtpZighb3x8IWEpcmV0dXJuIGU9PT1uPy0xOnQ9PT1uPzE6bz8tMTphPzE6MDtpZihvPT09YSlyZXR1cm4gdXQoZSx0KTtyPWU7d2hpbGUocj1yLnBhcmVudE5vZGUpcy51bnNoaWZ0KHIpO3I9dDt3aGlsZShyPXIucGFyZW50Tm9kZSlsLnVuc2hpZnQocik7d2hpbGUoc1tpXT09PWxbaV0paSsrO3JldHVybiBpP3V0KHNbaV0sbFtpXSk6c1tpXT09PXc/LTE6bFtpXT09PXc/MTowfSx1PSExLFswLDBdLnNvcnQodiksVC5kZXRlY3REdXBsaWNhdGVzPXUscCk6cH0sc3QubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBzdChlLG51bGwsbnVsbCx0KX0sc3QubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUsdCl7aWYoKGUub3duZXJEb2N1bWVudHx8ZSkhPT1wJiZjKGUpLHQ9dC5yZXBsYWNlKFosIj0nJDEnXSIpLCEoIVQubWF0Y2hlc1NlbGVjdG9yfHxkfHxnJiZnLnRlc3QodCl8fGgudGVzdCh0KSkpdHJ5e3ZhciBuPW0uY2FsbChlLHQpO2lmKG58fFQuZGlzY29ubmVjdGVkTWF0Y2h8fGUuZG9jdW1lbnQmJjExIT09ZS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gbn1jYXRjaChyKXt9cmV0dXJuIHN0KHQscCxudWxsLFtlXSkubGVuZ3RoPjB9LHN0LmNvbnRhaW5zPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKGUub3duZXJEb2N1bWVudHx8ZSkhPT1wJiZjKGUpLHkoZSx0KX0sc3QuYXR0cj1mdW5jdGlvbihlLHQpe3ZhciBuO3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT09cCYmYyhlKSxkfHwodD10LnRvTG93ZXJDYXNlKCkpLChuPWkuYXR0ckhhbmRsZVt0XSk/bihlKTpkfHxULmF0dHJpYnV0ZXM/ZS5nZXRBdHRyaWJ1dGUodCk6KChuPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSl8fGUuZ2V0QXR0cmlidXRlKHQpKSYmZVt0XT09PSEwP3Q6biYmbi5zcGVjaWZpZWQ/bi52YWx1ZTpudWxsfSxzdC5lcnJvcj1mdW5jdGlvbihlKXt0aHJvdyBFcnJvcigiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIitlKX0sc3QudW5pcXVlU29ydD1mdW5jdGlvbihlKXt2YXIgdCxuPVtdLHI9MSxpPTA7aWYodT0hVC5kZXRlY3REdXBsaWNhdGVzLGUuc29ydCh2KSx1KXtmb3IoO3Q9ZVtyXTtyKyspdD09PWVbci0xXSYmKGk9bi5wdXNoKHIpKTt3aGlsZShpLS0pZS5zcGxpY2UobltpXSwxKX1yZXR1cm4gZX07ZnVuY3Rpb24gdXQoZSx0KXt2YXIgbj10JiZlLHI9biYmKH50LnNvdXJjZUluZGV4fHxqKS0ofmUuc291cmNlSW5kZXh8fGopO2lmKHIpcmV0dXJuIHI7aWYobil3aGlsZShuPW4ubmV4dFNpYmxpbmcpaWYobj09PXQpcmV0dXJuLTE7cmV0dXJuIGU/MTotMX1mdW5jdGlvbiBsdChlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIG49dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT1uJiZ0LnR5cGU9PT1lfX1mdW5jdGlvbiBjdChlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIG49dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybigiaW5wdXQiPT09bnx8ImJ1dHRvbiI9PT1uKSYmdC50eXBlPT09ZX19ZnVuY3Rpb24gcHQoZSl7cmV0dXJuIG90KGZ1bmN0aW9uKHQpe3JldHVybiB0PSt0LG90KGZ1bmN0aW9uKG4scil7dmFyIGksbz1lKFtdLG4ubGVuZ3RoLHQpLGE9by5sZW5ndGg7d2hpbGUoYS0tKW5baT1vW2FdXSYmKG5baV09IShyW2ldPW5baV0pKX0pfSl9bz1zdC5nZXRUZXh0PWZ1bmN0aW9uKGUpe3ZhciB0LG49IiIscj0wLGk9ZS5ub2RlVHlwZTtpZihpKXtpZigxPT09aXx8OT09PWl8fDExPT09aSl7aWYoInN0cmluZyI9PXR5cGVvZiBlLnRleHRDb250ZW50KXJldHVybiBlLnRleHRDb250ZW50O2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZyluKz1vKGUpfWVsc2UgaWYoMz09PWl8fDQ9PT1pKXJldHVybiBlLm5vZGVWYWx1ZX1lbHNlIGZvcig7dD1lW3JdO3IrKyluKz1vKHQpO3JldHVybiBufSxpPXN0LnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOm90LG1hdGNoOlUsZmluZDp7fSxyZWxhdGl2ZTp7Ij4iOntkaXI6InBhcmVudE5vZGUiLGZpcnN0OiEwfSwiICI6e2RpcjoicGFyZW50Tm9kZSJ9LCIrIjp7ZGlyOiJwcmV2aW91c1NpYmxpbmciLGZpcnN0OiEwfSwifiI6e2RpcjoicHJldmlvdXNTaWJsaW5nIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UoZXQsdHQpLGVbM109KGVbNF18fGVbNV18fCIiKS5yZXBsYWNlKGV0LHR0KSwifj0iPT09ZVsyXSYmKGVbM109IiAiK2VbM10rIiAiKSxlLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0udG9Mb3dlckNhc2UoKSwibnRoIj09PWVbMV0uc2xpY2UoMCwzKT8oZVszXXx8c3QuZXJyb3IoZVswXSksZVs0XT0rKGVbNF0/ZVs1XSsoZVs2XXx8MSk6MiooImV2ZW4iPT09ZVszXXx8Im9kZCI9PT1lWzNdKSksZVs1XT0rKGVbN10rZVs4XXx8Im9kZCI9PT1lWzNdKSk6ZVszXSYmc3QuZXJyb3IoZVswXSksZX0sUFNFVURPOmZ1bmN0aW9uKGUpe3ZhciB0LG49IWVbNV0mJmVbMl07cmV0dXJuIFUuQ0hJTEQudGVzdChlWzBdKT9udWxsOihlWzRdP2VbMl09ZVs0XTpuJiZ6LnRlc3QobikmJih0PWZ0KG4sITApKSYmKHQ9bi5pbmRleE9mKCIpIixuLmxlbmd0aC10KS1uLmxlbmd0aCkmJihlWzBdPWVbMF0uc2xpY2UoMCx0KSxlWzJdPW4uc2xpY2UoMCx0KSksZS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGUpe3JldHVybiIqIj09PWU/ZnVuY3Rpb24oKXtyZXR1cm4hMH06KGU9ZS5yZXBsYWNlKGV0LHR0KS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5vZGVOYW1lJiZ0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1lfSl9LENMQVNTOmZ1bmN0aW9uKGUpe3ZhciB0PWtbZSsiIA==Il07cmV0dXJuIHR8fCh0PVJlZ0V4cCgiKF58IitfKyIpIitlKyIoIitfKyJ8JCkiKSkmJmsoZSxmdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0KGUuY2xhc3NOYW1lfHx0eXBlb2YgZS5nZXRBdHRyaWJ1dGUhPT1BJiZlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpfSl9LEFUVFI6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBmdW5jdGlvbihyKXt2YXIgaT1zdC5hdHRyKHIsZSk7cmV0dXJuIG51bGw9PWk/IiE9Ij09PXQ6dD8oaSs9IiIsIj0iPT09dD9pPT09bjoiIT0iPT09dD9pIT09bjoiXj0iPT09dD9uJiYwPT09aS5pbmRleE9mKG4pOiIqPSI9PT10P24mJmkuaW5kZXhPZihuKT4tMToiJD0iPT09dD9uJiZpLnNsaWNlKC1uLmxlbmd0aCk9PT1uOiJ+PSI9PT10PygiICIraSsiICIpLmluZGV4T2Yobik+LTE6Inw9Ij09PXQ/aT09PW58fGkuc2xpY2UoMCxuLmxlbmd0aCsxKT09PW4rIi0iOiExKTohMH19LENISUxEOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG89Im50aCIhPT1lLnNsaWNlKDAsMyksYT0ibGFzdCIhPT1lLnNsaWNlKC00KSxzPSJvZi10eXBlIj09PXQ7cmV0dXJuIDE9PT1yJiYwPT09aT9mdW5jdGlvbihlKXtyZXR1cm4hIWUucGFyZW50Tm9kZX06ZnVuY3Rpb24odCxuLHUpe3ZhciBsLGMscCxmLGQsaCxnPW8hPT1hPyJuZXh0U2libGluZyI6InByZXZpb3VzU2libGluZyIsbT10LnBhcmVudE5vZGUseT1zJiZ0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksdj0hdSYmIXM7aWYobSl7aWYobyl7d2hpbGUoZyl7cD10O3doaWxlKHA9cFtnXSlpZihzP3Aubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXk6MT09PXAubm9kZVR5cGUpcmV0dXJuITE7aD1nPSJvbmx5Ij09PWUmJiFoJiYibmV4dFNpYmxpbmcifXJldHVybiEwfWlmKGg9W2E/bS5maXJzdENoaWxkOm0ubGFzdENoaWxkXSxhJiZ2KXtjPW1beF18fChtW3hdPXt9KSxsPWNbZV18fFtdLGQ9bFswXT09PU4mJmxbMV0sZj1sWzBdPT09TiYmbFsyXSxwPWQmJm0uY2hpbGROb2Rlc1tkXTt3aGlsZShwPSsrZCYmcCYmcFtnXXx8KGY9ZD0wKXx8aC5wb3AoKSlpZigxPT09cC5ub2RlVHlwZSYmKytmJiZwPT09dCl7Y1tlXT1bTixkLGZdO2JyZWFrfX1lbHNlIGlmKHYmJihsPSh0W3hdfHwodFt4XT17fSkpW2VdKSYmbFswXT09PU4pZj1sWzFdO2Vsc2Ugd2hpbGUocD0rK2QmJnAmJnBbZ118fChmPWQ9MCl8fGgucG9wKCkpaWYoKHM/cC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09eToxPT09cC5ub2RlVHlwZSkmJisrZiYmKHYmJigocFt4XXx8KHBbeF09e30pKVtlXT1bTixmXSkscD09PXQpKWJyZWFrO3JldHVybiBmLT1pLGY9PT1yfHwwPT09ZiVyJiZmL3I+PTB9fX0sUFNFVURPOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1pLnBzZXVkb3NbZV18fGkuc2V0RmlsdGVyc1tlLnRvTG93ZXJDYXNlKCldfHxzdC5lcnJvcigidW5zdXBwb3J0ZWQgcHNldWRvOiAiK2UpO3JldHVybiByW3hdP3IodCk6ci5sZW5ndGg+MT8obj1bZSxlLCIiLHRdLGkuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShlLnRvTG93ZXJDYXNlKCkpP290KGZ1bmN0aW9uKGUsbil7dmFyIGksbz1yKGUsdCksYT1vLmxlbmd0aDt3aGlsZShhLS0paT1NLmNhbGwoZSxvW2FdKSxlW2ldPSEobltpXT1vW2FdKX0pOmZ1bmN0aW9uKGUpe3JldHVybiByKGUsMCxuKX0pOnJ9fSxwc2V1ZG9zOntub3Q6b3QoZnVuY3Rpb24oZSl7dmFyIHQ9W10sbj1bXSxyPXMoZS5yZXBsYWNlKFcsIiQxIikpO3JldHVybiByW3hdP290KGZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBvLGE9cihlLG51bGwsaSxbXSkscz1lLmxlbmd0aDt3aGlsZShzLS0pKG89YVtzXSkmJihlW3NdPSEodFtzXT1vKSl9KTpmdW5jdGlvbihlLGksbyl7cmV0dXJuIHRbMF09ZSxyKHQsbnVsbCxvLG4pLCFuLnBvcCgpfX0pLGhhczpvdChmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIHN0KGUsdCkubGVuZ3RoPjB9fSksY29udGFpbnM6b3QoZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybih0LnRleHRDb250ZW50fHx0LmlubmVyVGV4dHx8byh0KSkuaW5kZXhPZihlKT4tMX19KSxsYW5nOm90KGZ1bmN0aW9uKGUpe3JldHVybiBYLnRlc3QoZXx8IiIpfHxzdC5lcnJvcigidW5zdXBwb3J0ZWQgbGFuZzogIitlKSxlPWUucmVwbGFjZShldCx0dCkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbih0KXt2YXIgbjtkbyBpZihuPWQ/dC5nZXRBdHRyaWJ1dGUoInhtbDpsYW5nIil8fHQuZ2V0QXR0cmlidXRlKCJsYW5nIik6dC5sYW5nKXJldHVybiBuPW4udG9Mb3dlckNhc2UoKSxuPT09ZXx8MD09PW4uaW5kZXhPZihlKyItIik7d2hpbGUoKHQ9dC5wYXJlbnROb2RlKSYmMT09PXQubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbih0KXt2YXIgbj1lLmxvY2F0aW9uJiZlLmxvY2F0aW9uLmhhc2g7cmV0dXJuIG4mJm4uc2xpY2UoMSk9PT10LmlkfSxyb290OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09Zn0sZm9jdXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1wLmFjdGl2ZUVsZW1lbnQmJighcC5oYXNGb2N1c3x8cC5oYXNGb2N1cygpKSYmISEoZS50eXBlfHxlLmhyZWZ8fH5lLnRhYkluZGV4KX0sZW5hYmxlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNhYmxlZD09PSExfSxkaXNhYmxlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNhYmxlZD09PSEwfSxjaGVja2VkOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4iaW5wdXQiPT09dCYmISFlLmNoZWNrZWR8fCJvcHRpb24iPT09dCYmISFlLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxlLnNlbGVjdGVkPT09ITB9LGVtcHR5OmZ1bmN0aW9uKGUpe2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZylpZihlLm5vZGVOYW1lPiJAInx8Mz09PWUubm9kZVR5cGV8fDQ9PT1lLm5vZGVUeXBlKXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIWkucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiBRLnRlc3QoZS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGUpe3JldHVybiBHLnRlc3QoZS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuImlucHV0Ij09PXQmJiJidXR0b24iPT09ZS50eXBlfHwiYnV0dG9uIj09PXR9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuImlucHV0Ij09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmInRleHQiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoInR5cGUiKSl8fHQudG9Mb3dlckNhc2UoKT09PWUudHlwZSl9LGZpcnN0OnB0KGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDpwdChmdW5jdGlvbihlLHQpe3JldHVyblt0LTFdfSksZXE6cHQoZnVuY3Rpb24oZSx0LG4pe3JldHVyblswPm4/bit0Om5dfSksZXZlbjpwdChmdW5jdGlvbihlLHQpe3ZhciBuPTA7Zm9yKDt0Pm47bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxvZGQ6cHQoZnVuY3Rpb24oZSx0KXt2YXIgbj0xO2Zvcig7dD5uO24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksbHQ6cHQoZnVuY3Rpb24oZSx0LG4pe3ZhciByPTA+bj9uK3Q6bjtmb3IoOy0tcj49MDspZS5wdXNoKHIpO3JldHVybiBlfSksZ3Q6cHQoZnVuY3Rpb24oZSx0LG4pe3ZhciByPTA+bj9uK3Q6bjtmb3IoO3Q+KytyOyllLnB1c2gocik7cmV0dXJuIGV9KX19O2ZvcihuIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWkucHNldWRvc1tuXT1sdChuKTtmb3IobiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWkucHNldWRvc1tuXT1jdChuKTtmdW5jdGlvbiBmdChlLHQpe3ZhciBuLHIsbyxhLHMsdSxsLGM9RVtlKyIgIl07aWYoYylyZXR1cm4gdD8wOmMuc2xpY2UoMCk7cz1lLHU9W10sbD1pLnByZUZpbHRlcjt3aGlsZShzKXsoIW58fChyPSQuZXhlYyhzKSkpJiYociYmKHM9cy5zbGljZShyWzBdLmxlbmd0aCl8fHMpLHUucHVzaChvPVtdKSksbj0hMSwocj1JLmV4ZWMocykpJiYobj1yLnNoaWZ0KCksby5wdXNoKHt2YWx1ZTpuLHR5cGU6clswXS5yZXBsYWNlKA==VywiICIpfSkscz1zLnNsaWNlKG4ubGVuZ3RoKSk7Zm9yKGEgaW4gaS5maWx0ZXIpIShyPVVbYV0uZXhlYyhzKSl8fGxbYV0mJiEocj1sW2FdKHIpKXx8KG49ci5zaGlmdCgpLG8ucHVzaCh7dmFsdWU6bix0eXBlOmEsbWF0Y2hlczpyfSkscz1zLnNsaWNlKG4ubGVuZ3RoKSk7aWYoIW4pYnJlYWt9cmV0dXJuIHQ/cy5sZW5ndGg6cz9zdC5lcnJvcihlKTpFKGUsdSkuc2xpY2UoMCl9ZnVuY3Rpb24gZHQoZSl7dmFyIHQ9MCxuPWUubGVuZ3RoLHI9IiI7Zm9yKDtuPnQ7dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gaHQoZSx0LG4pe3ZhciBpPXQuZGlyLG89biYmInBhcmVudE5vZGUiPT09aSxhPUMrKztyZXR1cm4gdC5maXJzdD9mdW5jdGlvbih0LG4scil7d2hpbGUodD10W2ldKWlmKDE9PT10Lm5vZGVUeXBlfHxvKXJldHVybiBlKHQsbixyKX06ZnVuY3Rpb24odCxuLHMpe3ZhciB1LGwsYyxwPU4rIiAiK2E7aWYocyl7d2hpbGUodD10W2ldKWlmKCgxPT09dC5ub2RlVHlwZXx8bykmJmUodCxuLHMpKXJldHVybiEwfWVsc2Ugd2hpbGUodD10W2ldKWlmKDE9PT10Lm5vZGVUeXBlfHxvKWlmKGM9dFt4XXx8KHRbeF09e30pLChsPWNbaV0pJiZsWzBdPT09cCl7aWYoKHU9bFsxXSk9PT0hMHx8dT09PXIpcmV0dXJuIHU9PT0hMH1lbHNlIGlmKGw9Y1tpXT1bcF0sbFsxXT1lKHQsbixzKXx8cixsWzFdPT09ITApcmV0dXJuITB9fWZ1bmN0aW9uIGd0KGUpe3JldHVybiBlLmxlbmd0aD4xP2Z1bmN0aW9uKHQsbixyKXt2YXIgaT1lLmxlbmd0aDt3aGlsZShpLS0paWYoIWVbaV0odCxuLHIpKXJldHVybiExO3JldHVybiEwfTplWzBdfWZ1bmN0aW9uIG10KGUsdCxuLHIsaSl7dmFyIG8sYT1bXSxzPTAsdT1lLmxlbmd0aCxsPW51bGwhPXQ7Zm9yKDt1PnM7cysrKShvPWVbc10pJiYoIW58fG4obyxyLGkpKSYmKGEucHVzaChvKSxsJiZ0LnB1c2gocykpO3JldHVybiBhfWZ1bmN0aW9uIHl0KGUsdCxuLHIsaSxvKXtyZXR1cm4gciYmIXJbeF0mJihyPXl0KHIpKSxpJiYhaVt4XSYmKGk9eXQoaSxvKSksb3QoZnVuY3Rpb24obyxhLHMsdSl7dmFyIGwsYyxwLGY9W10sZD1bXSxoPWEubGVuZ3RoLGc9b3x8eHQodHx8IioiLHMubm9kZVR5cGU/W3NdOnMsW10pLG09IWV8fCFvJiZ0P2c6bXQoZyxmLGUscyx1KSx5PW4/aXx8KG8/ZTpofHxyKT9bXTphOm07aWYobiYmbihtLHkscyx1KSxyKXtsPW10KHksZCkscihsLFtdLHMsdSksYz1sLmxlbmd0aDt3aGlsZShjLS0pKHA9bFtjXSkmJih5W2RbY11dPSEobVtkW2NdXT1wKSl9aWYobyl7aWYoaXx8ZSl7aWYoaSl7bD1bXSxjPXkubGVuZ3RoO3doaWxlKGMtLSkocD15W2NdKSYmbC5wdXNoKG1bY109cCk7aShudWxsLHk9W10sbCx1KX1jPXkubGVuZ3RoO3doaWxlKGMtLSkocD15W2NdKSYmKGw9aT9NLmNhbGwobyxwKTpmW2NdKT4tMSYmKG9bbF09IShhW2xdPXApKX19ZWxzZSB5PW10KHk9PT1hP3kuc3BsaWNlKGgseS5sZW5ndGgpOnkpLGk/aShudWxsLGEseSx1KTpILmFwcGx5KGEseSl9KX1mdW5jdGlvbiB2dChlKXt2YXIgdCxuLHIsbz1lLmxlbmd0aCxhPWkucmVsYXRpdmVbZVswXS50eXBlXSxzPWF8fGkucmVsYXRpdmVbIiAiXSx1PWE/MTowLGM9aHQoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fSxzLCEwKSxwPWh0KGZ1bmN0aW9uKGUpe3JldHVybiBNLmNhbGwodCxlKT4tMX0scywhMCksZj1bZnVuY3Rpb24oZSxuLHIpe3JldHVybiFhJiYocnx8biE9PWwpfHwoKHQ9bikubm9kZVR5cGU/YyhlLG4scik6cChlLG4scikpfV07Zm9yKDtvPnU7dSsrKWlmKG49aS5yZWxhdGl2ZVtlW3VdLnR5cGVdKWY9W2h0KGd0KGYpLG4pXTtlbHNle2lmKG49aS5maWx0ZXJbZVt1XS50eXBlXS5hcHBseShudWxsLGVbdV0ubWF0Y2hlcyksblt4XSl7Zm9yKHI9Kyt1O28+cjtyKyspaWYoaS5yZWxhdGl2ZVtlW3JdLnR5cGVdKWJyZWFrO3JldHVybiB5dCh1PjEmJmd0KGYpLHU+MSYmZHQoZS5zbGljZSgwLHUtMSkpLnJlcGxhY2UoVywiJDEiKSxuLHI+dSYmdnQoZS5zbGljZSh1LHIpKSxvPnImJnZ0KGU9ZS5zbGljZShyKSksbz5yJiZkdChlKSl9Zi5wdXNoKG4pfXJldHVybiBndChmKX1mdW5jdGlvbiBidChlLHQpe3ZhciBuPTAsbz10Lmxlbmd0aD4wLGE9ZS5sZW5ndGg+MCxzPWZ1bmN0aW9uKHMsdSxjLGYsZCl7dmFyIGgsZyxtLHk9W10sdj0wLGI9IjAiLHg9cyYmW10sdz1udWxsIT1kLFQ9bCxDPXN8fGEmJmkuZmluZC5UQUcoIioiLGQmJnUucGFyZW50Tm9kZXx8dSksaz1OKz1udWxsPT1UPzE6TWF0aC5yYW5kb20oKXx8LjE7Zm9yKHcmJihsPXUhPT1wJiZ1LHI9bik7bnVsbCE9KGg9Q1tiXSk7YisrKXtpZihhJiZoKXtnPTA7d2hpbGUobT1lW2crK10paWYobShoLHUsYykpe2YucHVzaChoKTticmVha313JiYoTj1rLHI9KytuKX1vJiYoKGg9IW0mJmgpJiZ2LS0scyYmeC5wdXNoKGgpKX1pZih2Kz1iLG8mJmIhPT12KXtnPTA7d2hpbGUobT10W2crK10pbSh4LHksdSxjKTtpZihzKXtpZih2PjApd2hpbGUoYi0tKXhbYl18fHlbYl18fCh5W2JdPUwuY2FsbChmKSk7eT1tdCh5KX1ILmFwcGx5KGYseSksdyYmIXMmJnkubGVuZ3RoPjAmJnYrdC5sZW5ndGg+MSYmc3QudW5pcXVlU29ydChmKX1yZXR1cm4gdyYmKE49ayxsPVQpLHh9O3JldHVybiBvP290KHMpOnN9cz1zdC5jb21waWxlPWZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPVtdLG89U1tlKyIgIl07aWYoIW8pe3R8fCh0PWZ0KGUpKSxuPXQubGVuZ3RoO3doaWxlKG4tLSlvPXZ0KHRbbl0pLG9beF0/ci5wdXNoKG8pOmkucHVzaChvKTtvPVMoZSxidChpLHIpKX1yZXR1cm4gb307ZnVuY3Rpb24geHQoZSx0LG4pe3ZhciByPTAsaT10Lmxlbmd0aDtmb3IoO2k+cjtyKyspc3QoZSx0W3JdLG4pO3JldHVybiBufWZ1bmN0aW9uIHd0KGUsdCxuLHIpe3ZhciBvLGEsdSxsLGMscD1mdChlKTtpZighciYmMT09PXAubGVuZ3RoKXtpZihhPXBbMF09cFswXS5zbGljZSgwKSxhLmxlbmd0aD4yJiYiSUQiPT09KHU9YVswXSkudHlwZSYmOT09PXQubm9kZVR5cGUmJiFkJiZpLnJlbGF0aXZlW2FbMV0udHlwZV0pe2lmKHQ9aS5maW5kLklEKHUubWF0Y2hlc1swXS5yZXBsYWNlKGV0LHR0KSx0KVswXSwhdClyZXR1cm4gbjtlPWUuc2xpY2UoYS5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9bz1VLm5lZWRzQ29udGV4dC50ZXN0KGUpPzA6YS5sZW5ndGg7d2hpbGUoby0tKXtpZih1PWFbb10saS5yZWxhdGl2ZVtsPXUudHlwZV0pYnJlYWs7aWYoKGM9aS5maW5kW2xdKSYmKHI9Yyh1Lm1hdGNoZXNbMF0ucmVwbGFjZShldCx0dCksVi50ZXN0KGFbMF0udHlwZSkmJnQucGFyZW50Tm9kZXx8dCkpKXtpZihhLnNwbGljZShvLDEpLGU9ci5sZW5ndGgmJmR0KGEpLCFlKXJldHVybiBILmFwcGx5KG4scS5jYWxsKHIsMCkpLG47YnJlYWt9fX1yZXR1cm4gcyhlLHApKHIsdCxkLG4sVi50ZXN0KGUpKSxufWkucHNldWRvcy5udGg9aS5wc2V1ZG9zLmVxO2Z1bmN0aW9uIFR0KCl7fWkuZmlsdGVycz1UdC5wcm90b3R5cGU9aS5wc2V1ZG9zLGkuc2V0RmlsdGVycz1uZXcgVHQsYygpLHN0LmF0dHI9Yi5hdHRyLGIuZmluZD1zdCxiLmV4cHI9c3Quc2VsZWN0b3JzLGIuZXhwclsiOiJdPWIuZXhwci5wc2V1ZG9zLGIudW5pcXVlPXN0LnVuaXF1ZVNvcnQsYi50ZXh0PXN0LmdldFRleHQsYi5pc1hNTERvYz1zdC5pc1hNTCxiLmNvbnRhaW5zPXN0LmNvbnRhaW5zfShlKTt2YXIgYXQ9L1VudGlsJC8sc3Q9L14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sdXQ9L14uW146I1xbXC4sXSokLyxsdD1iLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LGN0PXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O2IuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpPXRoaXMubGVuZ3RoO2lmKCJzdHJpbmciIT10eXBlb2YgZSlyZXR1cm4gcj10aGlzLHRoaXMucHVzaFN0YWNrKGIoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDtpPnQ7dCsrKWlmKGIuY29udGFpbnMoclt0XSx0aGlzKSlyZXR1cm4hMH0pKTtmb3Iobj1bXSx0PTA7aT50O3QrKyliLmZpbmQoZSx0aGlzW3RdLG4pO3JldHVybiBuPXRoaXMucHVzaFN0YWNrKGk+MT9iLnVuaXF1ZShuKTpuKSxuLnNlbGVjdG9yPSh0aGlzLnNlbGVjdG9yP3RoaXMuc2VsZWN0b3IrIg==ICI6IiIpK2Usbn0saGFzOmZ1bmN0aW9uKGUpe3ZhciB0LG49YihlLHRoaXMpLHI9bi5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDtyPnQ7dCsrKWlmKGIuY29udGFpbnModGhpcyxuW3RdKSlyZXR1cm4hMH0pfSxub3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGZ0KHRoaXMsZSwhMSkpfSxmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGZ0KHRoaXMsZSwhMCkpfSxpczpmdW5jdGlvbihlKXtyZXR1cm4hIWUmJigic3RyaW5nIj09dHlwZW9mIGU/bHQudGVzdChlKT9iKGUsdGhpcy5jb250ZXh0KS5pbmRleCh0aGlzWzBdKT49MDpiLmZpbHRlcihlLHRoaXMpLmxlbmd0aD4wOnRoaXMuZmlsdGVyKGUpLmxlbmd0aD4wKX0sY2xvc2VzdDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MCxpPXRoaXMubGVuZ3RoLG89W10sYT1sdC50ZXN0KGUpfHwic3RyaW5nIiE9dHlwZW9mIGU/YihlLHR8fHRoaXMuY29udGV4dCk6MDtmb3IoO2k+cjtyKyspe249dGhpc1tyXTt3aGlsZShuJiZuLm93bmVyRG9jdW1lbnQmJm4hPT10JiYxMSE9PW4ubm9kZVR5cGUpe2lmKGE/YS5pbmRleChuKT4tMTpiLmZpbmQubWF0Y2hlc1NlbGVjdG9yKG4sZSkpe28ucHVzaChuKTticmVha31uPW4ucGFyZW50Tm9kZX19cmV0dXJuIHRoaXMucHVzaFN0YWNrKG8ubGVuZ3RoPjE/Yi51bmlxdWUobyk6byl9LGluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiBlPyJzdHJpbmciPT10eXBlb2YgZT9iLmluQXJyYXkodGhpc1swXSxiKGUpKTpiLmluQXJyYXkoZS5qcXVlcnk/ZVswXTplLHRoaXMpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGUsdCl7dmFyIG49InN0cmluZyI9PXR5cGVvZiBlP2IoZSx0KTpiLm1ha2VBcnJheShlJiZlLm5vZGVUeXBlP1tlXTplKSxyPWIubWVyZ2UodGhpcy5nZXQoKSxuKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soYi51bmlxdWUocikpfSxhZGRCYWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmFkZChudWxsPT1lP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGUpKX19KSxiLmZuLmFuZFNlbGY9Yi5mbi5hZGRCYWNrO2Z1bmN0aW9uIHB0KGUsdCl7ZG8gZT1lW3RdO3doaWxlKGUmJjEhPT1lLm5vZGVUeXBlKTtyZXR1cm4gZX1iLmVhY2goe3BhcmVudDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7cmV0dXJuIHQmJjExIT09dC5ub2RlVHlwZT90Om51bGx9LHBhcmVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuIGIuZGlyKGUsInBhcmVudE5vZGUiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYi5kaXIoZSwicGFyZW50Tm9kZSIsbil9LG5leHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIHB0KGUsIm5leHRTaWJsaW5nIil9LHByZXY6ZnVuY3Rpb24oZSl7cmV0dXJuIHB0KGUsInByZXZpb3VzU2libGluZyIpfSxuZXh0QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBiLmRpcihlLCJuZXh0U2libGluZyIpfSxwcmV2QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBiLmRpcihlLCJwcmV2aW91c1NpYmxpbmciKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYi5kaXIoZSwibmV4dFNpYmxpbmciLG4pfSxwcmV2VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBiLmRpcihlLCJwcmV2aW91c1NpYmxpbmciLG4pfSxzaWJsaW5nczpmdW5jdGlvbihlKXtyZXR1cm4gYi5zaWJsaW5nKChlLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGUpfSxjaGlsZHJlbjpmdW5jdGlvbihlKXtyZXR1cm4gYi5zaWJsaW5nKGUuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBiLm5vZGVOYW1lKGUsImlmcmFtZSIpP2UuY29udGVudERvY3VtZW50fHxlLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ6Yi5tZXJnZShbXSxlLmNoaWxkTm9kZXMpfX0sZnVuY3Rpb24oZSx0KXtiLmZuW2VdPWZ1bmN0aW9uKG4scil7dmFyIGk9Yi5tYXAodGhpcyx0LG4pO3JldHVybiBhdC50ZXN0KGUpfHwocj1uKSxyJiYic3RyaW5nIj09dHlwZW9mIHImJihpPWIuZmlsdGVyKHIsaSkpLGk9dGhpcy5sZW5ndGg+MSYmIWN0W2VdP2IudW5pcXVlKGkpOmksdGhpcy5sZW5ndGg+MSYmc3QudGVzdChlKSYmKGk9aS5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKGkpfX0pLGIuZXh0ZW5kKHtmaWx0ZXI6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBuJiYoZT0iOm5vdCgiK2UrIikiKSwxPT09dC5sZW5ndGg/Yi5maW5kLm1hdGNoZXNTZWxlY3Rvcih0WzBdLGUpP1t0WzBdXTpbXTpiLmZpbmQubWF0Y2hlcyhlLHQpfSxkaXI6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpPVtdLG89ZVtuXTt3aGlsZShvJiY5IT09by5ub2RlVHlwZSYmKHI9PT10fHwxIT09by5ub2RlVHlwZXx8IWIobykuaXMocikpKTE9PT1vLm5vZGVUeXBlJiZpLnB1c2gobyksbz1vW25dO3JldHVybiBpfSxzaWJsaW5nOmZ1bmN0aW9uKGUsdCl7dmFyIG49W107Zm9yKDtlO2U9ZS5uZXh0U2libGluZykxPT09ZS5ub2RlVHlwZSYmZSE9PXQmJm4ucHVzaChlKTtyZXR1cm4gbn19KTtmdW5jdGlvbiBmdChlLHQsbil7aWYodD10fHwwLGIuaXNGdW5jdGlvbih0KSlyZXR1cm4gYi5ncmVwKGUsZnVuY3Rpb24oZSxyKXt2YXIgaT0hIXQuY2FsbChlLHIsZSk7cmV0dXJuIGk9PT1ufSk7aWYodC5ub2RlVHlwZSlyZXR1cm4gYi5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10PT09bn0pO2lmKCJzdHJpbmciPT10eXBlb2YgdCl7dmFyIHI9Yi5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfSk7aWYodXQudGVzdCh0KSlyZXR1cm4gYi5maWx0ZXIodCxyLCFuKTt0PWIuZmlsdGVyKHQscil9cmV0dXJuIGIuZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiBiLmluQXJyYXkoZSx0KT49MD09PW59KX1mdW5jdGlvbiBkdChlKXt2YXIgdD1odC5zcGxpdCgifCIpLG49ZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7aWYobi5jcmVhdGVFbGVtZW50KXdoaWxlKHQubGVuZ3RoKW4uY3JlYXRlRWxlbWVudCh0LnBvcCgpKTtyZXR1cm4gbn12YXIgaHQ9ImFiYnJ8YXJ0aWNsZXxhc2lkZXxhdWRpb3xiZGl8Y2FudmFzfGRhdGF8ZGF0YWxpc3R8ZGV0YWlsc3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8aGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW8iLGd0PS8galF1ZXJ5XGQrPSIoPzpudWxsfFxkKykiL2csbXQ9UmVnRXhwKCI8KD86IitodCsiKVtcXHMvPl0iLCJpIikseXQ9L15ccysvLHZ0PS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzpdKylbXj5dKilcLz4vZ2ksYnQ9LzwoW1x3Ol0rKS8seHQ9Lzx0Ym9keS9pLHd0PS88fCYjP1x3KzsvLFR0PS88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksTnQ9L14oPzpjaGVja2JveHxyYWRpbykkL2ksQ3Q9L2NoZWNrZWRccyooPzpbXj1dfD1ccyouY2hlY2tlZC4pL2ksa3Q9L14kfFwvKD86amF2YXxlY21hKXNjcmlwdC9pLEV0PS9edHJ1ZVwvKC4qKS8sU3Q9L15ccyo8ISg/OlxbQ0RBVEFcW3wtLSl8KD86XF1cXXwtLSk+XHMqJC9nLEF0PXtvcHRpb246WzEsIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz4iLCI8L3NlbGVjdD4iXSxsZWdlbmQ6WzEsIjxmaWVsZHNldD4iLCI8L2ZpZWxkc2V0PiJdLGFyZWE6WzEsIjxtYXA+IiwiPC9tYXA+Il0scGFyYW06WzEsIjxvYmplY3Q+IiwiPC9vYmplY3Q+Il0sdGhlYWQ6WzEsIjx0YWJsZT4iLCI8L3RhYmxlPiJdLHRyOlsyLCI8dGFibGU+PHRib2R5PiIsIjwvdGJvZHk+PC90YWJsZT4iXSxjb2w6WzIsIjx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+IiwiPC9jb2xncm91cD48L3RhYmxlPiJdLHRkOlszLCI8dGFibGU+PHRib2R5Pjx0cj4iLCI8L3RyPjwvdGJvZHk+PC90YWJsZT4iXSxfZGVmYXVsdDpiLnN1cHBvcnQuaHRtbFNlcmlhbGl6ZT9bMCwiIiwiIl06WzEsIlg8ZGl2PiIsIjwvZGl2PiJdfSxqdD1kdChvKSxEdD1qdC5hcHBlbmRDaGlsZChvLmNyZWF0ZUVsZW1lbnQoImRpdiIpKTtBdC5vcHRncm91cD1BdC5vcHRpb24sQXQudGJvZHk9QXQudGZvbw==dD1BdC5jb2xncm91cD1BdC5jYXB0aW9uPUF0LnRoZWFkLEF0LnRoPUF0LnRkLGIuZm4uZXh0ZW5kKHt0ZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBiLmFjY2Vzcyh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dD9iLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmFwcGVuZCgodGhpc1swXSYmdGhpc1swXS5vd25lckRvY3VtZW50fHxvKS5jcmVhdGVUZXh0Tm9kZShlKSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0sd3JhcEFsbDpmdW5jdGlvbihlKXtpZihiLmlzRnVuY3Rpb24oZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbih0KXtiKHRoaXMpLndyYXBBbGwoZS5jYWxsKHRoaXMsdCkpfSk7aWYodGhpc1swXSl7dmFyIHQ9YihlLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApO3RoaXNbMF0ucGFyZW50Tm9kZSYmdC5pbnNlcnRCZWZvcmUodGhpc1swXSksdC5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3doaWxlKGUuZmlyc3RDaGlsZCYmMT09PWUuZmlyc3RDaGlsZC5ub2RlVHlwZSllPWUuZmlyc3RDaGlsZDtyZXR1cm4gZX0pLmFwcGVuZCh0aGlzKX1yZXR1cm4gdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKGUpe3JldHVybiBiLmlzRnVuY3Rpb24oZSk/dGhpcy5lYWNoKGZ1bmN0aW9uKHQpe2IodGhpcykud3JhcElubmVyKGUuY2FsbCh0aGlzLHQpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWIodGhpcyksbj10LmNvbnRlbnRzKCk7bi5sZW5ndGg/bi53cmFwQWxsKGUpOnQuYXBwZW5kKGUpfSl9LHdyYXA6ZnVuY3Rpb24oZSl7dmFyIHQ9Yi5pc0Z1bmN0aW9uKGUpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24obil7Yih0aGlzKS53cmFwQWxsKHQ/ZS5jYWxsKHRoaXMsbik6ZSl9KX0sdW53cmFwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe2Iubm9kZU5hbWUodGhpcywiYm9keSIpfHxiKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KS5lbmQoKX0sYXBwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCEwLGZ1bmN0aW9uKGUpeygxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSkmJnRoaXMuYXBwZW5kQ2hpbGQoZSl9KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywhMCxmdW5jdGlvbihlKXsoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpJiZ0aGlzLmluc2VydEJlZm9yZShlLHRoaXMuZmlyc3RDaGlsZCl9KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCExLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCExLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LHJlbW92ZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MDtmb3IoO251bGwhPShuPXRoaXNbcl0pO3IrKykoIWV8fGIuZmlsdGVyKGUsW25dKS5sZW5ndGg+MCkmJih0fHwxIT09bi5ub2RlVHlwZXx8Yi5jbGVhbkRhdGEoT3QobikpLG4ucGFyZW50Tm9kZSYmKHQmJmIuY29udGFpbnMobi5vd25lckRvY3VtZW50LG4pJiZNdChPdChuLCJzY3JpcHQiKSksbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pKSk7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7dmFyIGUsdD0wO2Zvcig7bnVsbCE9KGU9dGhpc1t0XSk7dCsrKXsxPT09ZS5ub2RlVHlwZSYmYi5jbGVhbkRhdGEoT3QoZSwhMSkpO3doaWxlKGUuZmlyc3RDaGlsZCllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5vcHRpb25zJiZiLm5vZGVOYW1lKGUsInNlbGVjdCIpJiYoZS5vcHRpb25zLmxlbmd0aD0wKX1yZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1udWxsPT1lPyExOmUsdD1udWxsPT10P2U6dCx0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBiLmNsb25lKHRoaXMsZSx0KX0pfSxodG1sOmZ1bmN0aW9uKGUpe3JldHVybiBiLmFjY2Vzcyh0aGlzLGZ1bmN0aW9uKGUpe3ZhciBuPXRoaXNbMF18fHt9LHI9MCxpPXRoaXMubGVuZ3RoO2lmKGU9PT10KXJldHVybiAxPT09bi5ub2RlVHlwZT9uLmlubmVySFRNTC5yZXBsYWNlKGd0LCIiKTp0O2lmKCEoInN0cmluZyIhPXR5cGVvZiBlfHxUdC50ZXN0KGUpfHwhYi5zdXBwb3J0Lmh0bWxTZXJpYWxpemUmJm10LnRlc3QoZSl8fCFiLnN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UmJnl0LnRlc3QoZSl8fEF0WyhidC5leGVjKGUpfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpXSkpe2U9ZS5yZXBsYWNlKHZ0LCI8JDE+PC8kMj4iKTt0cnl7Zm9yKDtpPnI7cisrKW49dGhpc1tyXXx8e30sMT09PW4ubm9kZVR5cGUmJihiLmNsZWFuRGF0YShPdChuLCExKSksbi5pbm5lckhUTUw9ZSk7bj0wfWNhdGNoKG8pe319biYmdGhpcy5lbXB0eSgpLmFwcGVuZChlKX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbihlKXt2YXIgdD1iLmlzRnVuY3Rpb24oZSk7cmV0dXJuIHR8fCJzdHJpbmciPT10eXBlb2YgZXx8KGU9YihlKS5ub3QodGhpcykuZGV0YWNoKCkpLHRoaXMuZG9tTWFuaXAoW2VdLCEwLGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubmV4dFNpYmxpbmcsbj10aGlzLnBhcmVudE5vZGU7biYmKGIodGhpcykucmVtb3ZlKCksbi5pbnNlcnRCZWZvcmUoZSx0KSl9KX0sZGV0YWNoOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlbW92ZShlLCEwKX0sZG9tTWFuaXA6ZnVuY3Rpb24oZSxuLHIpe2U9Zi5hcHBseShbXSxlKTt2YXIgaSxvLGEscyx1LGwsYz0wLHA9dGhpcy5sZW5ndGgsZD10aGlzLGg9cC0xLGc9ZVswXSxtPWIuaXNGdW5jdGlvbihnKTtpZihtfHwhKDE+PXB8fCJzdHJpbmciIT10eXBlb2YgZ3x8Yi5zdXBwb3J0LmNoZWNrQ2xvbmUpJiZDdC50ZXN0KGcpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSl7dmFyIG89ZC5lcShpKTttJiYoZVswXT1nLmNhbGwodGhpcyxpLG4/by5odG1sKCk6dCkpLG8uZG9tTWFuaXAoZSxuLHIpfSk7aWYocCYmKGw9Yi5idWlsZEZyYWdtZW50KGUsdGhpc1swXS5vd25lckRvY3VtZW50LCExLHRoaXMpLGk9bC5maXJzdENoaWxkLDE9PT1sLmNoaWxkTm9kZXMubGVuZ3RoJiYobD1pKSxpKSl7Zm9yKG49biYmYi5ub2RlTmFtZShpLCJ0ciIpLHM9Yi5tYXAoT3QobCwic2NyaXB0IiksSHQpLGE9cy5sZW5ndGg7cD5jO2MrKylvPWwsYyE9PWgmJihvPWIuY2xvbmUobywhMCwhMCksYSYmYi5tZXJnZShzLE90KG8sInNjcmlwdCIpKSksci5jYWxsKG4mJmIubm9kZU5hbWUodGhpc1tjXSwidGFibGUiKT9MdCh0aGlzW2NdLCJ0Ym9keSIpOnRoaXNbY10sbyxjKTtpZihhKWZvcih1PXNbcy5sZW5ndGgtMV0ub3duZXJEb2N1bWVudCxiLm1hcChzLHF0KSxjPTA7YT5jO2MrKylvPXNbY10sa3QudGVzdChvLnR5cGV8fCIiKSYmIWIuX2RhdGEobywiZ2xvYmFsRXZhbCIpJiZiLmNvbnRhaW5zKHUsbykmJihvLnNyYz9iLmFqYXgoe3VybDpvLnNyYyx0eXBlOiJHRVQiLGRhdGFUeXBlOiJzY3JpcHQiLGFzeW5jOiExLGdsb2JhbDohMSwidGhyb3dzIjohMH0pOmIuZ2xvYmFsRXZhbCgoby50ZXh0fHxvLnRleHRDb250ZW50fHxvLmlubmVySFRNTHx8IiIpLnJlcGxhY2UoU3QsIiIpKSk7bD1pPW51bGx9cmV0dXJuIHRoaXN9fSk7ZnVuY3Rpb24gTHQoZSx0KXtyZXR1cm4gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KVswXXx8ZS5hcHBlbmRDaGlsZChlLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KSl9ZnVuY3Rpb24gSHQoZSl7dmFyIHQ9ZS5nZXRBdHRyaWJ1dGVOb2RlKCJ0eXBlIik7cmV0dXJuIGUudHlwZT0odCYmdC5zcGVjaWZpZWQpKyIvIitlLnR5cGUsZX1mdW5jdGlvbiBxdChlKXt2YXIgdD1FdC5leGVjKGUudHlwZSk7cmV0dXJuIHQ/ZS50eXBlPXRbMV06ZS5yZW1vdmVBdHRyaWJ1dGUoInR5cGUiKSxlfWZ1bmN0aW9uIE10KGUsdCl7dmFyIG4scj0wO2Zvcig7bnVsbA==IT0obj1lW3JdKTtyKyspYi5fZGF0YShuLCJnbG9iYWxFdmFsIiwhdHx8Yi5fZGF0YSh0W3JdLCJnbG9iYWxFdmFsIikpfWZ1bmN0aW9uIF90KGUsdCl7aWYoMT09PXQubm9kZVR5cGUmJmIuaGFzRGF0YShlKSl7dmFyIG4scixpLG89Yi5fZGF0YShlKSxhPWIuX2RhdGEodCxvKSxzPW8uZXZlbnRzO2lmKHMpe2RlbGV0ZSBhLmhhbmRsZSxhLmV2ZW50cz17fTtmb3IobiBpbiBzKWZvcihyPTAsaT1zW25dLmxlbmd0aDtpPnI7cisrKWIuZXZlbnQuYWRkKHQsbixzW25dW3JdKX1hLmRhdGEmJihhLmRhdGE9Yi5leHRlbmQoe30sYS5kYXRhKSl9fWZ1bmN0aW9uIEZ0KGUsdCl7dmFyIG4scixpO2lmKDE9PT10Lm5vZGVUeXBlKXtpZihuPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwhYi5zdXBwb3J0Lm5vQ2xvbmVFdmVudCYmdFtiLmV4cGFuZG9dKXtpPWIuX2RhdGEodCk7Zm9yKHIgaW4gaS5ldmVudHMpYi5yZW1vdmVFdmVudCh0LHIsaS5oYW5kbGUpO3QucmVtb3ZlQXR0cmlidXRlKGIuZXhwYW5kbyl9InNjcmlwdCI9PT1uJiZ0LnRleHQhPT1lLnRleHQ/KEh0KHQpLnRleHQ9ZS50ZXh0LHF0KHQpKToib2JqZWN0Ij09PW4/KHQucGFyZW50Tm9kZSYmKHQub3V0ZXJIVE1MPWUub3V0ZXJIVE1MKSxiLnN1cHBvcnQuaHRtbDVDbG9uZSYmZS5pbm5lckhUTUwmJiFiLnRyaW0odC5pbm5lckhUTUwpJiYodC5pbm5lckhUTUw9ZS5pbm5lckhUTUwpKToiaW5wdXQiPT09biYmTnQudGVzdChlLnR5cGUpPyh0LmRlZmF1bHRDaGVja2VkPXQuY2hlY2tlZD1lLmNoZWNrZWQsdC52YWx1ZSE9PWUudmFsdWUmJih0LnZhbHVlPWUudmFsdWUpKToib3B0aW9uIj09PW4/dC5kZWZhdWx0U2VsZWN0ZWQ9dC5zZWxlY3RlZD1lLmRlZmF1bHRTZWxlY3RlZDooImlucHV0Ij09PW58fCJ0ZXh0YXJlYSI9PT1uKSYmKHQuZGVmYXVsdFZhbHVlPWUuZGVmYXVsdFZhbHVlKX19Yi5lYWNoKHthcHBlbmRUbzoiYXBwZW5kIixwcmVwZW5kVG86InByZXBlbmQiLGluc2VydEJlZm9yZToiYmVmb3JlIixpbnNlcnRBZnRlcjoiYWZ0ZXIiLHJlcGxhY2VBbGw6InJlcGxhY2VXaXRoIn0sZnVuY3Rpb24oZSx0KXtiLmZuW2VdPWZ1bmN0aW9uKGUpe3ZhciBuLHI9MCxpPVtdLG89YihlKSxhPW8ubGVuZ3RoLTE7Zm9yKDthPj1yO3IrKyluPXI9PT1hP3RoaXM6dGhpcy5jbG9uZSghMCksYihvW3JdKVt0XShuKSxkLmFwcGx5KGksbi5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGkpfX0pO2Z1bmN0aW9uIE90KGUsbil7dmFyIHIsbyxhPTAscz10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSE9PWk/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZShufHwiKiIpOnR5cGVvZiBlLnF1ZXJ5U2VsZWN0b3JBbGwhPT1pP2UucXVlcnlTZWxlY3RvckFsbChufHwiKiIpOnQ7aWYoIXMpZm9yKHM9W10scj1lLmNoaWxkTm9kZXN8fGU7bnVsbCE9KG89clthXSk7YSsrKSFufHxiLm5vZGVOYW1lKG8sbik/cy5wdXNoKG8pOmIubWVyZ2UocyxPdChvLG4pKTtyZXR1cm4gbj09PXR8fG4mJmIubm9kZU5hbWUoZSxuKT9iLm1lcmdlKFtlXSxzKTpzfWZ1bmN0aW9uIEJ0KGUpe050LnRlc3QoZS50eXBlKSYmKGUuZGVmYXVsdENoZWNrZWQ9ZS5jaGVja2VkKX1iLmV4dGVuZCh7Y2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdT1iLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKTtpZihiLnN1cHBvcnQuaHRtbDVDbG9uZXx8Yi5pc1hNTERvYyhlKXx8IW10LnRlc3QoIjwiK2Uubm9kZU5hbWUrIj4iKT9vPWUuY2xvbmVOb2RlKCEwKTooRHQuaW5uZXJIVE1MPWUub3V0ZXJIVE1MLER0LnJlbW92ZUNoaWxkKG89RHQuZmlyc3RDaGlsZCkpLCEoYi5zdXBwb3J0Lm5vQ2xvbmVFdmVudCYmYi5zdXBwb3J0Lm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHxiLmlzWE1MRG9jKGUpKSlmb3Iocj1PdChvKSxzPU90KGUpLGE9MDtudWxsIT0oaT1zW2FdKTsrK2EpclthXSYmRnQoaSxyW2FdKTtpZih0KWlmKG4pZm9yKHM9c3x8T3QoZSkscj1yfHxPdChvKSxhPTA7bnVsbCE9KGk9c1thXSk7YSsrKV90KGksclthXSk7ZWxzZSBfdChlLG8pO3JldHVybiByPU90KG8sInNjcmlwdCIpLHIubGVuZ3RoPjAmJk10KHIsIXUmJk90KGUsInNjcmlwdCIpKSxyPXM9aT1udWxsLG99LGJ1aWxkRnJhZ21lbnQ6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsLGMscD1lLmxlbmd0aCxmPWR0KHQpLGQ9W10saD0wO2Zvcig7cD5oO2grKylpZihvPWVbaF0sb3x8MD09PW8paWYoIm9iamVjdCI9PT1iLnR5cGUobykpYi5tZXJnZShkLG8ubm9kZVR5cGU/W29dOm8pO2Vsc2UgaWYod3QudGVzdChvKSl7cz1zfHxmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudCgiZGl2IikpLHU9KGJ0LmV4ZWMobyl8fFsiIiwiIl0pWzFdLnRvTG93ZXJDYXNlKCksYz1BdFt1XXx8QXQuX2RlZmF1bHQscy5pbm5lckhUTUw9Y1sxXStvLnJlcGxhY2UodnQsIjwkMT48LyQyPiIpK2NbMl0saT1jWzBdO3doaWxlKGktLSlzPXMubGFzdENoaWxkO2lmKCFiLnN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UmJnl0LnRlc3QobykmJmQucHVzaCh0LmNyZWF0ZVRleHROb2RlKHl0LmV4ZWMobylbMF0pKSwhYi5zdXBwb3J0LnRib2R5KXtvPSJ0YWJsZSIhPT11fHx4dC50ZXN0KG8pPyI8dGFibGU+IiE9PWNbMV18fHh0LnRlc3Qobyk/MDpzOnMuZmlyc3RDaGlsZCxpPW8mJm8uY2hpbGROb2Rlcy5sZW5ndGg7d2hpbGUoaS0tKWIubm9kZU5hbWUobD1vLmNoaWxkTm9kZXNbaV0sInRib2R5IikmJiFsLmNoaWxkTm9kZXMubGVuZ3RoJiZvLnJlbW92ZUNoaWxkKGwpCn1iLm1lcmdlKGQscy5jaGlsZE5vZGVzKSxzLnRleHRDb250ZW50PSIiO3doaWxlKHMuZmlyc3RDaGlsZClzLnJlbW92ZUNoaWxkKHMuZmlyc3RDaGlsZCk7cz1mLmxhc3RDaGlsZH1lbHNlIGQucHVzaCh0LmNyZWF0ZVRleHROb2RlKG8pKTtzJiZmLnJlbW92ZUNoaWxkKHMpLGIuc3VwcG9ydC5hcHBlbmRDaGVja2VkfHxiLmdyZXAoT3QoZCwiaW5wdXQiKSxCdCksaD0wO3doaWxlKG89ZFtoKytdKWlmKCghcnx8LTE9PT1iLmluQXJyYXkobyxyKSkmJihhPWIuY29udGFpbnMoby5vd25lckRvY3VtZW50LG8pLHM9T3QoZi5hcHBlbmRDaGlsZChvKSwic2NyaXB0IiksYSYmTXQocyksbikpe2k9MDt3aGlsZShvPXNbaSsrXSlrdC50ZXN0KG8udHlwZXx8IiIpJiZuLnB1c2gobyl9cmV0dXJuIHM9bnVsbCxmfSxjbGVhbkRhdGE6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLG8sYSxzPTAsdT1iLmV4cGFuZG8sbD1iLmNhY2hlLHA9Yi5zdXBwb3J0LmRlbGV0ZUV4cGFuZG8sZj1iLmV2ZW50LnNwZWNpYWw7Zm9yKDtudWxsIT0obj1lW3NdKTtzKyspaWYoKHR8fGIuYWNjZXB0RGF0YShuKSkmJihvPW5bdV0sYT1vJiZsW29dKSl7aWYoYS5ldmVudHMpZm9yKHIgaW4gYS5ldmVudHMpZltyXT9iLmV2ZW50LnJlbW92ZShuLHIpOmIucmVtb3ZlRXZlbnQobixyLGEuaGFuZGxlKTtsW29dJiYoZGVsZXRlIGxbb10scD9kZWxldGUgblt1XTp0eXBlb2Ygbi5yZW1vdmVBdHRyaWJ1dGUhPT1pP24ucmVtb3ZlQXR0cmlidXRlKHUpOm5bdV09bnVsbCxjLnB1c2gobykpfX19KTt2YXIgUHQsUnQsV3QsJHQ9L2FscGhhXChbXildKlwpL2ksSXQ9L29wYWNpdHlccyo9XHMqKFteKV0qKS8senQ9L14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvLFh0PS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxVdD0vXm1hcmdpbi8sVnQ9UmVnRXhwKCJeKCIreCsiKSguKikkIiwiaSIpLFl0PVJlZ0V4cCgiXigiK3grIikoPyFweClbYS16JV0rJCIsImkiKSxKdD1SZWdFeHAoIl4oWystXSk9KCIreCsiKSIsImkiKSxHdD17Qk9EWToiYmxvY2sifSxRdD17cG9zaXRpb246ImFic29sdXRlIix2aXNpYmlsaXR5OiJoaWRkZW4iLGRpc3BsYXk6ImJsb2NrIn0sS3Q9e2xldHRlclNwYWNpbmc6MCxmb250V2VpZ2h0OjQwMH0sWnQ9WyJUb3AiLCJSaWdodCIsIkJvdHRvbSIsIkxlZnQiXSxlbj1bIldlYmtpdCIsIk8iLCJNb3oiLCJtcyJdO2Z1bmN0aW9uIHRuKGUsdCl7aWYodCBpbiBlKXJldHVybiB0O3ZhciBuPXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKSxyPXQsaT1lbi5sZW5ndGg7d2hpbGUoaS0tKWlmKHQ9ZW5baV0rbix0IGluIGUpcmV0dQ==cm4gdDtyZXR1cm4gcn1mdW5jdGlvbiBubihlLHQpe3JldHVybiBlPXR8fGUsIm5vbmUiPT09Yi5jc3MoZSwiZGlzcGxheSIpfHwhYi5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSl9ZnVuY3Rpb24gcm4oZSx0KXt2YXIgbixyLGksbz1bXSxhPTAscz1lLmxlbmd0aDtmb3IoO3M+YTthKyspcj1lW2FdLHIuc3R5bGUmJihvW2FdPWIuX2RhdGEociwib2xkZGlzcGxheSIpLG49ci5zdHlsZS5kaXNwbGF5LHQ/KG9bYV18fCJub25lIiE9PW58fChyLnN0eWxlLmRpc3BsYXk9IiIpLCIiPT09ci5zdHlsZS5kaXNwbGF5JiZubihyKSYmKG9bYV09Yi5fZGF0YShyLCJvbGRkaXNwbGF5Iix1bihyLm5vZGVOYW1lKSkpKTpvW2FdfHwoaT1ubihyKSwobiYmIm5vbmUiIT09bnx8IWkpJiZiLl9kYXRhKHIsIm9sZGRpc3BsYXkiLGk/bjpiLmNzcyhyLCJkaXNwbGF5IikpKSk7Zm9yKGE9MDtzPmE7YSsrKXI9ZVthXSxyLnN0eWxlJiYodCYmIm5vbmUiIT09ci5zdHlsZS5kaXNwbGF5JiYiIiE9PXIuc3R5bGUuZGlzcGxheXx8KHIuc3R5bGUuZGlzcGxheT10P29bYV18fCIiOiJub25lIikpO3JldHVybiBlfWIuZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gYi5hY2Nlc3ModGhpcyxmdW5jdGlvbihlLG4scil7dmFyIGksbyxhPXt9LHM9MDtpZihiLmlzQXJyYXkobikpe2ZvcihvPVJ0KGUpLGk9bi5sZW5ndGg7aT5zO3MrKylhW25bc11dPWIuY3NzKGUsbltzXSwhMSxvKTtyZXR1cm4gYX1yZXR1cm4gciE9PXQ/Yi5zdHlsZShlLG4scik6Yi5jc3MoZSxuKX0sZSxuLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHNob3c6ZnVuY3Rpb24oKXtyZXR1cm4gcm4odGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gcm4odGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihlKXt2YXIgdD0iYm9vbGVhbiI9PXR5cGVvZiBlO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsodD9lOm5uKHRoaXMpKT9iKHRoaXMpLnNob3coKTpiKHRoaXMpLmhpZGUoKX0pfX0pLGIuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49V3QoZSwib3BhY2l0eSIpO3JldHVybiIiPT09bj8iMSI6bn19fX0sY3NzTnVtYmVyOntjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmb250V2VpZ2h0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6eyJmbG9hdCI6Yi5zdXBwb3J0LmNzc0Zsb2F0PyJjc3NGbG9hdCI6InN0eWxlRmxvYXQifSxzdHlsZTpmdW5jdGlvbihlLG4scixpKXtpZihlJiYzIT09ZS5ub2RlVHlwZSYmOCE9PWUubm9kZVR5cGUmJmUuc3R5bGUpe3ZhciBvLGEscyx1PWIuY2FtZWxDYXNlKG4pLGw9ZS5zdHlsZTtpZihuPWIuY3NzUHJvcHNbdV18fChiLmNzc1Byb3BzW3VdPXRuKGwsdSkpLHM9Yi5jc3NIb29rc1tuXXx8Yi5jc3NIb29rc1t1XSxyPT09dClyZXR1cm4gcyYmImdldCJpbiBzJiYobz1zLmdldChlLCExLGkpKSE9PXQ/bzpsW25dO2lmKGE9dHlwZW9mIHIsInN0cmluZyI9PT1hJiYobz1KdC5leGVjKHIpKSYmKHI9KG9bMV0rMSkqb1syXStwYXJzZUZsb2F0KGIuY3NzKGUsbikpLGE9Im51bWJlciIpLCEobnVsbD09cnx8Im51bWJlciI9PT1hJiZpc05hTihyKXx8KCJudW1iZXIiIT09YXx8Yi5jc3NOdW1iZXJbdV18fChyKz0icHgiKSxiLnN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlfHwiIiE9PXJ8fDAhPT1uLmluZGV4T2YoImJhY2tncm91bmQiKXx8KGxbbl09ImluaGVyaXQiKSxzJiYic2V0ImluIHMmJihyPXMuc2V0KGUscixpKSk9PT10KSkpdHJ5e2xbbl09cn1jYXRjaChjKXt9fX0sY3NzOmZ1bmN0aW9uKGUsbixyLGkpe3ZhciBvLGEscyx1PWIuY2FtZWxDYXNlKG4pO3JldHVybiBuPWIuY3NzUHJvcHNbdV18fChiLmNzc1Byb3BzW3VdPXRuKGUuc3R5bGUsdSkpLHM9Yi5jc3NIb29rc1tuXXx8Yi5jc3NIb29rc1t1XSxzJiYiZ2V0ImluIHMmJihhPXMuZ2V0KGUsITAscikpLGE9PT10JiYoYT1XdChlLG4saSkpLCJub3JtYWwiPT09YSYmbiBpbiBLdCYmKGE9S3Rbbl0pLCIiPT09cnx8cj8obz1wYXJzZUZsb2F0KGEpLHI9PT0hMHx8Yi5pc051bWVyaWMobyk/b3x8MDphKTphfSxzd2FwOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYT17fTtmb3IobyBpbiB0KWFbb109ZS5zdHlsZVtvXSxlLnN0eWxlW29dPXRbb107aT1uLmFwcGx5KGUscnx8W10pO2ZvcihvIGluIHQpZS5zdHlsZVtvXT1hW29dO3JldHVybiBpfX0pLGUuZ2V0Q29tcHV0ZWRTdHlsZT8oUnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGUuZ2V0Q29tcHV0ZWRTdHlsZSh0LG51bGwpfSxXdD1mdW5jdGlvbihlLG4scil7dmFyIGksbyxhLHM9cnx8UnQoZSksdT1zP3MuZ2V0UHJvcGVydHlWYWx1ZShuKXx8c1tuXTp0LGw9ZS5zdHlsZTtyZXR1cm4gcyYmKCIiIT09dXx8Yi5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSl8fCh1PWIuc3R5bGUoZSxuKSksWXQudGVzdCh1KSYmVXQudGVzdChuKSYmKGk9bC53aWR0aCxvPWwubWluV2lkdGgsYT1sLm1heFdpZHRoLGwubWluV2lkdGg9bC5tYXhXaWR0aD1sLndpZHRoPXUsdT1zLndpZHRoLGwud2lkdGg9aSxsLm1pbldpZHRoPW8sbC5tYXhXaWR0aD1hKSksdX0pOm8uZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSYmKFJ0PWZ1bmN0aW9uKGUpe3JldHVybiBlLmN1cnJlbnRTdHlsZX0sV3Q9ZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG8sYSxzPXJ8fFJ0KGUpLHU9cz9zW25dOnQsbD1lLnN0eWxlO3JldHVybiBudWxsPT11JiZsJiZsW25dJiYodT1sW25dKSxZdC50ZXN0KHUpJiYhenQudGVzdChuKSYmKGk9bC5sZWZ0LG89ZS5ydW50aW1lU3R5bGUsYT1vJiZvLmxlZnQsYSYmKG8ubGVmdD1lLmN1cnJlbnRTdHlsZS5sZWZ0KSxsLmxlZnQ9ImZvbnRTaXplIj09PW4/IjFlbSI6dSx1PWwucGl4ZWxMZWZ0KyJweCIsbC5sZWZ0PWksYSYmKG8ubGVmdD1hKSksIiI9PT11PyJhdXRvIjp1fSk7ZnVuY3Rpb24gb24oZSx0LG4pe3ZhciByPVZ0LmV4ZWModCk7cmV0dXJuIHI/TWF0aC5tYXgoMCxyWzFdLShufHwwKSkrKHJbMl18fCJweCIpOnR9ZnVuY3Rpb24gYW4oZSx0LG4scixpKXt2YXIgbz1uPT09KHI/ImJvcmRlciI6ImNvbnRlbnQiKT80OiJ3aWR0aCI9PT10PzE6MCxhPTA7Zm9yKDs0Pm87bys9MikibWFyZ2luIj09PW4mJihhKz1iLmNzcyhlLG4rWnRbb10sITAsaSkpLHI/KCJjb250ZW50Ij09PW4mJihhLT1iLmNzcyhlLCJwYWRkaW5nIitadFtvXSwhMCxpKSksIm1hcmdpbiIhPT1uJiYoYS09Yi5jc3MoZSwiYm9yZGVyIitadFtvXSsiV2lkdGgiLCEwLGkpKSk6KGErPWIuY3NzKGUsInBhZGRpbmciK1p0W29dLCEwLGkpLCJwYWRkaW5nIiE9PW4mJihhKz1iLmNzcyhlLCJib3JkZXIiK1p0W29dKyJXaWR0aCIsITAsaSkpKTtyZXR1cm4gYX1mdW5jdGlvbiBzbihlLHQsbil7dmFyIHI9ITAsaT0id2lkdGgiPT09dD9lLm9mZnNldFdpZHRoOmUub2Zmc2V0SGVpZ2h0LG89UnQoZSksYT1iLnN1cHBvcnQuYm94U2l6aW5nJiYiYm9yZGVyLWJveCI9PT1iLmNzcyhlLCJib3hTaXppbmciLCExLG8pO2lmKDA+PWl8fG51bGw9PWkpe2lmKGk9V3QoZSx0LG8pLCgwPml8fG51bGw9PWkpJiYoaT1lLnN0eWxlW3RdKSxZdC50ZXN0KGkpKXJldHVybiBpO3I9YSYmKGIuc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZXx8aT09PWUuc3R5bGVbdF0pLGk9cGFyc2VGbG9hdChpKXx8MH1yZXR1cm4gaSthbihlLHQsbnx8KGE/ImJvcmRlciI6ImNvbnRlbnQiKSxyLG8pKyJweCJ9ZnVuY3Rpb24gdW4oZSl7dmFyIHQ9byxuPUd0W2VdO3JldHVybiBufHwobj1sbihlLHQpLCJub25lIiE9PW4mJm58fChQdD0oUHR8fGIoIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz4iKS5jc3MoImNzc1RleHQiLCJkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQiKSkuYXBwZW5kVG8odC5kb2N1bWVudEVsZW1lbnQpLHQ9KFB0WzBdLmNvbnRlbnRXaW5kb3d8fFB0WzBdLmNvbnRlbnREb2N1bWVudCkuZG9jdW1lbnQsdC53cml0ZSgiPCFkb2N0eXBlIGh0bWw+PGh0bWw+PGJvZHk+IiksdC5jbG9zZSgpLG49bG4oZSx0KSxQdC5kZXRhY2goKSksR3RbZV09biksbn1mdW5jdGlvbiBsbihlLHQpe3ZhciBuPQ==Yih0LmNyZWF0ZUVsZW1lbnQoZSkpLmFwcGVuZFRvKHQuYm9keSkscj1iLmNzcyhuWzBdLCJkaXNwbGF5Iik7cmV0dXJuIG4ucmVtb3ZlKCkscn1iLmVhY2goWyJoZWlnaHQiLCJ3aWR0aCJdLGZ1bmN0aW9uKGUsbil7Yi5jc3NIb29rc1tuXT17Z2V0OmZ1bmN0aW9uKGUscixpKXtyZXR1cm4gcj8wPT09ZS5vZmZzZXRXaWR0aCYmWHQudGVzdChiLmNzcyhlLCJkaXNwbGF5IikpP2Iuc3dhcChlLFF0LGZ1bmN0aW9uKCl7cmV0dXJuIHNuKGUsbixpKX0pOnNuKGUsbixpKTp0fSxzZXQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPXImJlJ0KGUpO3JldHVybiBvbihlLHQscj9hbihlLG4scixiLnN1cHBvcnQuYm94U2l6aW5nJiYiYm9yZGVyLWJveCI9PT1iLmNzcyhlLCJib3hTaXppbmciLCExLGkpLGkpOjApfX19KSxiLnN1cHBvcnQub3BhY2l0eXx8KGIuY3NzSG9va3Mub3BhY2l0eT17Z2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIEl0LnRlc3QoKHQmJmUuY3VycmVudFN0eWxlP2UuY3VycmVudFN0eWxlLmZpbHRlcjplLnN0eWxlLmZpbHRlcil8fCIiKT8uMDEqcGFyc2VGbG9hdChSZWdFeHAuJDEpKyIiOnQ/IjEiOiIifSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnN0eWxlLHI9ZS5jdXJyZW50U3R5bGUsaT1iLmlzTnVtZXJpYyh0KT8iYWxwaGEob3BhY2l0eT0iKzEwMCp0KyIpIjoiIixvPXImJnIuZmlsdGVyfHxuLmZpbHRlcnx8IiI7bi56b29tPTEsKHQ+PTF8fCIiPT09dCkmJiIiPT09Yi50cmltKG8ucmVwbGFjZSgkdCwiIikpJiZuLnJlbW92ZUF0dHJpYnV0ZSYmKG4ucmVtb3ZlQXR0cmlidXRlKCJmaWx0ZXIiKSwiIj09PXR8fHImJiFyLmZpbHRlcil8fChuLmZpbHRlcj0kdC50ZXN0KG8pP28ucmVwbGFjZSgkdCxpKTpvKyIgIitpKX19KSxiKGZ1bmN0aW9uKCl7Yi5zdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHR8fChiLmNzc0hvb2tzLm1hcmdpblJpZ2h0PXtnZXQ6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gbj9iLnN3YXAoZSx7ZGlzcGxheToiaW5saW5lLWJsb2NrIn0sV3QsW2UsIm1hcmdpblJpZ2h0Il0pOnR9fSksIWIuc3VwcG9ydC5waXhlbFBvc2l0aW9uJiZiLmZuLnBvc2l0aW9uJiZiLmVhY2goWyJ0b3AiLCJsZWZ0Il0sZnVuY3Rpb24oZSxuKXtiLmNzc0hvb2tzW25dPXtnZXQ6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gcj8ocj1XdChlLG4pLFl0LnRlc3Qocik/YihlKS5wb3NpdGlvbigpW25dKyJweCI6cik6dH19fSl9KSxiLmV4cHImJmIuZXhwci5maWx0ZXJzJiYoYi5leHByLmZpbHRlcnMuaGlkZGVuPWZ1bmN0aW9uKGUpe3JldHVybiAwPj1lLm9mZnNldFdpZHRoJiYwPj1lLm9mZnNldEhlaWdodHx8IWIuc3VwcG9ydC5yZWxpYWJsZUhpZGRlbk9mZnNldHMmJiJub25lIj09PShlLnN0eWxlJiZlLnN0eWxlLmRpc3BsYXl8fGIuY3NzKGUsImRpc3BsYXkiKSl9LGIuZXhwci5maWx0ZXJzLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuIWIuZXhwci5maWx0ZXJzLmhpZGRlbihlKX0pLGIuZWFjaCh7bWFyZ2luOiIiLHBhZGRpbmc6IiIsYm9yZGVyOiJXaWR0aCJ9LGZ1bmN0aW9uKGUsdCl7Yi5jc3NIb29rc1tlK3RdPXtleHBhbmQ6ZnVuY3Rpb24obil7dmFyIHI9MCxpPXt9LG89InN0cmluZyI9PXR5cGVvZiBuP24uc3BsaXQoIiAiKTpbbl07Zm9yKDs0PnI7cisrKWlbZStadFtyXSt0XT1vW3JdfHxvW3ItMl18fG9bMF07cmV0dXJuIGl9fSxVdC50ZXN0KGUpfHwoYi5jc3NIb29rc1tlK3RdLnNldD1vbil9KTt2YXIgY249LyUyMC9nLHBuPS9cW1xdJC8sZm49L1xyP1xuL2csZG49L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLGhuPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtiLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIGIucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgZT1iLnByb3AodGhpcywiZWxlbWVudHMiKTtyZXR1cm4gZT9iLm1ha2VBcnJheShlKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFiKHRoaXMpLmlzKCI6ZGlzYWJsZWQiKSYmaG4udGVzdCh0aGlzLm5vZGVOYW1lKSYmIWRuLnRlc3QoZSkmJih0aGlzLmNoZWNrZWR8fCFOdC50ZXN0KGUpKX0pLm1hcChmdW5jdGlvbihlLHQpe3ZhciBuPWIodGhpcykudmFsKCk7cmV0dXJuIG51bGw9PW4/bnVsbDpiLmlzQXJyYXkobik/Yi5tYXAobixmdW5jdGlvbihlKXtyZXR1cm57bmFtZTp0Lm5hbWUsdmFsdWU6ZS5yZXBsYWNlKGZuLCJcclxuIil9fSk6e25hbWU6dC5uYW1lLHZhbHVlOm4ucmVwbGFjZShmbiwiXHJcbiIpfX0pLmdldCgpfX0pLGIucGFyYW09ZnVuY3Rpb24oZSxuKXt2YXIgcixpPVtdLG89ZnVuY3Rpb24oZSx0KXt0PWIuaXNGdW5jdGlvbih0KT90KCk6bnVsbD09dD8iIjp0LGlbaS5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChlKSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KHQpfTtpZihuPT09dCYmKG49Yi5hamF4U2V0dGluZ3MmJmIuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsKSxiLmlzQXJyYXkoZSl8fGUuanF1ZXJ5JiYhYi5pc1BsYWluT2JqZWN0KGUpKWIuZWFjaChlLGZ1bmN0aW9uKCl7byh0aGlzLm5hbWUsdGhpcy52YWx1ZSl9KTtlbHNlIGZvcihyIGluIGUpZ24ocixlW3JdLG4sbyk7cmV0dXJuIGkuam9pbigiJiIpLnJlcGxhY2UoY24sIisiKX07ZnVuY3Rpb24gZ24oZSx0LG4scil7dmFyIGk7aWYoYi5pc0FycmF5KHQpKWIuZWFjaCh0LGZ1bmN0aW9uKHQsaSl7bnx8cG4udGVzdChlKT9yKGUsaSk6Z24oZSsiWyIrKCJvYmplY3QiPT10eXBlb2YgaT90OiIiKSsiXSIsaSxuLHIpfSk7ZWxzZSBpZihufHwib2JqZWN0IiE9PWIudHlwZSh0KSlyKGUsdCk7ZWxzZSBmb3IoaSBpbiB0KWduKGUrIlsiK2krIl0iLHRbaV0sbixyKX1iLmVhY2goImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnUiLnNwbGl0KCIgIiksZnVuY3Rpb24oZSx0KXtiLmZuW3RdPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKHQsbnVsbCxlLG4pOnRoaXMudHJpZ2dlcih0KX19KSxiLmZuLmhvdmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubW91c2VlbnRlcihlKS5tb3VzZWxlYXZlKHR8fGUpfTt2YXIgbW4seW4sdm49Yi5ub3coKSxibj0vXD8vLHhuPS8jLiokLyx3bj0vKFs/Jl0pXz1bXiZdKi8sVG49L14oLio/KTpbIFx0XSooW15cclxuXSopXHI/JC9nbSxObj0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxDbj0vXig/OkdFVHxIRUFEKSQvLGtuPS9eXC9cLy8sRW49L14oW1x3ListXSs6KSg/OlwvXC8oW15cLz8jOl0qKSg/OjooXGQrKXwpfCkvLFNuPWIuZm4ubG9hZCxBbj17fSxqbj17fSxEbj0iKi8iLmNvbmNhdCgiKiIpO3RyeXt5bj1hLmhyZWZ9Y2F0Y2goTG4pe3luPW8uY3JlYXRlRWxlbWVudCgiYSIpLHluLmhyZWY9IiIseW49eW4uaHJlZn1tbj1Fbi5leGVjKHluLnRvTG93ZXJDYXNlKCkpfHxbXTtmdW5jdGlvbiBIbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXsic3RyaW5nIiE9dHlwZW9mIHQmJihuPXQsdD0iKiIpO3ZhciByLGk9MCxvPXQudG9Mb3dlckNhc2UoKS5tYXRjaCh3KXx8W107aWYoYi5pc0Z1bmN0aW9uKG4pKXdoaWxlKHI9b1tpKytdKSIrIj09PXJbMF0/KHI9ci5zbGljZSgxKXx8IioiLChlW3JdPWVbcl18fFtdKS51bnNoaWZ0KG4pKTooZVtyXT1lW3JdfHxbXSkucHVzaChuKX19ZnVuY3Rpb24gcW4oZSxuLHIsaSl7dmFyIG89e30sYT1lPT09am47ZnVuY3Rpb24gcyh1KXt2YXIgbDtyZXR1cm4gb1t1XT0hMCxiLmVhY2goZVt1XXx8W10sZnVuY3Rpb24oZSx1KXt2YXIgYz11KG4scixpKTtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGN8fGF8fG9bY10/YT8hKGw9Yyk6dDoobg==LmRhdGFUeXBlcy51bnNoaWZ0KGMpLHMoYyksITEpfSksbH1yZXR1cm4gcyhuLmRhdGFUeXBlc1swXSl8fCFvWyIqIl0mJnMoIioiKX1mdW5jdGlvbiBNbihlLG4pe3ZhciByLGksbz1iLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKGkgaW4gbiluW2ldIT09dCYmKChvW2ldP2U6cnx8KHI9e30pKVtpXT1uW2ldKTtyZXR1cm4gciYmYi5leHRlbmQoITAsZSxyKSxlfWIuZm4ubG9hZD1mdW5jdGlvbihlLG4scil7aWYoInN0cmluZyIhPXR5cGVvZiBlJiZTbilyZXR1cm4gU24uYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBpLG8sYSxzPXRoaXMsdT1lLmluZGV4T2YoIiAiKTtyZXR1cm4gdT49MCYmKGk9ZS5zbGljZSh1LGUubGVuZ3RoKSxlPWUuc2xpY2UoMCx1KSksYi5pc0Z1bmN0aW9uKG4pPyhyPW4sbj10KTpuJiYib2JqZWN0Ij09dHlwZW9mIG4mJihhPSJQT1NUIikscy5sZW5ndGg+MCYmYi5hamF4KHt1cmw6ZSx0eXBlOmEsZGF0YVR5cGU6Imh0bWwiLGRhdGE6bn0pLmRvbmUoZnVuY3Rpb24oZSl7bz1hcmd1bWVudHMscy5odG1sKGk/YigiPGRpdj4iKS5hcHBlbmQoYi5wYXJzZUhUTUwoZSkpLmZpbmQoaSk6ZSl9KS5jb21wbGV0ZShyJiZmdW5jdGlvbihlLHQpe3MuZWFjaChyLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pLHRoaXN9LGIuZWFjaChbImFqYXhTdGFydCIsImFqYXhTdG9wIiwiYWpheENvbXBsZXRlIiwiYWpheEVycm9yIiwiYWpheFN1Y2Nlc3MiLCJhamF4U2VuZCJdLGZ1bmN0aW9uKGUsdCl7Yi5mblt0XT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vbih0LGUpfX0pLGIuZWFjaChbImdldCIsInBvc3QiXSxmdW5jdGlvbihlLG4pe2Jbbl09ZnVuY3Rpb24oZSxyLGksbyl7cmV0dXJuIGIuaXNGdW5jdGlvbihyKSYmKG89b3x8aSxpPXIscj10KSxiLmFqYXgoe3VybDplLHR5cGU6bixkYXRhVHlwZTpvLGRhdGE6cixzdWNjZXNzOml9KX19KSxiLmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6eW4sdHlwZToiR0VUIixpc0xvY2FsOk5uLnRlc3QobW5bMV0pLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZToiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IixhY2NlcHRzOnsiKiI6RG4sdGV4dDoidGV4dC9wbGFpbiIsaHRtbDoidGV4dC9odG1sIix4bWw6ImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwiLGpzb246ImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCJ9LGNvbnRlbnRzOnt4bWw6L3htbC8saHRtbDovaHRtbC8sanNvbjovanNvbi99LHJlc3BvbnNlRmllbGRzOnt4bWw6InJlc3BvbnNlWE1MIix0ZXh0OiJyZXNwb25zZVRleHQifSxjb252ZXJ0ZXJzOnsiKiB0ZXh0IjplLlN0cmluZywidGV4dCBodG1sIjohMCwidGV4dCBqc29uIjpiLnBhcnNlSlNPTiwidGV4dCB4bWwiOmIucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihlLHQpe3JldHVybiB0P01uKE1uKGUsYi5hamF4U2V0dGluZ3MpLHQpOk1uKGIuYWpheFNldHRpbmdzLGUpfSxhamF4UHJlZmlsdGVyOkhuKEFuKSxhamF4VHJhbnNwb3J0OkhuKGpuKSxhamF4OmZ1bmN0aW9uKGUsbil7Im9iamVjdCI9PXR5cGVvZiBlJiYobj1lLGU9dCksbj1ufHx7fTt2YXIgcixpLG8sYSxzLHUsbCxjLHA9Yi5hamF4U2V0dXAoe30sbiksZj1wLmNvbnRleHR8fHAsZD1wLmNvbnRleHQmJihmLm5vZGVUeXBlfHxmLmpxdWVyeSk/YihmKTpiLmV2ZW50LGg9Yi5EZWZlcnJlZCgpLGc9Yi5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksbT1wLnN0YXR1c0NvZGV8fHt9LHk9e30sdj17fSx4PTAsVD0iY2FuY2VsZWQiLE49e3JlYWR5U3RhdGU6MCxnZXRSZXNwb25zZUhlYWRlcjpmdW5jdGlvbihlKXt2YXIgdDtpZigyPT09eCl7aWYoIWMpe2M9e307d2hpbGUodD1Ubi5leGVjKGEpKWNbdFsxXS50b0xvd2VyQ2FzZSgpXT10WzJdfXQ9Y1tlLnRvTG93ZXJDYXNlKCldfXJldHVybiBudWxsPT10P251bGw6dH0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIDI9PT14P2E6bnVsbH0sc2V0UmVxdWVzdEhlYWRlcjpmdW5jdGlvbihlLHQpe3ZhciBuPWUudG9Mb3dlckNhc2UoKTtyZXR1cm4geHx8KGU9dltuXT12W25dfHxlLHlbZV09dCksdGhpc30sb3ZlcnJpZGVNaW1lVHlwZTpmdW5jdGlvbihlKXtyZXR1cm4geHx8KHAubWltZVR5cGU9ZSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihlKXt2YXIgdDtpZihlKWlmKDI+eClmb3IodCBpbiBlKW1bdF09W21bdF0sZVt0XV07ZWxzZSBOLmFsd2F5cyhlW04uc3RhdHVzXSk7cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fFQ7cmV0dXJuIGwmJmwuYWJvcnQodCksaygwLHQpLHRoaXN9fTtpZihoLnByb21pc2UoTikuY29tcGxldGU9Zy5hZGQsTi5zdWNjZXNzPU4uZG9uZSxOLmVycm9yPU4uZmFpbCxwLnVybD0oKGV8fHAudXJsfHx5bikrIiIpLnJlcGxhY2UoeG4sIiIpLnJlcGxhY2Uoa24sbW5bMV0rIi8vIikscC50eXBlPW4ubWV0aG9kfHxuLnR5cGV8fHAubWV0aG9kfHxwLnR5cGUscC5kYXRhVHlwZXM9Yi50cmltKHAuZGF0YVR5cGV8fCIqIikudG9Mb3dlckNhc2UoKS5tYXRjaCh3KXx8WyIiXSxudWxsPT1wLmNyb3NzRG9tYWluJiYocj1Fbi5leGVjKHAudXJsLnRvTG93ZXJDYXNlKCkpLHAuY3Jvc3NEb21haW49ISghcnx8clsxXT09PW1uWzFdJiZyWzJdPT09bW5bMl0mJihyWzNdfHwoImh0dHA6Ij09PXJbMV0/ODA6NDQzKSk9PShtblszXXx8KCJodHRwOiI9PT1tblsxXT84MDo0NDMpKSkpLHAuZGF0YSYmcC5wcm9jZXNzRGF0YSYmInN0cmluZyIhPXR5cGVvZiBwLmRhdGEmJihwLmRhdGE9Yi5wYXJhbShwLmRhdGEscC50cmFkaXRpb25hbCkpLHFuKEFuLHAsbixOKSwyPT09eClyZXR1cm4gTjt1PXAuZ2xvYmFsLHUmJjA9PT1iLmFjdGl2ZSsrJiZiLmV2ZW50LnRyaWdnZXIoImFqYXhTdGFydCIpLHAudHlwZT1wLnR5cGUudG9VcHBlckNhc2UoKSxwLmhhc0NvbnRlbnQ9IUNuLnRlc3QocC50eXBlKSxvPXAudXJsLHAuaGFzQ29udGVudHx8KHAuZGF0YSYmKG89cC51cmwrPShibi50ZXN0KG8pPyImIjoiPyIpK3AuZGF0YSxkZWxldGUgcC5kYXRhKSxwLmNhY2hlPT09ITEmJihwLnVybD13bi50ZXN0KG8pP28ucmVwbGFjZSh3biwiJDFfPSIrdm4rKyk6bysoYm4udGVzdChvKT8iJiI6Ij8iKSsiXz0iK3ZuKyspKSxwLmlmTW9kaWZpZWQmJihiLmxhc3RNb2RpZmllZFtvXSYmTi5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Nb2RpZmllZC1TaW5jZSIsYi5sYXN0TW9kaWZpZWRbb10pLGIuZXRhZ1tvXSYmTi5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Ob25lLU1hdGNoIixiLmV0YWdbb10pKSwocC5kYXRhJiZwLmhhc0NvbnRlbnQmJnAuY29udGVudFR5cGUhPT0hMXx8bi5jb250ZW50VHlwZSkmJk4uc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIixwLmNvbnRlbnRUeXBlKSxOLnNldFJlcXVlc3RIZWFkZXIoIkFjY2VwdCIscC5kYXRhVHlwZXNbMF0mJnAuYWNjZXB0c1twLmRhdGFUeXBlc1swXV0/cC5hY2NlcHRzW3AuZGF0YVR5cGVzWzBdXSsoIioiIT09cC5kYXRhVHlwZXNbMF0/IiwgIitEbisiOyBxPTAuMDEiOiIiKTpwLmFjY2VwdHNbIioiXSk7Zm9yKGkgaW4gcC5oZWFkZXJzKU4uc2V0UmVxdWVzdEhlYWRlcihpLHAuaGVhZGVyc1tpXSk7aWYocC5iZWZvcmVTZW5kJiYocC5iZWZvcmVTZW5kLmNhbGwoZixOLHApPT09ITF8fDI9PT14KSlyZXR1cm4gTi5hYm9ydCgpO1Q9ImFib3J0Ijtmb3IoaSBpbntzdWNjZXNzOjEsZXJyb3I6MSxjb21wbGV0ZToxfSlOW2ldKHBbaV0pO2lmKGw9cW4oam4scCxuLE4pKXtOLnJlYWR5U3RhdGU9MSx1JiZkLnRyaWdnZXIoImFqYXhTZW5kIixbTixwXSkscC5hc3luYyYmcC50aW1lb3V0PjAmJihzPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtOLmFib3J0KCJ0aW1lb3V0Iil9LHAudGltZW91dCkpO3RyeXt4PTEsbC5zZW5kKHksayl9Y2F0Y2goQyl7aWYoISgyPngpKXRocm93IEM7aygtMSxDKX19ZWxzZSBrKC0xLCJObyBUcmFuc3BvcnQiKTtmdW5jdGlvbiBrKGUsbixyLGkpe3ZhciBjLHksdix3LFQsQz1uOzIhPQ==PXgmJih4PTIscyYmY2xlYXJUaW1lb3V0KHMpLGw9dCxhPWl8fCIiLE4ucmVhZHlTdGF0ZT1lPjA/NDowLHImJih3PV9uKHAsTixyKSksZT49MjAwJiYzMDA+ZXx8MzA0PT09ZT8ocC5pZk1vZGlmaWVkJiYoVD1OLmdldFJlc3BvbnNlSGVhZGVyKCJMYXN0LU1vZGlmaWVkIiksVCYmKGIubGFzdE1vZGlmaWVkW29dPVQpLFQ9Ti5nZXRSZXNwb25zZUhlYWRlcigiZXRhZyIpLFQmJihiLmV0YWdbb109VCkpLDIwND09PWU/KGM9ITAsQz0ibm9jb250ZW50Iik6MzA0PT09ZT8oYz0hMCxDPSJub3Rtb2RpZmllZCIpOihjPUZuKHAsdyksQz1jLnN0YXRlLHk9Yy5kYXRhLHY9Yy5lcnJvcixjPSF2KSk6KHY9QywoZXx8IUMpJiYoQz0iZXJyb3IiLDA+ZSYmKGU9MCkpKSxOLnN0YXR1cz1lLE4uc3RhdHVzVGV4dD0obnx8QykrIiIsYz9oLnJlc29sdmVXaXRoKGYsW3ksQyxOXSk6aC5yZWplY3RXaXRoKGYsW04sQyx2XSksTi5zdGF0dXNDb2RlKG0pLG09dCx1JiZkLnRyaWdnZXIoYz8iYWpheFN1Y2Nlc3MiOiJhamF4RXJyb3IiLFtOLHAsYz95OnZdKSxnLmZpcmVXaXRoKGYsW04sQ10pLHUmJihkLnRyaWdnZXIoImFqYXhDb21wbGV0ZSIsW04scF0pLC0tYi5hY3RpdmV8fGIuZXZlbnQudHJpZ2dlcigiYWpheFN0b3AiKSkpfXJldHVybiBOfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gYi5nZXQoZSx0LG4sInNjcmlwdCIpfSxnZXRKU09OOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYi5nZXQoZSx0LG4sImpzb24iKX19KTtmdW5jdGlvbiBfbihlLG4scil7dmFyIGksbyxhLHMsdT1lLmNvbnRlbnRzLGw9ZS5kYXRhVHlwZXMsYz1lLnJlc3BvbnNlRmllbGRzO2ZvcihzIGluIGMpcyBpbiByJiYobltjW3NdXT1yW3NdKTt3aGlsZSgiKiI9PT1sWzBdKWwuc2hpZnQoKSxvPT09dCYmKG89ZS5taW1lVHlwZXx8bi5nZXRSZXNwb25zZUhlYWRlcigiQ29udGVudC1UeXBlIikpO2lmKG8pZm9yKHMgaW4gdSlpZih1W3NdJiZ1W3NdLnRlc3Qobykpe2wudW5zaGlmdChzKTticmVha31pZihsWzBdaW4gcilhPWxbMF07ZWxzZXtmb3IocyBpbiByKXtpZighbFswXXx8ZS5jb252ZXJ0ZXJzW3MrIiAiK2xbMF1dKXthPXM7YnJlYWt9aXx8KGk9cyl9YT1hfHxpfXJldHVybiBhPyhhIT09bFswXSYmbC51bnNoaWZ0KGEpLHJbYV0pOnR9ZnVuY3Rpb24gRm4oZSx0KXt2YXIgbixyLGksbyxhPXt9LHM9MCx1PWUuZGF0YVR5cGVzLnNsaWNlKCksbD11WzBdO2lmKGUuZGF0YUZpbHRlciYmKHQ9ZS5kYXRhRmlsdGVyKHQsZS5kYXRhVHlwZSkpLHVbMV0pZm9yKGkgaW4gZS5jb252ZXJ0ZXJzKWFbaS50b0xvd2VyQ2FzZSgpXT1lLmNvbnZlcnRlcnNbaV07Zm9yKDtyPXVbKytzXTspaWYoIioiIT09cil7aWYoIioiIT09bCYmbCE9PXIpe2lmKGk9YVtsKyIgIityXXx8YVsiKiAiK3JdLCFpKWZvcihuIGluIGEpaWYobz1uLnNwbGl0KCIgIiksb1sxXT09PXImJihpPWFbbCsiICIrb1swXV18fGFbIiogIitvWzBdXSkpe2k9PT0hMD9pPWFbbl06YVtuXSE9PSEwJiYocj1vWzBdLHUuc3BsaWNlKHMtLSwwLHIpKTticmVha31pZihpIT09ITApaWYoaSYmZVsidGhyb3dzIl0pdD1pKHQpO2Vsc2UgdHJ5e3Q9aSh0KX1jYXRjaChjKXtyZXR1cm57c3RhdGU6InBhcnNlcmVycm9yIixlcnJvcjppP2M6Ik5vIGNvbnZlcnNpb24gZnJvbSAiK2wrIiB0byAiK3J9fX1sPXJ9cmV0dXJue3N0YXRlOiJzdWNjZXNzIixkYXRhOnR9fWIuYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6InRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0In0sY29udGVudHM6e3NjcmlwdDovKD86amF2YXxlY21hKXNjcmlwdC99LGNvbnZlcnRlcnM6eyJ0ZXh0IHNjcmlwdCI6ZnVuY3Rpb24oZSl7cmV0dXJuIGIuZ2xvYmFsRXZhbChlKSxlfX19KSxiLmFqYXhQcmVmaWx0ZXIoInNjcmlwdCIsZnVuY3Rpb24oZSl7ZS5jYWNoZT09PXQmJihlLmNhY2hlPSExKSxlLmNyb3NzRG9tYWluJiYoZS50eXBlPSJHRVQiLGUuZ2xvYmFsPSExKX0pLGIuYWpheFRyYW5zcG9ydCgic2NyaXB0IixmdW5jdGlvbihlKXtpZihlLmNyb3NzRG9tYWluKXt2YXIgbixyPW8uaGVhZHx8YigiaGVhZCIpWzBdfHxvLmRvY3VtZW50RWxlbWVudDtyZXR1cm57c2VuZDpmdW5jdGlvbih0LGkpe249by5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSxuLmFzeW5jPSEwLGUuc2NyaXB0Q2hhcnNldCYmKG4uY2hhcnNldD1lLnNjcmlwdENoYXJzZXQpLG4uc3JjPWUudXJsLG4ub25sb2FkPW4ub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKGUsdCl7KHR8fCFuLnJlYWR5U3RhdGV8fC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qobi5yZWFkeVN0YXRlKSkmJihuLm9ubG9hZD1uLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLG4ucGFyZW50Tm9kZSYmbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pLG49bnVsbCx0fHxpKDIwMCwic3VjY2VzcyIpKX0sci5pbnNlcnRCZWZvcmUobixyLmZpcnN0Q2hpbGQpfSxhYm9ydDpmdW5jdGlvbigpe24mJm4ub25sb2FkKHQsITApfX19fSk7dmFyIE9uPVtdLEJuPS8oPSlcPyg/PSZ8JCl8XD9cPy87Yi5hamF4U2V0dXAoe2pzb25wOiJjYWxsYmFjayIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBlPU9uLnBvcCgpfHxiLmV4cGFuZG8rIl8iK3ZuKys7cmV0dXJuIHRoaXNbZV09ITAsZX19KSxiLmFqYXhQcmVmaWx0ZXIoImpzb24ganNvbnAiLGZ1bmN0aW9uKG4scixpKXt2YXIgbyxhLHMsdT1uLmpzb25wIT09ITEmJihCbi50ZXN0KG4udXJsKT8idXJsIjoic3RyaW5nIj09dHlwZW9mIG4uZGF0YSYmIShuLmNvbnRlbnRUeXBlfHwiIikuaW5kZXhPZigiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIikmJkJuLnRlc3Qobi5kYXRhKSYmImRhdGEiKTtyZXR1cm4gdXx8Impzb25wIj09PW4uZGF0YVR5cGVzWzBdPyhvPW4uanNvbnBDYWxsYmFjaz1iLmlzRnVuY3Rpb24obi5qc29ucENhbGxiYWNrKT9uLmpzb25wQ2FsbGJhY2soKTpuLmpzb25wQ2FsbGJhY2ssdT9uW3VdPW5bdV0ucmVwbGFjZShCbiwiJDEiK28pOm4uanNvbnAhPT0hMSYmKG4udXJsKz0oYm4udGVzdChuLnVybCk/IiYiOiI/Iikrbi5qc29ucCsiPSIrbyksbi5jb252ZXJ0ZXJzWyJzY3JpcHQganNvbiJdPWZ1bmN0aW9uKCl7cmV0dXJuIHN8fGIuZXJyb3IobysiIHdhcyBub3QgY2FsbGVkIiksc1swXX0sbi5kYXRhVHlwZXNbMF09Impzb24iLGE9ZVtvXSxlW29dPWZ1bmN0aW9uKCl7cz1hcmd1bWVudHN9LGkuYWx3YXlzKGZ1bmN0aW9uKCl7ZVtvXT1hLG5bb10mJihuLmpzb25wQ2FsbGJhY2s9ci5qc29ucENhbGxiYWNrLE9uLnB1c2gobykpLHMmJmIuaXNGdW5jdGlvbihhKSYmYShzWzBdKSxzPWE9dH0pLCJzY3JpcHQiKTp0fSk7dmFyIFBuLFJuLFduPTAsJG49ZS5BY3RpdmVYT2JqZWN0JiZmdW5jdGlvbigpe3ZhciBlO2ZvcihlIGluIFBuKVBuW2VdKHQsITApfTtmdW5jdGlvbiBJbigpe3RyeXtyZXR1cm4gbmV3IGUuWE1MSHR0cFJlcXVlc3R9Y2F0Y2godCl7fX1mdW5jdGlvbiB6bigpe3RyeXtyZXR1cm4gbmV3IGUuQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKX1jYXRjaCh0KXt9fWIuYWpheFNldHRpbmdzLnhocj1lLkFjdGl2ZVhPYmplY3Q/ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0xvY2FsJiZJbigpfHx6bigpfTpJbixSbj1iLmFqYXhTZXR0aW5ncy54aHIoKSxiLnN1cHBvcnQuY29ycz0hIVJuJiYid2l0aENyZWRlbnRpYWxzImluIFJuLFJuPWIuc3VwcG9ydC5hamF4PSEhUm4sUm4mJmIuYWpheFRyYW5zcG9ydChmdW5jdGlvbihuKXtpZighbi5jcm9zc0RvbWFpbnx8Yi5zdXBwb3J0LmNvcnMpe3ZhciByO3JldHVybntzZW5kOmZ1bmN0aW9uKGksbyl7dmFyIGEscyx1PW4ueGhyKCk7aWYobi51c2VybmFtZT91Lm9wZW4obi50eXBlLG4udXJsLG4uYXN5bmMsbi51c2VybmFtZSxuLnBhc3N3b3JkKTp1Lm9wZW4obi50eXBlLG4udXJsLG4uYXN5bmMpLG4ueGhyRmllbGRzKWZvcihzIGluIG4ueGhyRmllbGRzKXVbc109bi54aHJGaWVsZHNbc107bi5taW1lVHlwZSYmdS5vdmVycmlkZU1pbWVUeXBlJiZ1Lm92ZXJyaWRlTWltZVR5cGUobi5taW1lVHlwZSksbi5jcm9zc0RvbWFpbg==fHxpWyJYLVJlcXVlc3RlZC1XaXRoIl18fChpWyJYLVJlcXVlc3RlZC1XaXRoIl09IlhNTEh0dHBSZXF1ZXN0Iik7dHJ5e2ZvcihzIGluIGkpdS5zZXRSZXF1ZXN0SGVhZGVyKHMsaVtzXSl9Y2F0Y2gobCl7fXUuc2VuZChuLmhhc0NvbnRlbnQmJm4uZGF0YXx8bnVsbCkscj1mdW5jdGlvbihlLGkpe3ZhciBzLGwsYyxwO3RyeXtpZihyJiYoaXx8ND09PXUucmVhZHlTdGF0ZSkpaWYocj10LGEmJih1Lm9ucmVhZHlzdGF0ZWNoYW5nZT1iLm5vb3AsJG4mJmRlbGV0ZSBQblthXSksaSk0IT09dS5yZWFkeVN0YXRlJiZ1LmFib3J0KCk7ZWxzZXtwPXt9LHM9dS5zdGF0dXMsbD11LmdldEFsbFJlc3BvbnNlSGVhZGVycygpLCJzdHJpbmciPT10eXBlb2YgdS5yZXNwb25zZVRleHQmJihwLnRleHQ9dS5yZXNwb25zZVRleHQpO3RyeXtjPXUuc3RhdHVzVGV4dH1jYXRjaChmKXtjPSIifXN8fCFuLmlzTG9jYWx8fG4uY3Jvc3NEb21haW4/MTIyMz09PXMmJihzPTIwNCk6cz1wLnRleHQ/MjAwOjQwNH19Y2F0Y2goZCl7aXx8bygtMSxkKX1wJiZvKHMsYyxwLGwpfSxuLmFzeW5jPzQ9PT11LnJlYWR5U3RhdGU/c2V0VGltZW91dChyKTooYT0rK1duLCRuJiYoUG58fChQbj17fSxiKGUpLnVubG9hZCgkbikpLFBuW2FdPXIpLHUub25yZWFkeXN0YXRlY2hhbmdlPXIpOnIoKX0sYWJvcnQ6ZnVuY3Rpb24oKXtyJiZyKHQsITApfX19fSk7dmFyIFhuLFVuLFZuPS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxZbj1SZWdFeHAoIl4oPzooWystXSk9fCkoIit4KyIpKFthLXolXSopJCIsImkiKSxKbj0vcXVldWVIb29rcyQvLEduPVtucl0sUW49eyIqIjpbZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk9dGhpcy5jcmVhdGVUd2VlbihlLHQpLG89WW4uZXhlYyh0KSxhPWkuY3VyKCkscz0rYXx8MCx1PTEsbD0yMDtpZihvKXtpZihuPStvWzJdLHI9b1szXXx8KGIuY3NzTnVtYmVyW2VdPyIiOiJweCIpLCJweCIhPT1yJiZzKXtzPWIuY3NzKGkuZWxlbSxlLCEwKXx8bnx8MTtkbyB1PXV8fCIuNSIscy89dSxiLnN0eWxlKGkuZWxlbSxlLHMrcik7d2hpbGUodSE9PSh1PWkuY3VyKCkvYSkmJjEhPT11JiYtLWwpfWkudW5pdD1yLGkuc3RhcnQ9cyxpLmVuZD1vWzFdP3MrKG9bMV0rMSkqbjpufXJldHVybiBpfV19O2Z1bmN0aW9uIEtuKCl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtYbj10fSksWG49Yi5ub3coKX1mdW5jdGlvbiBabihlLHQpe2IuZWFjaCh0LGZ1bmN0aW9uKHQsbil7dmFyIHI9KFFuW3RdfHxbXSkuY29uY2F0KFFuWyIqIl0pLGk9MCxvPXIubGVuZ3RoO2Zvcig7bz5pO2krKylpZihyW2ldLmNhbGwoZSx0LG4pKXJldHVybn0pfWZ1bmN0aW9uIGVyKGUsdCxuKXt2YXIgcixpLG89MCxhPUduLmxlbmd0aCxzPWIuRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgdS5lbGVtfSksdT1mdW5jdGlvbigpe2lmKGkpcmV0dXJuITE7dmFyIHQ9WG58fEtuKCksbj1NYXRoLm1heCgwLGwuc3RhcnRUaW1lK2wuZHVyYXRpb24tdCkscj1uL2wuZHVyYXRpb258fDAsbz0xLXIsYT0wLHU9bC50d2VlbnMubGVuZ3RoO2Zvcig7dT5hO2ErKylsLnR3ZWVuc1thXS5ydW4obyk7cmV0dXJuIHMubm90aWZ5V2l0aChlLFtsLG8sbl0pLDE+byYmdT9uOihzLnJlc29sdmVXaXRoKGUsW2xdKSwhMSl9LGw9cy5wcm9taXNlKHtlbGVtOmUscHJvcHM6Yi5leHRlbmQoe30sdCksb3B0czpiLmV4dGVuZCghMCx7c3BlY2lhbEVhc2luZzp7fX0sbiksb3JpZ2luYWxQcm9wZXJ0aWVzOnQsb3JpZ2luYWxPcHRpb25zOm4sc3RhcnRUaW1lOlhufHxLbigpLGR1cmF0aW9uOm4uZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKHQsbil7dmFyIHI9Yi5Ud2VlbihlLGwub3B0cyx0LG4sbC5vcHRzLnNwZWNpYWxFYXNpbmdbdF18fGwub3B0cy5lYXNpbmcpO3JldHVybiBsLnR3ZWVucy5wdXNoKHIpLHJ9LHN0b3A6ZnVuY3Rpb24odCl7dmFyIG49MCxyPXQ/bC50d2VlbnMubGVuZ3RoOjA7aWYoaSlyZXR1cm4gdGhpcztmb3IoaT0hMDtyPm47bisrKWwudHdlZW5zW25dLnJ1bigxKTtyZXR1cm4gdD9zLnJlc29sdmVXaXRoKGUsW2wsdF0pOnMucmVqZWN0V2l0aChlLFtsLHRdKSx0aGlzfX0pLGM9bC5wcm9wcztmb3IodHIoYyxsLm9wdHMuc3BlY2lhbEVhc2luZyk7YT5vO28rKylpZihyPUduW29dLmNhbGwobCxlLGMsbC5vcHRzKSlyZXR1cm4gcjtyZXR1cm4gWm4obCxjKSxiLmlzRnVuY3Rpb24obC5vcHRzLnN0YXJ0KSYmbC5vcHRzLnN0YXJ0LmNhbGwoZSxsKSxiLmZ4LnRpbWVyKGIuZXh0ZW5kKHUse2VsZW06ZSxhbmltOmwscXVldWU6bC5vcHRzLnF1ZXVlfSkpLGwucHJvZ3Jlc3MobC5vcHRzLnByb2dyZXNzKS5kb25lKGwub3B0cy5kb25lLGwub3B0cy5jb21wbGV0ZSkuZmFpbChsLm9wdHMuZmFpbCkuYWx3YXlzKGwub3B0cy5hbHdheXMpfWZ1bmN0aW9uIHRyKGUsdCl7dmFyIG4scixpLG8sYTtmb3IoaSBpbiBlKWlmKHI9Yi5jYW1lbENhc2UoaSksbz10W3JdLG49ZVtpXSxiLmlzQXJyYXkobikmJihvPW5bMV0sbj1lW2ldPW5bMF0pLGkhPT1yJiYoZVtyXT1uLGRlbGV0ZSBlW2ldKSxhPWIuY3NzSG9va3Nbcl0sYSYmImV4cGFuZCJpbiBhKXtuPWEuZXhwYW5kKG4pLGRlbGV0ZSBlW3JdO2ZvcihpIGluIG4paSBpbiBlfHwoZVtpXT1uW2ldLHRbaV09byl9ZWxzZSB0W3JdPW99Yi5BbmltYXRpb249Yi5leHRlbmQoZXIse3R3ZWVuZXI6ZnVuY3Rpb24oZSx0KXtiLmlzRnVuY3Rpb24oZSk/KHQ9ZSxlPVsiKiJdKTplPWUuc3BsaXQoIiAiKTt2YXIgbixyPTAsaT1lLmxlbmd0aDtmb3IoO2k+cjtyKyspbj1lW3JdLFFuW25dPVFuW25dfHxbXSxRbltuXS51bnNoaWZ0KHQpfSxwcmVmaWx0ZXI6ZnVuY3Rpb24oZSx0KXt0P0duLnVuc2hpZnQoZSk6R24ucHVzaChlKX19KTtmdW5jdGlvbiBucihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYyxwLGY9dGhpcyxkPWUuc3R5bGUsaD17fSxnPVtdLG09ZS5ub2RlVHlwZSYmbm4oZSk7bi5xdWV1ZXx8KGM9Yi5fcXVldWVIb29rcyhlLCJmeCIpLG51bGw9PWMudW5xdWV1ZWQmJihjLnVucXVldWVkPTAscD1jLmVtcHR5LmZpcmUsYy5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7Yy51bnF1ZXVlZHx8cCgpfSksYy51bnF1ZXVlZCsrLGYuYWx3YXlzKGZ1bmN0aW9uKCl7Zi5hbHdheXMoZnVuY3Rpb24oKXtjLnVucXVldWVkLS0sYi5xdWV1ZShlLCJmeCIpLmxlbmd0aHx8Yy5lbXB0eS5maXJlKCl9KX0pKSwxPT09ZS5ub2RlVHlwZSYmKCJoZWlnaHQiaW4gdHx8IndpZHRoImluIHQpJiYobi5vdmVyZmxvdz1bZC5vdmVyZmxvdyxkLm92ZXJmbG93WCxkLm92ZXJmbG93WV0sImlubGluZSI9PT1iLmNzcyhlLCJkaXNwbGF5IikmJiJub25lIj09PWIuY3NzKGUsImZsb2F0IikmJihiLnN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCYmImlubGluZSIhPT11bihlLm5vZGVOYW1lKT9kLnpvb209MTpkLmRpc3BsYXk9ImlubGluZS1ibG9jayIpKSxuLm92ZXJmbG93JiYoZC5vdmVyZmxvdz0iaGlkZGVuIixiLnN1cHBvcnQuc2hyaW5rV3JhcEJsb2Nrc3x8Zi5hbHdheXMoZnVuY3Rpb24oKXtkLm92ZXJmbG93PW4ub3ZlcmZsb3dbMF0sZC5vdmVyZmxvd1g9bi5vdmVyZmxvd1sxXSxkLm92ZXJmbG93WT1uLm92ZXJmbG93WzJdfSkpO2ZvcihpIGluIHQpaWYoYT10W2ldLFZuLmV4ZWMoYSkpe2lmKGRlbGV0ZSB0W2ldLHU9dXx8InRvZ2dsZSI9PT1hLGE9PT0obT8iaGlkZSI6InNob3ciKSljb250aW51ZTtnLnB1c2goaSl9aWYobz1nLmxlbmd0aCl7cz1iLl9kYXRhKGUsImZ4c2hvdyIpfHxiLl9kYXRhKGUsImZ4c2hvdyIse30pLCJoaWRkZW4iaW4gcyYmKG09cy5oaWRkZW4pLHUmJihzLmhpZGRlbj0hbSksbT9iKGUpLnNob3coKTpmLmRvbmUoZnVuY3Rpb24oKXtiKGUpLmhpZGUoKX0pLGYuZG9uZShmdW5jdGlvbigpe3ZhciB0O2IuX3JlbW92ZURhdGEoZSwiZnhzaG93Iik7Zm9yKHQgaW4gaCliLnN0eWxlKGUsdCxoW3RdKX0pO2ZvcihpPTA7bz5pO2krKylyPWdbaV0sbD1mLmNyZWF0ZVR3ZWVuKHIsbT9zW3JdOjApLGhbcl09c1tyXXx8Yi5zdHlsZShlLHIpLHIgaW4gc3x8KHNbcl09bC5zdGFydCxtJiYobC5lbmQ9bC5zdGFydCxsLnN0YXJ0PSJ3aWR0aCI9PT1yfHwiaGVpZ2h0Ij09PXI/MTowKSl9fWZ1bmN0aQ==b24gcnIoZSx0LG4scixpKXtyZXR1cm4gbmV3IHJyLnByb3RvdHlwZS5pbml0KGUsdCxuLHIsaSl9Yi5Ud2Vlbj1ycixyci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnJyLGluaXQ6ZnVuY3Rpb24oZSx0LG4scixpLG8pe3RoaXMuZWxlbT1lLHRoaXMucHJvcD1uLHRoaXMuZWFzaW5nPWl8fCJzd2luZyIsdGhpcy5vcHRpb25zPXQsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPXIsdGhpcy51bml0PW98fChiLmNzc051bWJlcltuXT8iIjoicHgiKX0sY3VyOmZ1bmN0aW9uKCl7dmFyIGU9cnIucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIGUmJmUuZ2V0P2UuZ2V0KHRoaXMpOnJyLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihlKXt2YXIgdCxuPXJyLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiB0aGlzLnBvcz10PXRoaXMub3B0aW9ucy5kdXJhdGlvbj9iLmVhc2luZ1t0aGlzLmVhc2luZ10oZSx0aGlzLm9wdGlvbnMuZHVyYXRpb24qZSwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTplLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSp0K3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLG4mJm4uc2V0P24uc2V0KHRoaXMpOnJyLnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319LHJyLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZT1yci5wcm90b3R5cGUscnIucHJvcEhvb2tzPXtfZGVmYXVsdDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBudWxsPT1lLmVsZW1bZS5wcm9wXXx8ZS5lbGVtLnN0eWxlJiZudWxsIT1lLmVsZW0uc3R5bGVbZS5wcm9wXT8odD1iLmNzcyhlLmVsZW0sZS5wcm9wLCIiKSx0JiYiYXV0byIhPT10P3Q6MCk6ZS5lbGVtW2UucHJvcF19LHNldDpmdW5jdGlvbihlKXtiLmZ4LnN0ZXBbZS5wcm9wXT9iLmZ4LnN0ZXBbZS5wcm9wXShlKTplLmVsZW0uc3R5bGUmJihudWxsIT1lLmVsZW0uc3R5bGVbYi5jc3NQcm9wc1tlLnByb3BdXXx8Yi5jc3NIb29rc1tlLnByb3BdKT9iLnN0eWxlKGUuZWxlbSxlLnByb3AsZS5ub3crZS51bml0KTplLmVsZW1bZS5wcm9wXT1lLm5vd319fSxyci5wcm9wSG9va3Muc2Nyb2xsVG9wPXJyLnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24oZSl7ZS5lbGVtLm5vZGVUeXBlJiZlLmVsZW0ucGFyZW50Tm9kZSYmKGUuZWxlbVtlLnByb3BdPWUubm93KX19LGIuZWFjaChbInRvZ2dsZSIsInNob3ciLCJoaWRlIl0sZnVuY3Rpb24oZSx0KXt2YXIgbj1iLmZuW3RdO2IuZm5bdF09ZnVuY3Rpb24oZSxyLGkpe3JldHVybiBudWxsPT1lfHwiYm9vbGVhbiI9PXR5cGVvZiBlP24uYXBwbHkodGhpcyxhcmd1bWVudHMpOnRoaXMuYW5pbWF0ZShpcih0LCEwKSxlLHIsaSl9fSksYi5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5maWx0ZXIobm4pLmNzcygib3BhY2l0eSIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6dH0sZSxuLHIpfSxhbmltYXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpPWIuaXNFbXB0eU9iamVjdChlKSxvPWIuc3BlZWQodCxuLHIpLGE9ZnVuY3Rpb24oKXt2YXIgdD1lcih0aGlzLGIuZXh0ZW5kKHt9LGUpLG8pO2EuZmluaXNoPWZ1bmN0aW9uKCl7dC5zdG9wKCEwKX0sKGl8fGIuX2RhdGEodGhpcywiZmluaXNoIikpJiZ0LnN0b3AoITApfTtyZXR1cm4gYS5maW5pc2g9YSxpfHxvLnF1ZXVlPT09ITE/dGhpcy5lYWNoKGEpOnRoaXMucXVldWUoby5xdWV1ZSxhKX0sc3RvcDpmdW5jdGlvbihlLG4scil7dmFyIGk9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdG9wO2RlbGV0ZSBlLnN0b3AsdChyKX07cmV0dXJuInN0cmluZyIhPXR5cGVvZiBlJiYocj1uLG49ZSxlPXQpLG4mJmUhPT0hMSYmdGhpcy5xdWV1ZShlfHwiZngiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD0hMCxuPW51bGwhPWUmJmUrInF1ZXVlSG9va3MiLG89Yi50aW1lcnMsYT1iLl9kYXRhKHRoaXMpO2lmKG4pYVtuXSYmYVtuXS5zdG9wJiZpKGFbbl0pO2Vsc2UgZm9yKG4gaW4gYSlhW25dJiZhW25dLnN0b3AmJkpuLnRlc3QobikmJmkoYVtuXSk7Zm9yKG49by5sZW5ndGg7bi0tOylvW25dLmVsZW0hPT10aGlzfHxudWxsIT1lJiZvW25dLnF1ZXVlIT09ZXx8KG9bbl0uYW5pbS5zdG9wKHIpLHQ9ITEsby5zcGxpY2UobiwxKSk7KHR8fCFyKSYmYi5kZXF1ZXVlKHRoaXMsZSl9KX0sZmluaXNoOmZ1bmN0aW9uKGUpe3JldHVybiBlIT09ITEmJihlPWV8fCJmeCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0LG49Yi5fZGF0YSh0aGlzKSxyPW5bZSsicXVldWUiXSxpPW5bZSsicXVldWVIb29rcyJdLG89Yi50aW1lcnMsYT1yP3IubGVuZ3RoOjA7Zm9yKG4uZmluaXNoPSEwLGIucXVldWUodGhpcyxlLFtdKSxpJiZpLmN1ciYmaS5jdXIuZmluaXNoJiZpLmN1ci5maW5pc2guY2FsbCh0aGlzKSx0PW8ubGVuZ3RoO3QtLTspb1t0XS5lbGVtPT09dGhpcyYmb1t0XS5xdWV1ZT09PWUmJihvW3RdLmFuaW0uc3RvcCghMCksby5zcGxpY2UodCwxKSk7Zm9yKHQ9MDthPnQ7dCsrKXJbdF0mJnJbdF0uZmluaXNoJiZyW3RdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSBuLmZpbmlzaH0pfX0pO2Z1bmN0aW9uIGlyKGUsdCl7dmFyIG4scj17aGVpZ2h0OmV9LGk9MDtmb3IodD10PzE6MDs0Pmk7aSs9Mi10KW49WnRbaV0sclsibWFyZ2luIituXT1yWyJwYWRkaW5nIituXT1lO3JldHVybiB0JiYoci5vcGFjaXR5PXIud2lkdGg9ZSkscn1iLmVhY2goe3NsaWRlRG93bjppcigic2hvdyIpLHNsaWRlVXA6aXIoImhpZGUiKSxzbGlkZVRvZ2dsZTppcigidG9nZ2xlIiksZmFkZUluOntvcGFjaXR5OiJzaG93In0sZmFkZU91dDp7b3BhY2l0eToiaGlkZSJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6InRvZ2dsZSJ9fSxmdW5jdGlvbihlLHQpe2IuZm5bZV09ZnVuY3Rpb24oZSxuLHIpe3JldHVybiB0aGlzLmFuaW1hdGUodCxlLG4scil9fSksYi5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmIm9iamVjdCI9PXR5cGVvZiBlP2IuZXh0ZW5kKHt9LGUpOntjb21wbGV0ZTpufHwhbiYmdHx8Yi5pc0Z1bmN0aW9uKGUpJiZlLGR1cmF0aW9uOmUsZWFzaW5nOm4mJnR8fHQmJiFiLmlzRnVuY3Rpb24odCkmJnR9O3JldHVybiByLmR1cmF0aW9uPWIuZngub2ZmPzA6Im51bWJlciI9PXR5cGVvZiByLmR1cmF0aW9uP3IuZHVyYXRpb246ci5kdXJhdGlvbiBpbiBiLmZ4LnNwZWVkcz9iLmZ4LnNwZWVkc1tyLmR1cmF0aW9uXTpiLmZ4LnNwZWVkcy5fZGVmYXVsdCwobnVsbD09ci5xdWV1ZXx8ci5xdWV1ZT09PSEwKSYmKHIucXVldWU9ImZ4Iiksci5vbGQ9ci5jb21wbGV0ZSxyLmNvbXBsZXRlPWZ1bmN0aW9uKCl7Yi5pc0Z1bmN0aW9uKHIub2xkKSYmci5vbGQuY2FsbCh0aGlzKSxyLnF1ZXVlJiZiLmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0sYi5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sc3dpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuLjUtTWF0aC5jb3MoZSpNYXRoLlBJKS8yfX0sYi50aW1lcnM9W10sYi5meD1yci5wcm90b3R5cGUuaW5pdCxiLmZ4LnRpY2s9ZnVuY3Rpb24oKXt2YXIgZSxuPWIudGltZXJzLHI9MDtmb3IoWG49Yi5ub3coKTtuLmxlbmd0aD5yO3IrKyllPW5bcl0sZSgpfHxuW3JdIT09ZXx8bi5zcGxpY2Uoci0tLDEpO24ubGVuZ3RofHxiLmZ4LnN0b3AoKSxYbj10fSxiLmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe2UoKSYmYi50aW1lcnMucHVzaChlKSYmYi5meC5zdGFydCgpfSxiLmZ4LmludGVydmFsPTEzLGIuZnguc3RhcnQ9ZnVuY3Rpb24oKXtVbnx8KFVuPXNldEludGVydmFsKGIuZngudGljayxiLmZ4LmludGVydmFsKSl9LGIuZnguc3RvcD1mdW5jdGlvbigpe2NsZWFySW50ZXJ2YWwoVW4pLFVuPW51bGx9LGIuZnguc3BlZWRzPXtzbG93OjYwMCxmYXN0OjIwMCxfZGVmYXVsdDo0MDB9LGIuZnguc3RlcD17fSxiLmV4cHImJmIuZXhwci5maWx0ZXJzJiYoYi5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGIuZ3JlcChiLnRpbWVycyxmdW5jdGlvbih0KXtyZXR1cm4gZT09PXQuZWxlbX0pLmxlbmd0aH0pLGIuZm4ub2Zmcw==ZXQ9ZnVuY3Rpb24oZSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZT09PXQ/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24odCl7Yi5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsZSx0KX0pO3ZhciBuLHIsbz17dG9wOjAsbGVmdDowfSxhPXRoaXNbMF0scz1hJiZhLm93bmVyRG9jdW1lbnQ7aWYocylyZXR1cm4gbj1zLmRvY3VtZW50RWxlbWVudCxiLmNvbnRhaW5zKG4sYSk/KHR5cGVvZiBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCE9PWkmJihvPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLHI9b3Iocykse3RvcDpvLnRvcCsoci5wYWdlWU9mZnNldHx8bi5zY3JvbGxUb3ApLShuLmNsaWVudFRvcHx8MCksbGVmdDpvLmxlZnQrKHIucGFnZVhPZmZzZXR8fG4uc2Nyb2xsTGVmdCktKG4uY2xpZW50TGVmdHx8MCl9KTpvfSxiLm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1iLmNzcyhlLCJwb3NpdGlvbiIpOyJzdGF0aWMiPT09ciYmKGUuc3R5bGUucG9zaXRpb249InJlbGF0aXZlIik7dmFyIGk9YihlKSxvPWkub2Zmc2V0KCksYT1iLmNzcyhlLCJ0b3AiKSxzPWIuY3NzKGUsImxlZnQiKSx1PSgiYWJzb2x1dGUiPT09cnx8ImZpeGVkIj09PXIpJiZiLmluQXJyYXkoImF1dG8iLFthLHNdKT4tMSxsPXt9LGM9e30scCxmO3U/KGM9aS5wb3NpdGlvbigpLHA9Yy50b3AsZj1jLmxlZnQpOihwPXBhcnNlRmxvYXQoYSl8fDAsZj1wYXJzZUZsb2F0KHMpfHwwKSxiLmlzRnVuY3Rpb24odCkmJih0PXQuY2FsbChlLG4sbykpLG51bGwhPXQudG9wJiYobC50b3A9dC50b3Atby50b3ArcCksbnVsbCE9dC5sZWZ0JiYobC5sZWZ0PXQubGVmdC1vLmxlZnQrZiksInVzaW5nImluIHQ/dC51c2luZy5jYWxsKGUsbCk6aS5jc3MobCl9fSxiLmZuLmV4dGVuZCh7cG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgZSx0LG49e3RvcDowLGxlZnQ6MH0scj10aGlzWzBdO3JldHVybiJmaXhlZCI9PT1iLmNzcyhyLCJwb3NpdGlvbiIpP3Q9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooZT10aGlzLm9mZnNldFBhcmVudCgpLHQ9dGhpcy5vZmZzZXQoKSxiLm5vZGVOYW1lKGVbMF0sImh0bWwiKXx8KG49ZS5vZmZzZXQoKSksbi50b3ArPWIuY3NzKGVbMF0sImJvcmRlclRvcFdpZHRoIiwhMCksbi5sZWZ0Kz1iLmNzcyhlWzBdLCJib3JkZXJMZWZ0V2lkdGgiLCEwKSkse3RvcDp0LnRvcC1uLnRvcC1iLmNzcyhyLCJtYXJnaW5Ub3AiLCEwKSxsZWZ0OnQubGVmdC1uLmxlZnQtYi5jc3MociwibWFyZ2luTGVmdCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50fHxvLmRvY3VtZW50RWxlbWVudDt3aGlsZShlJiYhYi5ub2RlTmFtZShlLCJodG1sIikmJiJzdGF0aWMiPT09Yi5jc3MoZSwicG9zaXRpb24iKSllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxvLmRvY3VtZW50RWxlbWVudH0pfX0pLGIuZWFjaCh7c2Nyb2xsTGVmdDoicGFnZVhPZmZzZXQiLHNjcm9sbFRvcDoicGFnZVlPZmZzZXQifSxmdW5jdGlvbihlLG4pe3ZhciByPS9ZLy50ZXN0KG4pO2IuZm5bZV09ZnVuY3Rpb24oaSl7cmV0dXJuIGIuYWNjZXNzKHRoaXMsZnVuY3Rpb24oZSxpLG8pe3ZhciBhPW9yKGUpO3JldHVybiBvPT09dD9hP24gaW4gYT9hW25dOmEuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W2ldOmVbaV06KGE/YS5zY3JvbGxUbyhyP2IoYSkuc2Nyb2xsTGVmdCgpOm8scj9vOmIoYSkuc2Nyb2xsVG9wKCkpOmVbaV09byx0KX0sZSxpLGFyZ3VtZW50cy5sZW5ndGgsbnVsbCl9fSk7ZnVuY3Rpb24gb3IoZSl7cmV0dXJuIGIuaXNXaW5kb3coZSk/ZTo5PT09ZS5ub2RlVHlwZT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzohMX1iLmVhY2goe0hlaWdodDoiaGVpZ2h0IixXaWR0aDoid2lkdGgifSxmdW5jdGlvbihlLG4pe2IuZWFjaCh7cGFkZGluZzoiaW5uZXIiK2UsY29udGVudDpuLCIiOiJvdXRlciIrZX0sZnVuY3Rpb24ocixpKXtiLmZuW2ldPWZ1bmN0aW9uKGksbyl7dmFyIGE9YXJndW1lbnRzLmxlbmd0aCYmKHJ8fCJib29sZWFuIiE9dHlwZW9mIGkpLHM9cnx8KGk9PT0hMHx8bz09PSEwPyJtYXJnaW4iOiJib3JkZXIiKTtyZXR1cm4gYi5hY2Nlc3ModGhpcyxmdW5jdGlvbihuLHIsaSl7dmFyIG87cmV0dXJuIGIuaXNXaW5kb3cobik/bi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbImNsaWVudCIrZV06OT09PW4ubm9kZVR5cGU/KG89bi5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgobi5ib2R5WyJzY3JvbGwiK2VdLG9bInNjcm9sbCIrZV0sbi5ib2R5WyJvZmZzZXQiK2VdLG9bIm9mZnNldCIrZV0sb1siY2xpZW50IitlXSkpOmk9PT10P2IuY3NzKG4scixzKTpiLnN0eWxlKG4scixpLHMpfSxuLGE/aTp0LGEsbnVsbCl9fSl9KSxlLmpRdWVyeT1lLiQ9YiwiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUuYW1kLmpRdWVyeSYmZGVmaW5lKCJqcXVlcnkiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIGJ9KX0pKHdpbmRvdyk7</content>
    <filesize>92629</filesize>
  </attachment>
  <attachment>
    <filename>porthole.js</filename>
    <author>XWiki.Admin</author>
    <date>1394862202000</date>
    <version>1.3</version>
    <comment/>
    <content>LyoKICAgIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIFRlcm5hcnkgTGFicy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KCiAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5CiAgICBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAogICAgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwogICAgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbAogICAgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCiAgICBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKICAgIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluCiAgICBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KCiAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgogICAgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCiAgICBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKICAgIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCiAgICBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOCiAgICBUSEUgU09GVFdBUkUuCiovCgovKgojIFdlYnNlcXVlbmNlZGlhZ3JhbXMuY29tCnBhcnRpY2lwYW50IGFiYy5jb20KcGFydGljaXBhbnQgImlGcmFtZSBwcm94eSB4eXouY29tIgpwYXJ0aWNpcGFudCAiaUZyYW1lIHByb3h5IGFiYy5jb20iCnBhcnRpY2lwYW50ICJpRnJhbWUgeHl6LmNvbSIKYWJjLmNvbS0+aUZyYW1lIHByb3h5IHh5ei5jb206IHBvc3RNZXNzYWdlKGRhdGEsIHRhcmdldE9yaWdpbikKbm90ZSBsZWZ0IG9mICJpRnJhbWUgcHJveHkgeHl6LmNvbSI6IFNldCB1cmwgZnJhZ21lbnQgYW5kIGNoYW5nZSBzaXplCmlGcmFtZSBwcm94eSB4eXouY29tLT5pRnJhbWUgcHJveHkgeHl6LmNvbTogb25SZXNpemUgRXZlbnQKbm90ZSByaWdodCBvZiAiaUZyYW1lIHByb3h5IHh5ei5jb20iOiByZWFkIHVybCBmcmFnbWVudAppRnJhbWUgcHJveHkgeHl6LmNvbS0+aUZyYW1lIHh5ei5jb206IGZvcndhcmRNZXNzYWdlRXZlbnQoZXZlbnQpCmlGcmFtZSB4eXouY29tLT5pRnJhbWUgcHJveHkgYWJjLmNvbTogcG9zdE1lc3NhZ2UoZGF0YSwgdGFyZ2V0T3JpZ2luKQpub3RlIHJpZ2h0IG9mICJpRnJhbWUgcHJveHkgYWJjLmNvbSI6IFNldCB1cmwgZnJhZ21lbnQgYW5kIGNoYW5nZSBzaXplCmlGcmFtZSBwcm94eSBhYmMuY29tLT5pRnJhbWUgcHJveHkgYWJjLmNvbTogb25SZXNpemUgRXZlbnQKbm90ZSByaWdodCBvZiAiaUZyYW1lIHByb3h5IGFiYy5jb20iOiByZWFkIHVybCBmcmFnbWVudAppRnJhbWUgcHJveHkgYWJjLmNvbS0+YWJjLmNvbTogZm9yd2FyZE1lc3NhZ2VFdmVudChldmVudCkKKi8KCi8qIFNpbXBsZSBKYXZhU2NyaXB0IEluaGVyaXRhbmNlCiAqIEJ5IEpvaG4gUmVzaWcgaHR0cDovL2Vqb2huLm9yZy8KICogTUlUIExpY2Vuc2VkLgogKi8KLy8gSW5zcGlyZWQgYnkgYmFzZTIgYW5kIFByb3RvdHlwZQooZnVuY3Rpb24oKXsKICB2YXIgaW5pdGlhbGl6aW5nID0gZmFsc2UsIGZuVGVzdCA9IC94eXovLnRlc3QoZnVuY3Rpb24oKXt4eXo7fSkgPyAvXGJfc3VwZXJcYi8gOiAvLiovOwogIC8vIFRoZSBiYXNlIENsYXNzIGltcGxlbWVudGF0aW9uIChkb2VzIG5vdGhpbmcpCiAgdGhpcy5Qb3J0aG9sZUNsYXNzID0gZnVuY3Rpb24oKXt9OwogIAogIC8vIENyZWF0ZSBhIG5ldyBDbGFzcyB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBjbGFzcwogIFBvcnRob2xlQ2xhc3MuZXh0ZW5kID0gZnVuY3Rpb24ocHJvcCkgewogICAgdmFyIF9zdXBlciA9IHRoaXMucHJvdG90eXBlOwogICAgCiAgICAvLyBJbnN0YW50aWF0ZSBhIGJhc2UgY2xhc3MgKGJ1dCBvbmx5IGNyZWF0ZSB0aGUgaW5zdGFuY2UsCiAgICAvLyBkb24ndCBydW4gdGhlIGluaXQgY29uc3RydWN0b3IpCiAgICBpbml0aWFsaXppbmcgPSB0cnVlOwogICAgdmFyIHByb3RvdHlwZSA9IG5ldyB0aGlzKCk7CiAgICBpbml0aWFsaXppbmcgPSBmYWxzZTsKICAgIAogICAgLy8gQ29weSB0aGUgcHJvcGVydGllcyBvdmVyIG9udG8gdGhlIG5ldyBwcm90b3R5cGUKICAgIGZvciAodmFyIG5hbWUgaW4gcHJvcCkgewogICAgICAvLyBDaGVjayBpZiB3ZSdyZSBvdmVyd3JpdGluZyBhbiBleGlzdGluZyBmdW5jdGlvbgogICAgICBwcm90b3R5cGVbbmFtZV0gPSB0eXBlb2YgcHJvcFtuYW1lXSA9PSAiZnVuY3Rpb24iICYmIAogICAgICAgIHR5cGVvZiBfc3VwZXJbbmFtZV0gPT0gImZ1bmN0aW9uIiAmJiBmblRlc3QudGVzdChwcm9wW25hbWVdKSA/CiAgICAgICAgKGZ1bmN0aW9uKG5hbWUsIGZuKXsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHRtcCA9IHRoaXMuX3N1cGVyOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQWRkIGEgbmV3IC5fc3VwZXIoKSBtZXRob2QgdGhhdCBpcyB0aGUgc2FtZSBtZXRob2QKICAgICAgICAgICAgLy8gYnV0IG9uIHRoZSBzdXBlci1jbGFzcwogICAgICAgICAgICB0aGlzLl9zdXBlciA9IF9zdXBlcltuYW1lXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFRoZSBtZXRob2Qgb25seSBuZWVkIHRvIGJlIGJvdW5kIHRlbXBvcmFyaWx5LCBzbyB3ZQogICAgICAgICAgICAvLyByZW1vdmUgaXQgd2hlbiB3ZSdyZSBkb25lIGV4ZWN1dGluZwogICAgICAgICAgICB2YXIgcmV0ID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsgICAgICAgIAogICAgICAgICAgICB0aGlzLl9zdXBlciA9IHRtcDsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICB9OwogICAgICAgIH0pKG5hbWUsIHByb3BbbmFtZV0pIDoKICAgICAgICBwcm9wW25hbWVdOwogICAgfQogICAgCiAgICAvLyBUaGUgZHVtbXkgY2xhc3MgY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIFBvcnRob2xlQ2xhc3MoKSB7CiAgICAgIC8vIEFsbCBjb25zdHJ1Y3Rpb24gaXMgYWN0dWFsbHkgZG9uZSBpbiB0aGUgaW5pdCBtZXRob2QKICAgICAgaWYgKCAhaW5pdGlhbGl6aW5nICYmIHRoaXMuaW5pdCApCiAgICAgICAgdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CiAgICAKICAgIC8vIFBvcHVsYXRlIG91ciBjb25zdHJ1Y3RlZCBwcm90b3R5cGUgb2JqZWN0CiAgICBQb3J0aG9sZUNsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTsKICAgIAogICAgLy8gRW5mb3JjZSB0aGUgY29uc3RydWN0b3IgdG8gYmUgd2hhdCB3ZSBleHBlY3QKICAgIFBvcnRob2xlQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9ydGhvbGVDbGFzczsKCiAgICAvLyBBbmQgbWFrZSB0aGlzIGNsYXNzIGV4dGVuZGFibGUKICAgIFBvcnRob2xlQ2xhc3MuZXh0ZW5kID0gYXJndW1lbnRzLmNhbGxlZTsKICAgIAogICAgcmV0dXJuIFBvcnRob2xlQ2xhc3M7CiAgfTsKfSkoKTsKCihmdW5jdGlvbiAod2luZG93KSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgLyoqCiAgICAgKiBAb3ZlcnZpZXcgUG9ydGhvbGUsIEphdmFTY3JpcHQgTGlicmFyeSBmb3IgU2VjdXJlIENyb3NzIERvbWFpbg==IGlGcmFtZSBDb21tdW5pY2F0aW9uLgogICAgICogQGF1dGhvciA8YSBocmVmPSJtYWlsdG86Z2Vvcmdlc0B0ZXJuYXJ5bGFicy5jb20iPkdlb3JnZXMgQXViZXJnZXI8L2E+CiAgICAgKiBAY29weXJpZ2h0IDIwMTEtMjAxMiBUZXJuYXJ5IExhYnMsIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAgICAgKgogICAgICogTmFtZXNwYWNlIGZvciBQb3J0aG9sZQogICAgICogQG1vZHVsZSBQb3J0aG9sZQogICAgICovCiAgICB2YXIgUG9ydGhvbGUgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogVXRpbGl0eSBmdW5jdGlvbiB0byB0cmFjZSB0byBjb25zb2xlCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICB0cmFjZTogZnVuY3Rpb24ocykgewogICAgICAgICAgICBpZiAod2luZG93Wydjb25zb2xlJ10gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKCdQb3J0aG9sZTogJyArIHMpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBzZW5kIGVycm9ycyB0byBjb25zb2xlCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICBlcnJvcjogZnVuY3Rpb24ocykgewogICAgICAgICAgICBpZiAod2luZG93Wydjb25zb2xlJ10gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoJ1BvcnRob2xlOiAnICsgcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQGNsYXNzCiAgICAgKiBAY2xhc3NkZXNjIFByb3h5IHdpbmRvdyBvYmplY3QgdG8gcG9zdCBtZXNzYWdlIHRvIHRhcmdldCB3aW5kb3cKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm94eUlGcmFtZVVybCAtIEZ1bGx5IHF1YWxpZmllZCB1cmwgdG8gcHJveHkgaWZyYW1lCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0V2luZG93TmFtZSAtIE5hbWUgb2YgdGhlIHByb3h5IGlmcmFtZSB3aW5kb3cKICAgICAqLwogICAgUG9ydGhvbGUuV2luZG93UHJveHkgPSBmdW5jdGlvbigpe307CgogICAgUG9ydGhvbGUuV2luZG93UHJveHkucHJvdG90eXBlID0gewogICAgICAgIC8qKgogICAgICAgICAqIFBvc3QgYSBtZXNzYWdlIHRvIHRoZSB0YXJnZXQgd2luZG93IG9ubHkgaWYgdGhlIGNvbnRlbnQgY29tZXMgZnJvbSB0aGUgdGFyZ2V0IG9yaWdpbi4KICAgICAgICAgKiA8Y29kZT50YXJnZXRPcmlnaW48L2NvZGU+IGNhbiBiZSBhIHVybCBvciAqCiAgICAgICAgICogQHB1YmxpYwogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUGF5bG9hZAogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0YXJnZXRPcmlnaW4KICAgICAgICAgKi8KICAgICAgICBwb3N0OiBmdW5jdGlvbihkYXRhLCB0YXJnZXRPcmlnaW4pIHt9LAogICAgICAgIC8qKgogICAgICAgICAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byByZWNlaXZlIG1lc3NhZ2VzLgogICAgICAgICAqIEBwdWJsaWMKICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBldmVudExpc3RlbmVyQ2FsbGJhY2sKICAgICAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGV2ZW50TGlzdGVuZXJDYWxsYmFjawogICAgICAgICAqLwogICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKGYpIHt9LAogICAgICAgIC8qKgogICAgICAgICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lci4KICAgICAgICAgKiBAcHVibGljCiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXZlbnRMaXN0ZW5lckNhbGxiYWNrCiAgICAgICAgICovCiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oZikge30KICAgIH07CgogICAgUG9ydGhvbGUuV2luZG93UHJveHlCYXNlID0gUG9ydGhvbGVDbGFzcy5leHRlbmQoewogICAgICAgIGluaXQ6IGZ1bmN0aW9uKHRhcmdldFdpbmRvd05hbWUpIHsKICAgICAgICAgICAgaWYgKHRhcmdldFdpbmRvd05hbWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdGFyZ2V0V2luZG93TmFtZSA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMudGFyZ2V0V2luZG93TmFtZSA9IHRhcmdldFdpbmRvd05hbWU7CiAgICAgICAgICAgIHRoaXMub3JpZ2luID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0OwogICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gW107CiAgICAgICAgfSwKCiAgICAgICAgZ2V0VGFyZ2V0V2luZG93TmFtZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldFdpbmRvd05hbWU7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0T3JpZ2luOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIExvb2t1cCB3aW5kb3cgb2JqZWN0IGJhc2VkIG9uIHRhcmdldCB3aW5kb3cgbmFtZQogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSB0YXJnZXRXaW5kb3cKICAgICAgICAgKi8KICAgICAgICBnZXRUYXJnZXRXaW5kb3c6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gUG9ydGhvbGUuV2luZG93UHJveHkuZ2V0VGFyZ2V0V2luZG93KHRoaXMudGFyZ2V0V2luZG93TmFtZSk7CiAgICAgICAgfSwKCiAgICAgICAgcG9zdDogZnVuY3Rpb24oZGF0YSwgdGFyZ2V0T3JpZ2luKSB7CiAgICAgICAgICAgIGlmICh0YXJnZXRPcmlnaW4gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdGFyZ2V0T3JpZ2luID0gJyonOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hNZXNzYWdlKHsKICAgICAgICAgICAgICAgICdkYXRhJyA6IGRhdGEsCiAgICAgICAgICAgICAgICAnc291cmNlT3JpZ2luJyA6IHRoaXMuZ2V0T3JpZ2luKCksCiAgICAgICAgICAgICAgICAndGFyZ2V0T3JpZ2luJyA6IHRhcmdldE9yaWdpbiwKICAgICAgICAgICAgICAgICdzb3VyY2VXaW5kb3dOYW1lJyA6IHdpbmRvdy5uYW1lLAogICAgICAgICAgICAgICAgJ3RhcmdldFdpbmRvd05hbWUnIDogdGhpcy5nZXRUYXJnZXRXaW5kb3dOYW1lKCkKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oZikgewogICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goZik7CiAgICAgICAgICAgIHJldHVybiBmOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgICAgdmFyIGluZGV4OwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmV2ZW50TGlzdGVuZXJzLmluZGV4T2YoZik7CiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IFtdOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgdmFyIGk7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmV2ZW50TGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnNbaV0oZXZlbnQpOwogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCiAgICAvKioKICAgICAqIExlZ2FjeSBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIHByb3h5IHdpbmRvdyBvYmplY3QgdG8gcG9zdCBtZXNzYWdlIHRvIHRhcmdldCB3aW5kb3cKICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQGNvbnN0cnVjdG9yCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJveHlJRnJhbWVVcmwgLSBGdWxseSBxdWFsaWZpZWQgdXJsIHRvIHByb3h5IGlmcmFtZQogICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldFdpbmRvd05hbWUgLSBOYW1lIG9mIHRoZSBwcm94eSBpZnJhbQ==ZSB3aW5kb3cKICAgICAqLwogICAgUG9ydGhvbGUuV2luZG93UHJveHlMZWdhY3kgPSBQb3J0aG9sZS5XaW5kb3dQcm94eUJhc2UuZXh0ZW5kKHsKICAgICAgICBpbml0OiBmdW5jdGlvbihwcm94eUlGcmFtZVVybCwgdGFyZ2V0V2luZG93TmFtZSkgewogICAgICAgICAgICB0aGlzLl9zdXBlcih0YXJnZXRXaW5kb3dOYW1lKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChwcm94eUlGcmFtZVVybCAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGhpcy5wcm94eUlGcmFtZU5hbWUgPSB0aGlzLnRhcmdldFdpbmRvd05hbWUgKyAnUHJveHlJRnJhbWUnOwogICAgICAgICAgICAgICAgdGhpcy5wcm94eUlGcmFtZUxvY2F0aW9uID0gcHJveHlJRnJhbWVVcmw7CgogICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBwcm94eSBpRnJhbWUgYW5kIGFkZCB0byBkb20KICAgICAgICAgICAgICAgIHRoaXMucHJveHlJRnJhbWVFbGVtZW50ID0gdGhpcy5jcmVhdGVJRnJhbWVQcm94eSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gV29uJ3QgYmUgYWJsZSB0byBzZW5kIG1lc3NhZ2VzCiAgICAgICAgICAgICAgICB0aGlzLnByb3h5SUZyYW1lRWxlbWVudCA9IG51bGw7CiAgICAgICAgICAgICAgICB0aHJvdyAgbmV3IEVycm9yKCJwcm94eUlGcmFtZVVybCBjYW4ndCBiZSBudWxsIik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGUgYW4gaWZyYW1lIGFuZCBsb2FkIHRoZSBwcm94eQogICAgICAgICAqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcmV0dXJucyBpZnJhbWUKICAgICAgICAgKi8KICAgICAgICBjcmVhdGVJRnJhbWVQcm94eTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTsKCiAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5wcm94eUlGcmFtZU5hbWUpOwogICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCduYW1lJywgdGhpcy5wcm94eUlGcmFtZU5hbWUpOwogICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzcmMnLCB0aGlzLnByb3h5SUZyYW1lTG9jYXRpb24pOwogICAgICAgICAgICAvLyBJRSBuZWVkcyB0aGlzIG90aGVyd2lzZSByZXNpemUgZXZlbnQgaXMgbm90IGZpcmVkCiAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2ZyYW1lQm9yZGVyJywgJzEnKTsKICAgICAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc2Nyb2xsaW5nJywgJ2F1dG8nKTsKICAgICAgICAgICAgLy8gTmVlZCBhIGNlcnRhaW4gc2l6ZSBvdGhlcndpc2UgSUU3IGRvZXMgbm90IGZpcmUgcmVzaXplIGV2ZW50CiAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgMzApOwogICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAzMCk7CiAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogLTEwMHB4OyB0b3A6MHB4OycpOwogICAgICAgICAgICAvLyBJRSBuZWVkcyB0aGlzIGJlY2F1c2Ugc2V0dGluZyBzdHlsZSBhdHRyaWJ1dGUgaXMgYnJva2VuLiBObyByZWFsbHkuCiAgICAgICAgICAgIGlmIChpZnJhbWUuc3R5bGUuc2V0QXR0cmlidXRlKSB7CiAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUuc2V0QXR0cmlidXRlKCdjc3NUZXh0JywgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogLTEwMHB4OyB0b3A6MHB4OycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTsKICAgICAgICAgICAgcmV0dXJuIGlmcmFtZTsKICAgICAgICB9LAoKICAgICAgICBkaXNwYXRjaE1lc3NhZ2U6IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgICAgICAgICAgdmFyIGVuY29kZSA9IHdpbmRvdy5lbmNvZGVVUklDb21wb25lbnQ7CgogICAgICAgICAgICBpZiAodGhpcy5wcm94eUlGcmFtZUVsZW1lbnQpIHsKICAgICAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnByb3h5SUZyYW1lTG9jYXRpb24gKyAnIycgKyBlbmNvZGUoUG9ydGhvbGUuV2luZG93UHJveHkuc2VyaWFsaXplKG1lc3NhZ2UpKTsKICAgICAgICAgICAgICAgIHRoaXMucHJveHlJRnJhbWVFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKTsKICAgICAgICAgICAgICAgIHRoaXMucHJveHlJRnJhbWVFbGVtZW50LmhlaWdodCA9IHRoaXMucHJveHlJRnJhbWVFbGVtZW50LmhlaWdodCA+IDUwID8gNTAgOiAxMDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCiAgICAvKioKICAgICAqIEltcGxlbWVudGF0aW9uIGZvciBtb2Rlcm4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0cyBpdAogICAgICovCiAgICBQb3J0aG9sZS5XaW5kb3dQcm94eUhUTUw1ID0gUG9ydGhvbGUuV2luZG93UHJveHlCYXNlLmV4dGVuZCh7CiAgICAgICAgaW5pdDogZnVuY3Rpb24ocHJveHlJRnJhbWVVcmwsIHRhcmdldFdpbmRvd05hbWUpIHsKICAgICAgICAgICAgdGhpcy5fc3VwZXIodGFyZ2V0V2luZG93TmFtZSk7CiAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lckNhbGxiYWNrID0gbnVsbDsKICAgICAgICB9LAoKICAgICAgICBkaXNwYXRjaE1lc3NhZ2U6IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgICAgICAgICAgdGhpcy5nZXRUYXJnZXRXaW5kb3coKS5wb3N0TWVzc2FnZShQb3J0aG9sZS5XaW5kb3dQcm94eS5zZXJpYWxpemUobWVzc2FnZSksIG1lc3NhZ2UudGFyZ2V0T3JpZ2luKTsKICAgICAgICB9LAoKICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbihmKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50TGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyQ2FsbGJhY2sgPSBmdW5jdGlvbihldmVudCkgeyBzZWxmLmV2ZW50TGlzdGVuZXIoc2VsZiwgZXZlbnQpOyB9OwogICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmV2ZW50TGlzdGVuZXJDYWxsYmFjaywgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdXBlcihmKTsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbihmKSB7CiAgICAgICAgICAgIHRoaXMuX3N1cGVyKGYpOwoKICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuZXZlbnRMaXN0ZW5lckNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lckNhbGxiYWNrID0gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKHNlbGYsIG5hdGl2ZUV2ZW50KSB7CiAgICAgICAgICAgIHZhciBkYXRhID0gUG9ydGhvbGUuV2luZG93UHJveHkudW5zZXJpYWxpemUobmF0aXZlRXZlbnQuZGF0YSk7CiAgICAgICAgICAgIGlmIChkYXRhICYmIChzZWxmLnRhcmdldFdpbmRvd05hbWUgPT0gJycgfHwgZGF0YS5zb3VyY2VXaW5kb3dOYW1lID09IHNlbGYudGFyZ2V0V2luZG93TmFtZSkpIHsKICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChuZXcgUG9ydGhvbGUuTWVzc2FnZUV2ZW50KGRhdGEuZGF0YSwgbmF0aXZlRXZlbnQub3JpZ2luLCBzZWxmKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCiAgICBpZiAodHlwZW9mIHdpbmRvdy5wb3N0TWVzc2FnZSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIFBvcnRob2xlLnRyYWNlKCdVc2luZyBsZWdhY3kgYnJvd3NlciBzdXBwb3J0Jyk7CiAgICAgICAgUG9ydGhvbGUuV2luZG93UHJveHkgPSBQb3J0aG9sZS5XaW5kb3dQcm94eUxlZ2FjeS5leHRlbmQoe30pOwogICAgfSBlbHNlIHsKICAgICAgICBQb3J0aG9sZS50cmFjZSgnVXNpbmcgYnVpbHQtaW4gYnJvd3NlciBzdXBwb3J0Jyk7CiAgICAgICAgUG9ydGhvbA==ZS5XaW5kb3dQcm94eSA9IFBvcnRob2xlLldpbmRvd1Byb3h5SFRNTDUuZXh0ZW5kKHt9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFNlcmlhbGl6ZSBhbiBvYmplY3QgdXNpbmcgSlNPTi5zdHJpbmdpZnkKICAgICAqCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gYmUgc2VyaWFsaXplZAogICAgICogQHJldHVybiB7U3RyaW5nfQogICAgICovCiAgICBQb3J0aG9sZS5XaW5kb3dQcm94eS5zZXJpYWxpemUgPSBmdW5jdGlvbihvYmopIHsKICAgICAgICBpZiAodHlwZW9mIEpTT04gPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9ydGhvbGUgc2VyaWFsaXphdGlvbiBkZXBlbmRzIG9uIEpTT04hJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBVbnNlcmlhbGl6ZSB1c2luZyBKU09OLnBhcnNlCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgU2VyaWFsaXphdGlvbgogICAgICogQHJldHVybiB7T2JqZWN0fQogICAgICovCiAgICBQb3J0aG9sZS5XaW5kb3dQcm94eS51bnNlcmlhbGl6ZSA9ICBmdW5jdGlvbih0ZXh0KSB7CiAgICAgICAgaWYgKHR5cGVvZiBKU09OID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BvcnRob2xlIHVuc2VyaWFsaXphdGlvbiBkZXBlbmRlbnMgb24gSlNPTiEnKTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHRleHQpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4ganNvbjsKICAgIH07CgogICAgUG9ydGhvbGUuV2luZG93UHJveHkuZ2V0VGFyZ2V0V2luZG93ID0gZnVuY3Rpb24odGFyZ2V0V2luZG93TmFtZSkgewogICAgICAgIGlmICh0YXJnZXRXaW5kb3dOYW1lID09PSAnJykgewogICAgICAgICAgICByZXR1cm4gdG9wOwogICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0V2luZG93TmFtZSA9PT0gJ3RvcCcgfHwgdGFyZ2V0V2luZG93TmFtZSA9PT0gJ3BhcmVudCcpIHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvd1t0YXJnZXRXaW5kb3dOYW1lXTsKICAgICAgICB9IAogICAgICAgIHJldHVybiBwYXJlbnQuZnJhbWVzW3RhcmdldFdpbmRvd05hbWVdOwogICAgfTsKCiAgICAvKioKICAgICAqIEBjbGFzc2Rlc2MgRXZlbnQgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byByZWdpc3RlcmVkIGV2ZW50IGhhbmRsZXJzCiAgICAgKiBAY2xhc3MKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luIC0gdXJsIG9mIHdpbmRvdyBzZW5kaW5nIHRoZSBtZXNzYWdlCiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIC0gd2luZG93IG9iamVjdCBzZW5kaW5nIHRoZSBtZXNzYWdlCiAgICAgKi8KICAgIFBvcnRob2xlLk1lc3NhZ2VFdmVudCA9IGZ1bmN0aW9uIE1lc3NhZ2VFdmVudChkYXRhLCBvcmlnaW4sIHNvdXJjZSkgewogICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7CiAgICAgICAgdGhpcy5vcmlnaW4gPSBvcmlnaW47CiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7CiAgICB9OwoKICAgIC8qKgogICAgICogQGNsYXNzZGVzYyBEaXNwYXRjaGVyIG9iamVjdCB0byByZWxheSBtZXNzYWdlcy4KICAgICAqIEBwdWJsaWMKICAgICAqIEBjb25zdHJ1Y3RvcgogICAgICovCiAgICBQb3J0aG9sZS5XaW5kb3dQcm94eURpc3BhdGNoZXIgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogRm9yd2FyZCBhIG1lc3NhZ2UgZXZlbnQgdG8gdGhlIHRhcmdldCB3aW5kb3cKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIGZvcndhcmRNZXNzYWdlRXZlbnQ6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIG1lc3NhZ2UsCiAgICAgICAgICAgICAgICBkZWNvZGUgPSB3aW5kb3cuZGVjb2RlVVJJQ29tcG9uZW50LAogICAgICAgICAgICAgICAgdGFyZ2V0V2luZG93LAogICAgICAgICAgICAgICAgd2luZG93UHJveHk7CgogICAgICAgICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24uaGFzaC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAvLyBFYXQgdGhlIGhhc2ggY2hhcmFjdGVyCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gUG9ydGhvbGUuV2luZG93UHJveHkudW5zZXJpYWxpemUoZGVjb2RlKGRvY3VtZW50LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKSk7CgogICAgICAgICAgICAgICAgdGFyZ2V0V2luZG93ID0gUG9ydGhvbGUuV2luZG93UHJveHkuZ2V0VGFyZ2V0V2luZG93KG1lc3NhZ2UudGFyZ2V0V2luZG93TmFtZSk7CgogICAgICAgICAgICAgICAgd2luZG93UHJveHkgPQogICAgICAgICAgICAgICAgICAgIFBvcnRob2xlLldpbmRvd1Byb3h5RGlzcGF0Y2hlci5maW5kV2luZG93UHJveHlPYmplY3RJbldpbmRvdygKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0V2luZG93LAogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNvdXJjZVdpbmRvd05hbWUKICAgICAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIGlmICh3aW5kb3dQcm94eSkgewogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3dQcm94eS5vcmlnaW4gPT09IG1lc3NhZ2UudGFyZ2V0T3JpZ2luIHx8IG1lc3NhZ2UudGFyZ2V0T3JpZ2luID09PSAnKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93UHJveHkuZGlzcGF0Y2hFdmVudCgKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9ydGhvbGUuTWVzc2FnZUV2ZW50KG1lc3NhZ2UuZGF0YSwgbWVzc2FnZS5zb3VyY2VPcmlnaW4sIHdpbmRvd1Byb3h5KSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgUG9ydGhvbGUuZXJyb3IoJ1RhcmdldCBvcmlnaW4gJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1Byb3h5Lm9yaWdpbiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgZG9lcyBub3QgbWF0Y2ggZGVzaXJlZCB0YXJnZXQgb2YgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGFyZ2V0T3JpZ2luKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIFBvcnRob2xlLmVycm9yKCdDb3VsZCBub3QgZmluZCB3aW5kb3cgcHJveHkgb2JqZWN0IG9uIHRoZSB0YXJnZXQgd2luZG93Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBMb29rIGZvciBhIHdpbmRvdyBwcm94eSBvYmplY3QgaW4gdGhlIHRhcmdldCB3aW5kb3cKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIGZpbmRXaW5kb3dQcm94eU9iamVjdEluV2luZG93OiBmdW5jdGlvbih3LCBzb3VyY2VXaW5kb3dOYW1lKSB7CiAgICAgICAgICAgIHZhciBpOwoKICAgICAgICAgICAgLy8gSUUgZG9lcyBub3QgZW51bWVyYXRlIGdsb2JhbCBvYmplY3RzIG9uIHRoZSB3aW5kb3cgb2JqZWN0CiAgICAgICAgICAgIGlmICh3LlJ1bnRpbWVPYmplY3QpIHsKICAgICAgICAgICAgICAgIHcgPSB3LlJ1bnRpbWVPYmplY3QoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodykgewogICAgICAgICAgICAgICAgZm9yIChpIGluIHcpIHsKICAgICAgICAgICAgICAgICAgICBpZiAody5oYXNPd25Qcm9wZXJ0eShpKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2UncmUgZmluZGluZyB0aGUgcHJveHkgb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IGlzIGRlY2xhcmVkIHRvIGJlIHRhcmdldHRpbmcgdGhlIHdpbmRvdyB0aGF0IGlzIGNhbGxpbmcgdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3W2ldICE9PSBudWxsICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZQ==b2Ygd1tpXSA9PT0gJ29iamVjdCcgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3W2ldIGluc3RhbmNlb2Ygdy5Qb3J0aG9sZS5XaW5kb3dQcm94eSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdbaV0uZ2V0VGFyZ2V0V2luZG93TmFtZSgpID09PSBzb3VyY2VXaW5kb3dOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dhbGxvdyBleGNlcHRpb24gaW4gY2FzZSB3ZSBhY2Nlc3MgYW4gb2JqZWN0IHdlIHNob3VsZG4ndAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFN0YXJ0IGEgcHJveHkgdG8gcmVsYXkgbWVzc2FnZXMuCiAgICAgICAgICogQHB1YmxpYwogICAgICAgICAqLwogICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvcnRob2xlLldpbmRvd1Byb3h5RGlzcGF0Y2hlci5mb3J3YXJkTWVzc2FnZUV2ZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmJvZHkuYXR0YWNoRXZlbnQpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnb25yZXNpemUnLCBQb3J0aG9sZS5XaW5kb3dQcm94eURpc3BhdGNoZXIuZm9yd2FyZE1lc3NhZ2VFdmVudCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuCiAgICAgICAgICAgICAgICBQb3J0aG9sZS5lcnJvcignQ2Fubm90IGF0dGFjaCByZXNpemUgZXZlbnQnKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgogICAgLy8gU3VwcG9ydCB0ZXN0aW5nIGluIG5vZGUuanM6CiAgICBpZiAodHlwZW9mIHdpbmRvdy5leHBvcnRzICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIHdpbmRvdy5leHBvcnRzLlBvcnRob2xlID0gUG9ydGhvbGU7CiAgICB9IGVsc2UgewogICAgICAgIHdpbmRvdy5Qb3J0aG9sZSA9IFBvcnRob2xlOwogICAgfQp9KSh0aGlzKTsK</content>
    <filesize>17731</filesize>
  </attachment>
  <attachment>
    <filename>porthole.min.js</filename>
    <author>XWiki.Admin</author>
    <date>1372611608000</date>
    <version>1.1</version>
    <comment/>
    <content>KGZ1bmN0aW9uKCl7dmFyIGE9ZmFsc2UsYj0veHl6Ly50ZXN0KGZ1bmN0aW9uKCl7eHl6fSk/L1xiX3N1cGVyXGIvOi8uKi87dGhpcy5DbGFzcz1mdW5jdGlvbigpe307Q2xhc3MuZXh0ZW5kPWZ1bmN0aW9uKGcpe3ZhciBmPXRoaXMucHJvdG90eXBlO2E9dHJ1ZTt2YXIgZT1uZXcgdGhpcygpO2E9ZmFsc2U7Zm9yKHZhciBkIGluIGcpe2VbZF09dHlwZW9mIGdbZF09PSJmdW5jdGlvbiImJnR5cGVvZiBmW2RdPT0iZnVuY3Rpb24iJiZiLnRlc3QoZ1tkXSk/KGZ1bmN0aW9uKGgsaSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGs9dGhpcy5fc3VwZXI7dGhpcy5fc3VwZXI9ZltoXTt2YXIgaj1pLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt0aGlzLl9zdXBlcj1rO3JldHVybiBqfX0pKGQsZ1tkXSk6Z1tkXX1mdW5jdGlvbiBjKCl7aWYoIWEmJnRoaXMuaW5pdCl7dGhpcy5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuZXh0ZW5kPWFyZ3VtZW50cy5jYWxsZWU7cmV0dXJuIGN9fSkoKTsoZnVuY3Rpb24oYyl7dmFyIGI9e3RyYWNlOmZ1bmN0aW9uKGQpe2lmKGMuY29uc29sZSE9PXVuZGVmaW5lZCl7Yy5jb25zb2xlLmxvZygiUG9ydGhvbGU6ICIrZCl9fSxlcnJvcjpmdW5jdGlvbihkKXtpZihjLmNvbnNvbGUhPT11bmRlZmluZWQpe2MuY29uc29sZS5lcnJvcigiUG9ydGhvbGU6ICIrZCl9fX07Yi5XaW5kb3dQcm94eT1mdW5jdGlvbigpe307Yi5XaW5kb3dQcm94eS5wcm90b3R5cGU9e3Bvc3Q6ZnVuY3Rpb24oZSxkKXt9LGFkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oZCl7fSxyZW1vdmVFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGQpe319O2IuV2luZG93UHJveHlCYXNlPUNsYXNzLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihkKXtpZihkPT09dW5kZWZpbmVkKXtkPSIifXRoaXMudGFyZ2V0V2luZG93TmFtZT1kO3RoaXMub3JpZ2luPWMubG9jYXRpb24ucHJvdG9jb2wrIi8vIitjLmxvY2F0aW9uLmhvc3Q7dGhpcy5ldmVudExpc3RlbmVycz1bXX0sZ2V0VGFyZ2V0V2luZG93TmFtZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRhcmdldFdpbmRvd05hbWV9LGdldE9yaWdpbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9yaWdpbn0sZ2V0VGFyZ2V0V2luZG93OmZ1bmN0aW9uKCl7cmV0dXJuIGIuV2luZG93UHJveHkuZ2V0VGFyZ2V0V2luZG93KHRoaXMudGFyZ2V0V2luZG93TmFtZSl9LHBvc3Q6ZnVuY3Rpb24oZSxkKXtpZihkPT09dW5kZWZpbmVkKXtkPSIqIn10aGlzLmRpc3BhdGNoTWVzc2FnZSh7ZGF0YTplLHNvdXJjZU9yaWdpbjp0aGlzLmdldE9yaWdpbigpLHRhcmdldE9yaWdpbjpkLHNvdXJjZVdpbmRvd05hbWU6Yy5uYW1lLHRhcmdldFdpbmRvd05hbWU6dGhpcy5nZXRUYXJnZXRXaW5kb3dOYW1lKCl9KX0sYWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihkKXt0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goZCk7cmV0dXJuIGR9LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oZyl7dmFyIGQ7dHJ5e2Q9dGhpcy5ldmVudExpc3RlbmVycy5pbmRleE9mKGcpO3RoaXMuZXZlbnRMaXN0ZW5lcnMuc3BsaWNlKGQsMSl9Y2F0Y2goaCl7dGhpcy5ldmVudExpc3RlbmVycz1bXX19LGRpc3BhdGNoRXZlbnQ6ZnVuY3Rpb24oZil7dmFyIGQ7Zm9yKGQ9MDtkPHRoaXMuZXZlbnRMaXN0ZW5lcnMubGVuZ3RoO2QrKyl7dHJ5e3RoaXMuZXZlbnRMaXN0ZW5lcnNbZF0oZil9Y2F0Y2goZyl7fX19fSk7Yi5XaW5kb3dQcm94eUxlZ2FjeT1iLldpbmRvd1Byb3h5QmFzZS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZCxlKXt0aGlzLl9zdXBlcihlKTtpZihkIT09bnVsbCl7dGhpcy5wcm94eUlGcmFtZU5hbWU9dGhpcy50YXJnZXRXaW5kb3dOYW1lKyJQcm94eUlGcmFtZSI7dGhpcy5wcm94eUlGcmFtZUxvY2F0aW9uPWQ7dGhpcy5wcm94eUlGcmFtZUVsZW1lbnQ9dGhpcy5jcmVhdGVJRnJhbWVQcm94eSgpfWVsc2V7dGhpcy5wcm94eUlGcmFtZUVsZW1lbnQ9bnVsbDt0aHJvdyBuZXcgRXJyb3IoInByb3h5SUZyYW1lVXJsIGNhbid0IGJlIG51bGwiKX19LGNyZWF0ZUlGcmFtZVByb3h5OmZ1bmN0aW9uKCl7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaWZyYW1lIik7ZC5zZXRBdHRyaWJ1dGUoImlkIix0aGlzLnByb3h5SUZyYW1lTmFtZSk7ZC5zZXRBdHRyaWJ1dGUoIm5hbWUiLHRoaXMucHJveHlJRnJhbWVOYW1lKTtkLnNldEF0dHJpYnV0ZSgic3JjIix0aGlzLnByb3h5SUZyYW1lTG9jYXRpb24pO2Quc2V0QXR0cmlidXRlKCJmcmFtZUJvcmRlciIsIjEiKTtkLnNldEF0dHJpYnV0ZSgic2Nyb2xsaW5nIiwiYXV0byIpO2Quc2V0QXR0cmlidXRlKCJ3aWR0aCIsMzApO2Quc2V0QXR0cmlidXRlKCJoZWlnaHQiLDMwKTtkLnNldEF0dHJpYnV0ZSgic3R5bGUiLCJwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IC0xMDBweDsgdG9wOjBweDsiKTtpZihkLnN0eWxlLnNldEF0dHJpYnV0ZSl7ZC5zdHlsZS5zZXRBdHRyaWJ1dGUoImNzc1RleHQiLCJwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IC0xMDBweDsgdG9wOjBweDsiKX1kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGQpO3JldHVybiBkfSxkaXNwYXRjaE1lc3NhZ2U6ZnVuY3Rpb24oZSl7dmFyIGQ9Yy5lbmNvZGVVUklDb21wb25lbnQ7aWYodGhpcy5wcm94eUlGcmFtZUVsZW1lbnQpe3ZhciBmPXRoaXMucHJveHlJRnJhbWVMb2NhdGlvbisiIyIrZChiLldpbmRvd1Byb3h5LnNlcmlhbGl6ZShlKSk7dGhpcy5wcm94eUlGcmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJzcmMiLGYpO3RoaXMucHJveHlJRnJhbWVFbGVtZW50LmhlaWdodD10aGlzLnByb3h5SUZyYW1lRWxlbWVudC5oZWlnaHQ+NTA/NTA6MTAwfX19KTtiLldpbmRvd1Byb3h5SFRNTDU9Yi5XaW5kb3dQcm94eUJhc2UuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGQsZSl7dGhpcy5fc3VwZXIoZSk7dGhpcy5ldmVudExpc3RlbmVyQ2FsbGJhY2s9bnVsbH0sZGlzcGF0Y2hNZXNzYWdlOmZ1bmN0aW9uKGQpe3RoaXMuZ2V0VGFyZ2V0V2luZG93KCkucG9zdE1lc3NhZ2UoYi5XaW5kb3dQcm94eS5zZXJpYWxpemUoZCksZC50YXJnZXRPcmlnaW4pfSxhZGRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGUpe2lmKHRoaXMuZXZlbnRMaXN0ZW5lcnMubGVuZ3RoPT09MCl7dmFyIGQ9dGhpczt0aGlzLmV2ZW50TGlzdGVuZXJDYWxsYmFjaz1mdW5jdGlvbihmKXtkLmV2ZW50TGlzdGVuZXIoZCxmKX07Yy5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIix0aGlzLmV2ZW50TGlzdGVuZXJDYWxsYmFjayxmYWxzZSl9cmV0dXJuIHRoaXMuX3N1cGVyKGUpfSxyZW1vdmVFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGQpe3RoaXMuX3N1cGVyKGQpO2lmKHRoaXMuZXZlbnRMaXN0ZW5lcnMubGVuZ3RoPT09MCl7Yy5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIix0aGlzLmV2ZW50TGlzdGVuZXJDYWxsYmFjayk7dGhpcy5ldmVudExpc3RlbmVyQ2FsbGJhY2s9bnVsbH19LGV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oZSxkKXt2YXIgZj1iLldpbmRvd1Byb3h5LnVuc2VyaWFsaXplKGQuZGF0YSk7aWYoZiYmKGUudGFyZ2V0V2luZG93TmFtZT09IiJ8fGYuc291cmNlV2luZG93TmFtZT09ZS50YXJnZXRXaW5kb3dOYW1lKSl7ZS5kaXNwYXRjaEV2ZW50KG5ldyBiLk1lc3NhZ2VFdmVudChmLmRhdGEsZC5vcmlnaW4sZSkpfX19KTtpZih0eXBlb2YgYy5wb3N0TWVzc2FnZSE9PSJmdW5jdGlvbiIpe2IudHJhY2UoIlVzaW5nIGxlZ2FjeSBicm93c2VyIHN1cHBvcnQiKTtiLldpbmRvd1Byb3h5PWIuV2luZG93UHJveHlMZWdhY3kuZXh0ZW5kKHt9KX1lbHNle2IudHJhY2UoIlVzaW5nIGJ1aWx0LWluIGJyb3dzZXIgc3VwcG9ydCIpO2IuV2luZG93UHJveHk9Yi5XaW5kb3dQcm94eUhUTUw1LmV4dGVuZCh7fSl9Yi5XaW5kb3dQcm94eS5zZXJpYWxpemU9ZnVuY3Rpb24oZCl7aWYodHlwZW9mIEpTT049PT0idW5kZWZpbmVkIil7dGhyb3cgbmV3IEVycm9yKCJQb3J0aG9sZSBzZXJpYWxpemF0aW9uIGRlcGVuZHMgb24gSlNPTiEiKX1yZXR1cm4gSlNPTi5zdHJpbmdpZnkoZCl9O2IuV2luZG93UHJveHkudW5zZXJpYWxpemU9ZnVuY3Rpb24oZyl7aWYodHlwZW9mIEpTT049PT0idW5kZWZpbmVkIil7dA==aHJvdyBuZXcgRXJyb3IoIlBvcnRob2xlIHVuc2VyaWFsaXphdGlvbiBkZXBlbmRlbnMgb24gSlNPTiEiKX10cnl7dmFyIGQ9SlNPTi5wYXJzZShnKX1jYXRjaChmKXtyZXR1cm4gZmFsc2V9cmV0dXJuIGR9O2IuV2luZG93UHJveHkuZ2V0VGFyZ2V0V2luZG93PWZ1bmN0aW9uKGQpe2lmKGQ9PT0iIil7cmV0dXJuIHRvcH1lbHNle2lmKGQ9PT0idG9wInx8ZD09PSJwYXJlbnQiKXtyZXR1cm4gY1tkXX19cmV0dXJuIHBhcmVudC5mcmFtZXNbZF19O2IuTWVzc2FnZUV2ZW50PWZ1bmN0aW9uIGEoZixkLGUpe3RoaXMuZGF0YT1mO3RoaXMub3JpZ2luPWQ7dGhpcy5zb3VyY2U9ZX07Yi5XaW5kb3dQcm94eURpc3BhdGNoZXI9e2ZvcndhcmRNZXNzYWdlRXZlbnQ6ZnVuY3Rpb24oaSl7dmFyIGcsaD1jLmRlY29kZVVSSUNvbXBvbmVudCxmLGQ7aWYoZG9jdW1lbnQubG9jYXRpb24uaGFzaC5sZW5ndGg+MCl7Zz1iLldpbmRvd1Byb3h5LnVuc2VyaWFsaXplKGgoZG9jdW1lbnQubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpKTtmPWIuV2luZG93UHJveHkuZ2V0VGFyZ2V0V2luZG93KGcudGFyZ2V0V2luZG93TmFtZSk7ZD1iLldpbmRvd1Byb3h5RGlzcGF0Y2hlci5maW5kV2luZG93UHJveHlPYmplY3RJbldpbmRvdyhmLGcuc291cmNlV2luZG93TmFtZSk7aWYoZCl7aWYoZC5vcmlnaW49PT1nLnRhcmdldE9yaWdpbnx8Zy50YXJnZXRPcmlnaW49PT0iKiIpe2QuZGlzcGF0Y2hFdmVudChuZXcgYi5NZXNzYWdlRXZlbnQoZy5kYXRhLGcuc291cmNlT3JpZ2luLGQpKX1lbHNle2IuZXJyb3IoIlRhcmdldCBvcmlnaW4gIitkLm9yaWdpbisiIGRvZXMgbm90IG1hdGNoIGRlc2lyZWQgdGFyZ2V0IG9mICIrZy50YXJnZXRPcmlnaW4pfX1lbHNle2IuZXJyb3IoIkNvdWxkIG5vdCBmaW5kIHdpbmRvdyBwcm94eSBvYmplY3Qgb24gdGhlIHRhcmdldCB3aW5kb3ciKX19fSxmaW5kV2luZG93UHJveHlPYmplY3RJbldpbmRvdzpmdW5jdGlvbihkLGcpe3ZhciBmO2lmKGQuUnVudGltZU9iamVjdCl7ZD1kLlJ1bnRpbWVPYmplY3QoKX1pZihkKXtmb3IoZiBpbiBkKXtpZihkLmhhc093blByb3BlcnR5KGYpKXt0cnl7aWYoZFtmXSE9PW51bGwmJnR5cGVvZiBkW2ZdPT09Im9iamVjdCImJmRbZl0gaW5zdGFuY2VvZiBkLlBvcnRob2xlLldpbmRvd1Byb3h5JiZkW2ZdLmdldFRhcmdldFdpbmRvd05hbWUoKT09PWcpe3JldHVybiBkW2ZdfX1jYXRjaChoKXt9fX19cmV0dXJuIG51bGx9LHN0YXJ0OmZ1bmN0aW9uKCl7aWYoYy5hZGRFdmVudExpc3RlbmVyKXtjLmFkZEV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsYi5XaW5kb3dQcm94eURpc3BhdGNoZXIuZm9yd2FyZE1lc3NhZ2VFdmVudCxmYWxzZSl9ZWxzZXtpZihkb2N1bWVudC5ib2R5LmF0dGFjaEV2ZW50KXtjLmF0dGFjaEV2ZW50KCJvbnJlc2l6ZSIsYi5XaW5kb3dQcm94eURpc3BhdGNoZXIuZm9yd2FyZE1lc3NhZ2VFdmVudCl9ZWxzZXtiLmVycm9yKCJDYW5ub3QgYXR0YWNoIHJlc2l6ZSBldmVudCIpfX19fTtpZih0eXBlb2YgYy5leHBvcnRzIT09InVuZGVmaW5lZCIpe2MuZXhwb3J0cy5Qb3J0aG9sZT1ifWVsc2V7Yy5Qb3J0aG9sZT1ifX0pKHRoaXMpOw==</content>
    <filesize>5672</filesize>
  </attachment>
  <attachment>
    <filename>rangy-core-1.2.js</filename>
    <author>XWiki.Admin</author>
    <date>1372254748000</date>
    <version>1.1</version>
    <comment/>
    <content>LyoqDQogKiBAbGljZW5zZSBSYW5neSwgYSBjcm9zcy1icm93c2VyIEphdmFTY3JpcHQgcmFuZ2UgYW5kIHNlbGVjdGlvbiBsaWJyYXJ5DQogKiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvcmFuZ3kvDQogKg0KICogQ29weXJpZ2h0IDIwMTIsIFRpbSBEb3duDQogKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuDQogKiBWZXJzaW9uOiAxLjIuMw0KICogQnVpbGQgZGF0ZTogMjYgRmVicnVhcnkgMjAxMg0KICovDQp3aW5kb3dbJ3Jhbmd5J10gPSAoZnVuY3Rpb24oKSB7DQoNCg0KICAgIHZhciBPQkpFQ1QgPSAib2JqZWN0IiwgRlVOQ1RJT04gPSAiZnVuY3Rpb24iLCBVTkRFRklORUQgPSAidW5kZWZpbmVkIjsNCg0KICAgIHZhciBkb21SYW5nZVByb3BlcnRpZXMgPSBbInN0YXJ0Q29udGFpbmVyIiwgInN0YXJ0T2Zmc2V0IiwgImVuZENvbnRhaW5lciIsICJlbmRPZmZzZXQiLCAiY29sbGFwc2VkIiwNCiAgICAgICAgImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwgIlNUQVJUX1RPX1NUQVJUIiwgIlNUQVJUX1RPX0VORCIsICJFTkRfVE9fU1RBUlQiLCAiRU5EX1RPX0VORCJdOw0KDQogICAgdmFyIGRvbVJhbmdlTWV0aG9kcyA9IFsic2V0U3RhcnQiLCAic2V0U3RhcnRCZWZvcmUiLCAic2V0U3RhcnRBZnRlciIsICJzZXRFbmQiLCAic2V0RW5kQmVmb3JlIiwNCiAgICAgICAgInNldEVuZEFmdGVyIiwgImNvbGxhcHNlIiwgInNlbGVjdE5vZGUiLCAic2VsZWN0Tm9kZUNvbnRlbnRzIiwgImNvbXBhcmVCb3VuZGFyeVBvaW50cyIsICJkZWxldGVDb250ZW50cyIsDQogICAgICAgICJleHRyYWN0Q29udGVudHMiLCAiY2xvbmVDb250ZW50cyIsICJpbnNlcnROb2RlIiwgInN1cnJvdW5kQ29udGVudHMiLCAiY2xvbmVSYW5nZSIsICJ0b1N0cmluZyIsICJkZXRhY2giXTsNCg0KICAgIHZhciB0ZXh0UmFuZ2VQcm9wZXJ0aWVzID0gWyJib3VuZGluZ0hlaWdodCIsICJib3VuZGluZ0xlZnQiLCAiYm91bmRpbmdUb3AiLCAiYm91bmRpbmdXaWR0aCIsICJodG1sVGV4dCIsICJ0ZXh0Il07DQoNCiAgICAvLyBTdWJzZXQgb2YgVGV4dFJhbmdlJ3MgZnVsbCBzZXQgb2YgbWV0aG9kcyB0aGF0IHdlJ3JlIGludGVyZXN0ZWQgaW4NCiAgICB2YXIgdGV4dFJhbmdlTWV0aG9kcyA9IFsiY29sbGFwc2UiLCAiY29tcGFyZUVuZFBvaW50cyIsICJkdXBsaWNhdGUiLCAiZ2V0Qm9va21hcmsiLCAibW92ZVRvQm9va21hcmsiLA0KICAgICAgICAibW92ZVRvRWxlbWVudFRleHQiLCAicGFyZW50RWxlbWVudCIsICJwYXN0ZUhUTUwiLCAic2VsZWN0IiwgInNldEVuZFBvaW50IiwgImdldEJvdW5kaW5nQ2xpZW50UmVjdCJdOw0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIC8vIFRyaW8gb2YgZnVuY3Rpb25zIHRha2VuIGZyb20gUGV0ZXIgTWljaGF1eCdzIGFydGljbGU6DQogICAgLy8gaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvZmVhdHVyZS1kZXRlY3Rpb24tc3RhdGUtb2YtdGhlLWFydC1icm93c2VyLXNjcmlwdGluZw0KICAgIGZ1bmN0aW9uIGlzSG9zdE1ldGhvZChvLCBwKSB7DQogICAgICAgIHZhciB0ID0gdHlwZW9mIG9bcF07DQogICAgICAgIHJldHVybiB0ID09IEZVTkNUSU9OIHx8ICghISh0ID09IE9CSkVDVCAmJiBvW3BdKSkgfHwgdCA9PSAidW5rbm93biI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaXNIb3N0T2JqZWN0KG8sIHApIHsNCiAgICAgICAgcmV0dXJuICEhKHR5cGVvZiBvW3BdID09IE9CSkVDVCAmJiBvW3BdKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc0hvc3RQcm9wZXJ0eShvLCBwKSB7DQogICAgICAgIHJldHVybiB0eXBlb2Ygb1twXSAhPSBVTkRFRklORUQ7DQogICAgfQ0KDQogICAgLy8gQ3JlYXRlcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHNhdmUgdmVyYm9zZSByZXBlYXRlZCBjYWxscyB0byB0ZXN0cyBmdW5jdGlvbnMNCiAgICBmdW5jdGlvbiBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdCh0ZXN0RnVuYykgew0KICAgICAgICByZXR1cm4gZnVuY3Rpb24obywgcHJvcHMpIHsNCiAgICAgICAgICAgIHZhciBpID0gcHJvcHMubGVuZ3RoOw0KICAgICAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgICAgIGlmICghdGVzdEZ1bmMobywgcHJvcHNbaV0pKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfTsNCiAgICB9DQoNCiAgICAvLyBOZXh0IHRyaW8gb2YgZnVuY3Rpb25zIGFyZSBhIGNvbnZlbmllbmNlIHRvIHNhdmUgdmVyYm9zZSByZXBlYXRlZCBjYWxscyB0byBwcmV2aW91cyB0d28gZnVuY3Rpb25zDQogICAgdmFyIGFyZUhvc3RNZXRob2RzID0gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QoaXNIb3N0TWV0aG9kKTsNCiAgICB2YXIgYXJlSG9zdE9iamVjdHMgPSBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdChpc0hvc3RPYmplY3QpOw0KICAgIHZhciBhcmVIb3N0UHJvcGVydGllcyA9IGNyZWF0ZU11bHRpcGxlUHJvcGVydHlUZXN0KGlzSG9zdFByb3BlcnR5KTsNCg0KICAgIGZ1bmN0aW9uIGlzVGV4dFJhbmdlKHJhbmdlKSB7DQogICAgICAgIHJldHVybiByYW5nZSAmJiBhcmVIb3N0TWV0aG9kcyhyYW5nZSwgdGV4dFJhbmdlTWV0aG9kcykgJiYgYXJlSG9zdFByb3BlcnRpZXMocmFuZ2UsIHRleHRSYW5nZVByb3BlcnRpZXMpOw0KICAgIH0NCg0KICAgIHZhciBhcGkgPSB7DQogICAgICAgIHZlcnNpb246ICIxLjIuMyIsDQogICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSwNCiAgICAgICAgc3VwcG9ydGVkOiB0cnVlLA0KDQogICAgICAgIHV0aWw6IHsNCiAgICAgICAgICAgIGlzSG9zdE1ldGhvZDogaXNIb3N0TWV0aG9kLA0KICAgICAgICAgICAgaXNIb3N0T2JqZWN0OiBpc0hvc3RPYmplY3QsDQogICAgICAgICAgICBpc0hvc3RQcm9wZXJ0eTogaXNIb3N0UHJvcGVydHksDQogICAgICAgICAgICBhcmVIb3N0TWV0aG9kczogYXJlSG9zdE1ldGhvZHMsDQogICAgICAgICAgICBhcmVIb3N0T2JqZWN0czogYXJlSG9zdE9iamVjdHMsDQogICAgICAgICAgICBhcmVIb3N0UHJvcGVydGllczogYXJlSG9zdFByb3BlcnRpZXMsDQogICAgICAgICAgICBpc1RleHRSYW5nZTogaXNUZXh0UmFuZ2UNCiAgICAgICAgfSwNCg0KICAgICAgICBmZWF0dXJlczoge30sDQoNCiAgICAgICAgbW9kdWxlczoge30sDQogICAgICAgIGNvbmZpZzogew0KICAgICAgICAgICAgYWxlcnRPbldhcm46IGZhbHNlLA0KICAgICAgICAgICAgcHJlZmVyVGV4dFJhbmdlOiBmYWxzZQ0KICAgICAgICB9DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGZhaWwocmVhc29uKSB7DQogICAgICAgIHdpbmRvdy5hbGVydCgiUmFuZ3kgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGJyb3dzZXIuIFJlYXNvbjogIiArIHJlYXNvbik7DQogICAgICAgIGFwaS5pbml0aWFsaXplZCA9IHRydWU7DQogICAgICAgIGFwaS5zdXBwb3J0ZWQgPSBmYWxzZTsNCiAgICB9DQoNCiAgICBhcGkuZmFpbCA9IGZhaWw7DQoNCiAgICBmdW5jdGlvbiB3YXJuKG1zZykgew0KICAgICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSAiUmFuZ3kgd2FybmluZzogIiArIG1zZzsNCiAgICAgICAgaWYgKGFwaS5jb25maWcuYWxlcnRPbldhcm4pIHsNCiAgICAgICAgICAgIHdpbmRvdy5hbGVydCh3YXJuaW5nTWVzc2FnZSk7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdy5jb25zb2xlICE9IFVOREVGSU5FRCAmJiB0eXBlb2Ygd2luZG93LmNvbnNvbGUubG9nICE9IFVOREVGSU5FRCkgew0KICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKHdhcm5pbmdNZXNzYWdlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGFwaS53YXJuID0gd2FybjsNCg0KICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eSkgew0KICAgICAgICBhcGkudXRpbC5leHRlbmQgPSBmdW5jdGlvbihvLCBwcm9wcykgew0KICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwcm9wcykgew0KICAgICAgICAgICAgIA==ICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGkpKSB7DQogICAgICAgICAgICAgICAgICAgIG9baV0gPSBwcm9wc1tpXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgZmFpbCgiaGFzT3duUHJvcGVydHkgbm90IHN1cHBvcnRlZCIpOw0KICAgIH0NCg0KICAgIHZhciBpbml0TGlzdGVuZXJzID0gW107DQogICAgdmFyIG1vZHVsZUluaXRpYWxpemVycyA9IFtdOw0KDQogICAgLy8gSW5pdGlhbGl6YXRpb24NCiAgICBmdW5jdGlvbiBpbml0KCkgew0KICAgICAgICBpZiAoYXBpLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdmFyIHRlc3RSYW5nZTsNCiAgICAgICAgdmFyIGltcGxlbWVudHNEb21SYW5nZSA9IGZhbHNlLCBpbXBsZW1lbnRzVGV4dFJhbmdlID0gZmFsc2U7DQoNCiAgICAgICAgLy8gRmlyc3QsIHBlcmZvcm0gYmFzaWMgZmVhdHVyZSB0ZXN0cw0KDQogICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJjcmVhdGVSYW5nZSIpKSB7DQogICAgICAgICAgICBpbXBsZW1lbnRzRG9tUmFuZ2UgPSB0cnVlOw0KICAgICAgICAgICAgLy90ZXN0UmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgLy9pZiAoYXJlSG9zdE1ldGhvZHModGVzdFJhbmdlLCBkb21SYW5nZU1ldGhvZHMpICYmIGFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RSYW5nZSwgZG9tUmFuZ2VQcm9wZXJ0aWVzKSkgew0KICAgICAgICAgICAgLy8gICAgaW1wbGVtZW50c0RvbVJhbmdlID0gdHJ1ZTsNCiAgICAgICAgICAgIC8vfQ0KICAgICAgICAgICAgLy90ZXN0UmFuZ2UuZGV0YWNoKCk7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgYm9keSA9IGlzSG9zdE9iamVjdChkb2N1bWVudCwgImJvZHkiKSA/IGRvY3VtZW50LmJvZHkgOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdOw0KDQogICAgICAgIGlmIChib2R5ICYmIGlzSG9zdE1ldGhvZChib2R5LCAiY3JlYXRlVGV4dFJhbmdlIikpIHsNCiAgICAgICAgICAgIHRlc3RSYW5nZSA9IGJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgICAgICBpZiAoaXNUZXh0UmFuZ2UodGVzdFJhbmdlKSkgew0KICAgICAgICAgICAgICAgIGltcGxlbWVudHNUZXh0UmFuZ2UgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFpbXBsZW1lbnRzRG9tUmFuZ2UgJiYgIWltcGxlbWVudHNUZXh0UmFuZ2UpIHsNCiAgICAgICAgICAgIGZhaWwoIk5laXRoZXIgUmFuZ2Ugbm9yIFRleHRSYW5nZSBhcmUgaW1wbGVtZW50ZWQiKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGFwaS5pbml0aWFsaXplZCA9IHRydWU7DQogICAgICAgIGFwaS5mZWF0dXJlcyA9IHsNCiAgICAgICAgICAgIGltcGxlbWVudHNEb21SYW5nZTogaW1wbGVtZW50c0RvbVJhbmdlLA0KICAgICAgICAgICAgaW1wbGVtZW50c1RleHRSYW5nZTogaW1wbGVtZW50c1RleHRSYW5nZQ0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIEluaXRpYWxpemUgbW9kdWxlcyBhbmQgY2FsbCBpbml0IGxpc3RlbmVycw0KICAgICAgICB2YXIgYWxsTGlzdGVuZXJzID0gbW9kdWxlSW5pdGlhbGl6ZXJzLmNvbmNhdChpbml0TGlzdGVuZXJzKTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFsbExpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBhbGxMaXN0ZW5lcnNbaV0oYXBpKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgaWYgKGlzSG9zdE9iamVjdCh3aW5kb3csICJjb25zb2xlIikgJiYgaXNIb3N0TWV0aG9kKHdpbmRvdy5jb25zb2xlLCAibG9nIikpIHsNCiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKCJJbml0IGxpc3RlbmVyIHRocmV3IGFuIGV4Y2VwdGlvbi4gQ29udGludWluZy4iLCBleCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBBbGxvdyBleHRlcm5hbCBzY3JpcHRzIHRvIGluaXRpYWxpemUgdGhpcyBsaWJyYXJ5IGluIGNhc2UgaXQncyBsb2FkZWQgYWZ0ZXIgdGhlIGRvY3VtZW50IGhhcyBsb2FkZWQNCiAgICBhcGkuaW5pdCA9IGluaXQ7DQoNCiAgICAvLyBFeGVjdXRlIGxpc3RlbmVyIGltbWVkaWF0ZWx5IGlmIGFscmVhZHkgaW5pdGlhbGl6ZWQNCiAgICBhcGkuYWRkSW5pdExpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHsNCiAgICAgICAgaWYgKGFwaS5pbml0aWFsaXplZCkgew0KICAgICAgICAgICAgbGlzdGVuZXIoYXBpKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGluaXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgdmFyIGNyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcnMgPSBbXTsNCg0KICAgIGFwaS5hZGRDcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikgew0KICAgICAgICBjcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpOw0KICAgIH07DQoNCiAgICBmdW5jdGlvbiBjcmVhdGVNaXNzaW5nTmF0aXZlQXBpKHdpbikgew0KICAgICAgICB3aW4gPSB3aW4gfHwgd2luZG93Ow0KICAgICAgICBpbml0KCk7DQoNCiAgICAgICAgLy8gTm90aWZ5IGxpc3RlbmVycw0KICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY3JlYXRlTWlzc2luZ05hdGl2ZUFwaUxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgY3JlYXRlTWlzc2luZ05hdGl2ZUFwaUxpc3RlbmVyc1tpXSh3aW4pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgYXBpLmNyZWF0ZU1pc3NpbmdOYXRpdmVBcGkgPSBjcmVhdGVNaXNzaW5nTmF0aXZlQXBpOw0KDQogICAgLyoqDQogICAgICogQGNvbnN0cnVjdG9yDQogICAgICovDQogICAgZnVuY3Rpb24gTW9kdWxlKG5hbWUpIHsNCiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsNCiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlOw0KICAgICAgICB0aGlzLnN1cHBvcnRlZCA9IGZhbHNlOw0KICAgIH0NCg0KICAgIE1vZHVsZS5wcm90b3R5cGUuZmFpbCA9IGZ1bmN0aW9uKHJlYXNvbikgew0KICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTsNCiAgICAgICAgdGhpcy5zdXBwb3J0ZWQgPSBmYWxzZTsNCg0KICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk1vZHVsZSAnIiArIHRoaXMubmFtZSArICInIGZhaWxlZCB0byBsb2FkOiAiICsgcmVhc29uKTsNCiAgICB9Ow0KDQogICAgTW9kdWxlLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24obXNnKSB7DQogICAgICAgIGFwaS53YXJuKCJNb2R1bGUgIiArIHRoaXMubmFtZSArICI6ICIgKyBtc2cpOw0KICAgIH07DQoNCiAgICBNb2R1bGUucHJvdG90eXBlLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24obXNnKSB7DQogICAgICAgIHJldHVybiBuZXcgRXJyb3IoIkVycm9yIGluIFJhbmd5ICIgKyB0aGlzLm5hbWUgKyAiIG1vZHVsZTogIiArIG1zZyk7DQogICAgfTsNCg0KICAgIGFwaS5jcmVhdGVNb2R1bGUgPSBmdW5jdGlvbihuYW1lLCBpbml0RnVuYykgew0KICAgICAgICB2YXIgbW9kdWxlID0gbmV3IE1vZHVsZShuYW1lKTsNCiAgICAgICAgYXBpLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7DQoNCiAgICAgICAgbW9kdWxlSW5pdGlhbGl6ZXJzLnB1c2goZnVuY3Rpb24oYXBpKSB7DQogICAgICAgICAgICBpbml0RnVuYyhhcGksIG1vZHVsZSk7DQogICAgICAgICAgICBtb2R1bGUuaW5pdGlhbGl6ZWQgPSB0cnVlOw0KICAgICAgICAgICAgbW9kdWxlLnN1cHBvcnRlZCA9IHRydWU7DQogICAgICAgIH0pOw0KICAgIH07DQoNCiAgICBhcGkucmVxdWlyZU1vZHVsZXMgPSBmdW5jdGlvbihtb2R1bGVzKSB7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtb2R1bGVzLmxlbmd0aCwgbW9kdWxlLCBtb2R1bGVOYW1lOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVzW2ldOw0KICAgICAgICAgIA==ICBtb2R1bGUgPSBhcGkubW9kdWxlc1ttb2R1bGVOYW1lXTsNCiAgICAgICAgICAgIGlmICghbW9kdWxlIHx8ICEobW9kdWxlIGluc3RhbmNlb2YgTW9kdWxlKSkgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTW9kdWxlICciICsgbW9kdWxlTmFtZSArICInIG5vdCBmb3VuZCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCFtb2R1bGUuc3VwcG9ydGVkKSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJNb2R1bGUgJyIgKyBtb2R1bGVOYW1lICsgIicgbm90IHN1cHBvcnRlZCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAvLyBXYWl0IGZvciBkb2N1bWVudCB0byBsb2FkIGJlZm9yZSBydW5uaW5nIHRlc3RzDQoNCiAgICB2YXIgZG9jUmVhZHkgPSBmYWxzZTsNCg0KICAgIHZhciBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHsNCg0KICAgICAgICBpZiAoIWRvY1JlYWR5KSB7DQogICAgICAgICAgICBkb2NSZWFkeSA9IHRydWU7DQogICAgICAgICAgICBpZiAoIWFwaS5pbml0aWFsaXplZCkgew0KICAgICAgICAgICAgICAgIGluaXQoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICAvLyBUZXN0IHdoZXRoZXIgd2UgaGF2ZSB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgdGhhdCB3ZSB3aWxsIG5lZWQNCiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PSBVTkRFRklORUQpIHsNCiAgICAgICAgZmFpbCgiTm8gd2luZG93IGZvdW5kIik7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PSBVTkRFRklORUQpIHsNCiAgICAgICAgZmFpbCgiTm8gZG9jdW1lbnQgZm91bmQiKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJhZGRFdmVudExpc3RlbmVyIikpIHsNCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGxvYWRIYW5kbGVyLCBmYWxzZSk7DQogICAgfQ0KDQogICAgLy8gQWRkIGEgZmFsbGJhY2sgaW4gY2FzZSB0aGUgRE9NQ29udGVudExvYWRlZCBldmVudCBpc24ndCBzdXBwb3J0ZWQNCiAgICBpZiAoaXNIb3N0TWV0aG9kKHdpbmRvdywgImFkZEV2ZW50TGlzdGVuZXIiKSkgew0KICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIGxvYWRIYW5kbGVyLCBmYWxzZSk7DQogICAgfSBlbHNlIGlmIChpc0hvc3RNZXRob2Qod2luZG93LCAiYXR0YWNoRXZlbnQiKSkgew0KICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoIm9ubG9hZCIsIGxvYWRIYW5kbGVyKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBmYWlsKCJXaW5kb3cgZG9lcyBub3QgaGF2ZSByZXF1aXJlZCBhZGRFdmVudExpc3RlbmVyIG9yIGF0dGFjaEV2ZW50IG1ldGhvZCIpOw0KICAgIH0NCg0KICAgIHJldHVybiBhcGk7DQp9KSgpOw0KcmFuZ3kuY3JlYXRlTW9kdWxlKCJEb21VdGlsIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCg0KICAgIHZhciBVTkRFRiA9ICJ1bmRlZmluZWQiOw0KICAgIHZhciB1dGlsID0gYXBpLnV0aWw7DQoNCiAgICAvLyBQZXJmb3JtIGZlYXR1cmUgdGVzdHMNCiAgICBpZiAoIXV0aWwuYXJlSG9zdE1ldGhvZHMoZG9jdW1lbnQsIFsiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsICJjcmVhdGVFbGVtZW50IiwgImNyZWF0ZVRleHROb2RlIl0pKSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJkb2N1bWVudCBtaXNzaW5nIGEgTm9kZSBjcmVhdGlvbiBtZXRob2QiKTsNCiAgICB9DQoNCiAgICBpZiAoIXV0aWwuaXNIb3N0TWV0aG9kKGRvY3VtZW50LCAiZ2V0RWxlbWVudHNCeVRhZ05hbWUiKSkgew0KICAgICAgICBtb2R1bGUuZmFpbCgiZG9jdW1lbnQgbWlzc2luZyBnZXRFbGVtZW50c0J5VGFnTmFtZSBtZXRob2QiKTsNCiAgICB9DQoNCiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsNCiAgICBpZiAoIXV0aWwuYXJlSG9zdE1ldGhvZHMoZWwsIFsiaW5zZXJ0QmVmb3JlIiwgImFwcGVuZENoaWxkIiwgImNsb25lTm9kZSJdIHx8DQogICAgICAgICAgICAhdXRpbC5hcmVIb3N0T2JqZWN0cyhlbCwgWyJwcmV2aW91c1NpYmxpbmciLCAibmV4dFNpYmxpbmciLCAiY2hpbGROb2RlcyIsICJwYXJlbnROb2RlIl0pKSkgew0KICAgICAgICBtb2R1bGUuZmFpbCgiSW5jb21wbGV0ZSBFbGVtZW50IGltcGxlbWVudGF0aW9uIik7DQogICAgfQ0KDQogICAgLy8gaW5uZXJIVE1MIGlzIHJlcXVpcmVkIGZvciBSYW5nZSdzIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBtZXRob2QNCiAgICBpZiAoIXV0aWwuaXNIb3N0UHJvcGVydHkoZWwsICJpbm5lckhUTUwiKSkgew0KICAgICAgICBtb2R1bGUuZmFpbCgiRWxlbWVudCBpcyBtaXNzaW5nIGlubmVySFRNTCBwcm9wZXJ0eSIpOw0KICAgIH0NCg0KICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJ0ZXN0Iik7DQogICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKHRleHROb2RlLCBbInNwbGl0VGV4dCIsICJkZWxldGVEYXRhIiwgImluc2VydERhdGEiLCAiYXBwZW5kRGF0YSIsICJjbG9uZU5vZGUiXSB8fA0KICAgICAgICAgICAgIXV0aWwuYXJlSG9zdE9iamVjdHMoZWwsIFsicHJldmlvdXNTaWJsaW5nIiwgIm5leHRTaWJsaW5nIiwgImNoaWxkTm9kZXMiLCAicGFyZW50Tm9kZSJdKSB8fA0KICAgICAgICAgICAgIXV0aWwuYXJlSG9zdFByb3BlcnRpZXModGV4dE5vZGUsIFsiZGF0YSJdKSkpIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIkluY29tcGxldGUgVGV4dCBOb2RlIGltcGxlbWVudGF0aW9uIik7DQogICAgfQ0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIC8vIFJlbW92ZWQgdXNlIG9mIGluZGV4T2YgYmVjYXVzZSBvZiBhIGJpemFycmUgYnVnIGluIE9wZXJhIHRoYXQgaXMgdGhyb3duIGluIG9uZSBvZiB0aGUgQWNpZDMgdGVzdHMuIEkgaGF2ZW4ndCBiZWVuDQogICAgLy8gYWJsZSB0byByZXBsaWNhdGUgaXQgb3V0c2lkZSBvZiB0aGUgdGVzdC4gVGhlIGJ1ZyBpcyB0aGF0IGluZGV4T2YgcmV0dXJucyAtMSB3aGVuIGNhbGxlZCBvbiBhbiBBcnJheSB0aGF0DQogICAgLy8gY29udGFpbnMganVzdCB0aGUgZG9jdW1lbnQgYXMgYSBzaW5nbGUgZWxlbWVudCBhbmQgdGhlIHZhbHVlIHNlYXJjaGVkIGZvciBpcyB0aGUgZG9jdW1lbnQuDQogICAgdmFyIGFycmF5Q29udGFpbnMgPSAvKkFycmF5LnByb3RvdHlwZS5pbmRleE9mID8NCiAgICAgICAgZnVuY3Rpb24oYXJyLCB2YWwpIHsNCiAgICAgICAgICAgIHJldHVybiBhcnIuaW5kZXhPZih2YWwpID4gLTE7DQogICAgICAgIH06Ki8NCg0KICAgICAgICBmdW5jdGlvbihhcnIsIHZhbCkgew0KICAgICAgICAgICAgdmFyIGkgPSBhcnIubGVuZ3RoOw0KICAgICAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgICAgIGlmIChhcnJbaV0gPT09IHZhbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH07DQoNCiAgICAvLyBPcGVyYSAxMSBwdXRzIEhUTUwgZWxlbWVudHMgaW4gdGhlIG51bGwgbmFtZXNwYWNlLCBpdCBzZWVtcywgYW5kIElFIDcgaGFzIHVuZGVmaW5lZCBuYW1lc3BhY2VVUkkNCiAgICBmdW5jdGlvbiBpc0h0bWxOYW1lc3BhY2Uobm9kZSkgew0KICAgICAgICB2YXIgbnM7DQogICAgICAgIHJldHVybiB0eXBlb2Ygbm9kZS5uYW1lc3BhY2VVUkkgPT0gVU5ERUYgfHwgKChucyA9IG5vZGUubmFtZXNwYWNlVVJJKSA9PT0gbnVsbCB8fCBucyA9PSAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIpOw0KICAgIH0NCg0KICAgIA==ZnVuY3Rpb24gcGFyZW50RWxlbWVudChub2RlKSB7DQogICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7DQogICAgICAgIHJldHVybiAocGFyZW50Lm5vZGVUeXBlID09IDEpID8gcGFyZW50IDogbnVsbDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXROb2RlSW5kZXgobm9kZSkgew0KICAgICAgICB2YXIgaSA9IDA7DQogICAgICAgIHdoaWxlKCAobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSApIHsNCiAgICAgICAgICAgIGkrKzsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gaTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXROb2RlTGVuZ3RoKG5vZGUpIHsNCiAgICAgICAgdmFyIGNoaWxkTm9kZXM7DQogICAgICAgIHJldHVybiBpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpID8gbm9kZS5sZW5ndGggOiAoKGNoaWxkTm9kZXMgPSBub2RlLmNoaWxkTm9kZXMpID8gY2hpbGROb2Rlcy5sZW5ndGggOiAwKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDb21tb25BbmNlc3Rvcihub2RlMSwgbm9kZTIpIHsNCiAgICAgICAgdmFyIGFuY2VzdG9ycyA9IFtdLCBuOw0KICAgICAgICBmb3IgKG4gPSBub2RlMTsgbjsgbiA9IG4ucGFyZW50Tm9kZSkgew0KICAgICAgICAgICAgYW5jZXN0b3JzLnB1c2gobik7DQogICAgICAgIH0NCg0KICAgICAgICBmb3IgKG4gPSBub2RlMjsgbjsgbiA9IG4ucGFyZW50Tm9kZSkgew0KICAgICAgICAgICAgaWYgKGFycmF5Q29udGFpbnMoYW5jZXN0b3JzLCBuKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIG51bGw7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaXNBbmNlc3Rvck9mKGFuY2VzdG9yLCBkZXNjZW5kYW50LCBzZWxmSXNBbmNlc3Rvcikgew0KICAgICAgICB2YXIgbiA9IHNlbGZJc0FuY2VzdG9yID8gZGVzY2VuZGFudCA6IGRlc2NlbmRhbnQucGFyZW50Tm9kZTsNCiAgICAgICAgd2hpbGUgKG4pIHsNCiAgICAgICAgICAgIGlmIChuID09PSBhbmNlc3Rvcikgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBuID0gbi5wYXJlbnROb2RlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlLCBhbmNlc3Rvciwgc2VsZklzQW5jZXN0b3IpIHsNCiAgICAgICAgdmFyIHAsIG4gPSBzZWxmSXNBbmNlc3RvciA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7DQogICAgICAgIHdoaWxlIChuKSB7DQogICAgICAgICAgICBwID0gbi5wYXJlbnROb2RlOw0KICAgICAgICAgICAgaWYgKHAgPT09IGFuY2VzdG9yKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBuID0gcDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpIHsNCiAgICAgICAgdmFyIHQgPSBub2RlLm5vZGVUeXBlOw0KICAgICAgICByZXR1cm4gdCA9PSAzIHx8IHQgPT0gNCB8fCB0ID09IDggOyAvLyBUZXh0LCBDRGF0YVNlY3Rpb24gb3IgQ29tbWVudA0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGluc2VydEFmdGVyKG5vZGUsIHByZWNlZGluZ05vZGUpIHsNCiAgICAgICAgdmFyIG5leHROb2RlID0gcHJlY2VkaW5nTm9kZS5uZXh0U2libGluZywgcGFyZW50ID0gcHJlY2VkaW5nTm9kZS5wYXJlbnROb2RlOw0KICAgICAgICBpZiAobmV4dE5vZGUpIHsNCiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dE5vZGUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBub2RlOw0KICAgIH0NCg0KICAgIC8vIE5vdGUgdGhhdCB3ZSBjYW5ub3QgdXNlIHNwbGl0VGV4dCgpIGJlY2F1c2UgaXQgaXMgYnVncmlkZGVuIGluIElFIDkuDQogICAgZnVuY3Rpb24gc3BsaXREYXRhTm9kZShub2RlLCBpbmRleCkgew0KICAgICAgICB2YXIgbmV3Tm9kZSA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTsNCiAgICAgICAgbmV3Tm9kZS5kZWxldGVEYXRhKDAsIGluZGV4KTsNCiAgICAgICAgbm9kZS5kZWxldGVEYXRhKGluZGV4LCBub2RlLmxlbmd0aCAtIGluZGV4KTsNCiAgICAgICAgaW5zZXJ0QWZ0ZXIobmV3Tm9kZSwgbm9kZSk7DQogICAgICAgIHJldHVybiBuZXdOb2RlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldERvY3VtZW50KG5vZGUpIHsNCiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gOSkgew0KICAgICAgICAgICAgcmV0dXJuIG5vZGU7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUub3duZXJEb2N1bWVudCAhPSBVTkRFRikgew0KICAgICAgICAgICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudDsNCiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZS5kb2N1bWVudCAhPSBVTkRFRikgew0KICAgICAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnQ7DQogICAgICAgIH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlKSB7DQogICAgICAgICAgICByZXR1cm4gZ2V0RG9jdW1lbnQobm9kZS5wYXJlbnROb2RlKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiZ2V0RG9jdW1lbnQ6IG5vIGRvY3VtZW50IGZvdW5kIGZvciBub2RlIik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkgew0KICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQobm9kZSk7DQogICAgICAgIGlmICh0eXBlb2YgZG9jLmRlZmF1bHRWaWV3ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3Ow0KICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2MucGFyZW50V2luZG93ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gZG9jLnBhcmVudFdpbmRvdzsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQ2Fubm90IGdldCBhIHdpbmRvdyBvYmplY3QgZm9yIG5vZGUiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldElmcmFtZURvY3VtZW50KGlmcmFtZUVsKSB7DQogICAgICAgIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudERvY3VtZW50ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudERvY3VtZW50Ow0KICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50V2luZG93ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudFdpbmRvdy5kb2N1bWVudDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiZ2V0SWZyYW1lV2luZG93OiBObyBEb2N1bWVudCBvYmplY3QgZm91bmQgZm9yIGlmcmFtZSBlbGVtZW50Iik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRJZnJhbWVXaW5kb3coaWZyYW1lRWwpIHsNCiAgICAgICAgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50V2luZG93ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudFdpbmRvdzsNCiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudERvY3VtZW50ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJnZXRJZnJhbWVXaW5kb3c6IE5vIFdpbmRvdyBvYmplY3QgZm91bmQgZm9yIGlmcmFtZSBlbGVtZW50Iik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRCb2R5KGRvYykgew0KICAgICAgICByZXR1cm4gdXRpbC5pc0hvc3RPYmplY3QoZG9jLCAiYm9keSIpID8gZG9jLmJvZHkgOiBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRSb290Q29udGFpbmVyKG5vZGUpIHsNCg==ICAgICAgICB2YXIgcGFyZW50Ow0KICAgICAgICB3aGlsZSAoIChwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUpICkgew0KICAgICAgICAgICAgbm9kZSA9IHBhcmVudDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbm9kZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKG5vZGVBLCBvZmZzZXRBLCBub2RlQiwgb2Zmc2V0Qikgew0KICAgICAgICAvLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItVHJhdmVyc2FsLVJhbmdlL3Jhbmdlcy5odG1sI0xldmVsLTItUmFuZ2UtQ29tcGFyaW5nDQogICAgICAgIHZhciBub2RlQywgcm9vdCwgY2hpbGRBLCBjaGlsZEIsIG47DQogICAgICAgIGlmIChub2RlQSA9PSBub2RlQikgew0KDQogICAgICAgICAgICAvLyBDYXNlIDE6IG5vZGVzIGFyZSB0aGUgc2FtZQ0KICAgICAgICAgICAgcmV0dXJuIG9mZnNldEEgPT09IG9mZnNldEIgPyAwIDogKG9mZnNldEEgPCBvZmZzZXRCKSA/IC0xIDogMTsNCiAgICAgICAgfSBlbHNlIGlmICggKG5vZGVDID0gZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUIsIG5vZGVBLCB0cnVlKSkgKSB7DQoNCiAgICAgICAgICAgIC8vIENhc2UgMjogbm9kZSBDIChjb250YWluZXIgQiBvciBhbiBhbmNlc3RvcikgaXMgYSBjaGlsZCBub2RlIG9mIEENCiAgICAgICAgICAgIHJldHVybiBvZmZzZXRBIDw9IGdldE5vZGVJbmRleChub2RlQykgPyAtMSA6IDE7DQogICAgICAgIH0gZWxzZSBpZiAoIChub2RlQyA9IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVBLCBub2RlQiwgdHJ1ZSkpICkgew0KDQogICAgICAgICAgICAvLyBDYXNlIDM6IG5vZGUgQyAoY29udGFpbmVyIEEgb3IgYW4gYW5jZXN0b3IpIGlzIGEgY2hpbGQgbm9kZSBvZiBCDQogICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZUluZGV4KG5vZGVDKSA8IG9mZnNldEIgID8gLTEgOiAxOw0KICAgICAgICB9IGVsc2Ugew0KDQogICAgICAgICAgICAvLyBDYXNlIDQ6IGNvbnRhaW5lcnMgYXJlIHNpYmxpbmdzIG9yIGRlc2NlbmRhbnRzIG9mIHNpYmxpbmdzDQogICAgICAgICAgICByb290ID0gZ2V0Q29tbW9uQW5jZXN0b3Iobm9kZUEsIG5vZGVCKTsNCiAgICAgICAgICAgIGNoaWxkQSA9IChub2RlQSA9PT0gcm9vdCkgPyByb290IDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUEsIHJvb3QsIHRydWUpOw0KICAgICAgICAgICAgY2hpbGRCID0gKG5vZGVCID09PSByb290KSA/IHJvb3QgOiBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlQiwgcm9vdCwgdHJ1ZSk7DQoNCiAgICAgICAgICAgIGlmIChjaGlsZEEgPT09IGNoaWxkQikgew0KICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIHBvc3NpYmxlDQoNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImNvbXBhcmVQb2ludHMgZ290IHRvIGNhc2UgNCBhbmQgY2hpbGRBIGFuZCBjaGlsZEIgYXJlIHRoZSBzYW1lISIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBuID0gcm9vdC5maXJzdENoaWxkOw0KICAgICAgICAgICAgICAgIHdoaWxlIChuKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChuID09PSBjaGlsZEEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuID09PSBjaGlsZEIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIG4gPSBuLm5leHRTaWJsaW5nOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlNob3VsZCBub3QgYmUgaGVyZSEiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbihub2RlKSB7DQogICAgICAgIHZhciBmcmFnbWVudCA9IGdldERvY3VtZW50KG5vZGUpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgY2hpbGQ7DQogICAgICAgIHdoaWxlICggKGNoaWxkID0gbm9kZS5maXJzdENoaWxkKSApIHsNCiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGNoaWxkKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZnJhZ21lbnQ7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaW5zcGVjdE5vZGUobm9kZSkgew0KICAgICAgICBpZiAoIW5vZGUpIHsNCiAgICAgICAgICAgIHJldHVybiAiW05vIG5vZGVdIjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShub2RlKSkgew0KICAgICAgICAgICAgcmV0dXJuICciJyArIG5vZGUuZGF0YSArICciJzsNCiAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHsNCiAgICAgICAgICAgIHZhciBpZEF0dHIgPSBub2RlLmlkID8gJyBpZD0iJyArIG5vZGUuaWQgKyAnIicgOiAiIjsNCiAgICAgICAgICAgIHJldHVybiAiPCIgKyBub2RlLm5vZGVOYW1lICsgaWRBdHRyICsgIj5bIiArIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggKyAiXSI7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gbm9kZS5ub2RlTmFtZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBjb25zdHJ1Y3Rvcg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIE5vZGVJdGVyYXRvcihyb290KSB7DQogICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7DQogICAgICAgIHRoaXMuX25leHQgPSByb290Ow0KICAgIH0NCg0KICAgIE5vZGVJdGVyYXRvci5wcm90b3R5cGUgPSB7DQogICAgICAgIF9jdXJyZW50OiBudWxsLA0KDQogICAgICAgIGhhc05leHQ6IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fbmV4dDsNCiAgICAgICAgfSwNCg0KICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBuID0gdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQ7DQogICAgICAgICAgICB2YXIgY2hpbGQsIG5leHQ7DQogICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudCkgew0KICAgICAgICAgICAgICAgIGNoaWxkID0gbi5maXJzdENoaWxkOw0KICAgICAgICAgICAgICAgIGlmIChjaGlsZCkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0ID0gY2hpbGQ7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgIHdoaWxlICgobiAhPT0gdGhpcy5yb290KSAmJiAhKG5leHQgPSBuLm5leHRTaWJsaW5nKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0ID0gbmV4dDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudDsNCiAgICAgICAgfSwNCg0KICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQgPSB0aGlzLnJvb3QgPSBudWxsOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yKHJvb3QpIHsNCiAgICAgICAgcmV0dXJuIG5ldyBOb2RlSXRlcmF0b3Iocm9vdCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQGNvbnN0cnVjdG9yDQogICAgICovDQogICAgZnVuY3Rpb24gRG9tUG9zaXRpb24obm9kZSwgb2Zmc2V0KSB7DQogICAgICAgIHRoaXMubm9kZSA9IG5vZGU7DQogICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0Ow0KICAgIH0NCg0KICAgIERvbVBvc2l0aW9uLnByb3RvdHlwZSA9IHsNCiAgICAgICAgZXF1YWxzOiBmdW5jdGlvbihwb3MpIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGUgPT09IHBvcy5ub2RlICYgdGhpcy5vZmZzZXQgPT0gcG9zLm9mZnNldDsNCiAgICAgICAgfSwNCg0KICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiAiW0RvbVBvc2l0aW9uKCIgKyBpbnNwZWN0Tm9kZSh0aGlzLm5vZGUpICsgIjoiICsgdGhpcy5vZmZzZXQgKyAiKV0iOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8qKg0KICAgICAqIEBjbw==bnN0cnVjdG9yDQogICAgICovDQogICAgZnVuY3Rpb24gRE9NRXhjZXB0aW9uKGNvZGVOYW1lKSB7DQogICAgICAgIHRoaXMuY29kZSA9IHRoaXNbY29kZU5hbWVdOw0KICAgICAgICB0aGlzLmNvZGVOYW1lID0gY29kZU5hbWU7DQogICAgICAgIHRoaXMubWVzc2FnZSA9ICJET01FeGNlcHRpb246ICIgKyB0aGlzLmNvZGVOYW1lOw0KICAgIH0NCg0KICAgIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSB7DQogICAgICAgIElOREVYX1NJWkVfRVJSOiAxLA0KICAgICAgICBISUVSQVJDSFlfUkVRVUVTVF9FUlI6IDMsDQogICAgICAgIFdST05HX0RPQ1VNRU5UX0VSUjogNCwNCiAgICAgICAgTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSOiA3LA0KICAgICAgICBOT1RfRk9VTkRfRVJSOiA4LA0KICAgICAgICBOT1RfU1VQUE9SVEVEX0VSUjogOSwNCiAgICAgICAgSU5WQUxJRF9TVEFURV9FUlI6IDExDQogICAgfTsNCg0KICAgIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTsNCiAgICB9Ow0KDQogICAgYXBpLmRvbSA9IHsNCiAgICAgICAgYXJyYXlDb250YWluczogYXJyYXlDb250YWlucywNCiAgICAgICAgaXNIdG1sTmFtZXNwYWNlOiBpc0h0bWxOYW1lc3BhY2UsDQogICAgICAgIHBhcmVudEVsZW1lbnQ6IHBhcmVudEVsZW1lbnQsDQogICAgICAgIGdldE5vZGVJbmRleDogZ2V0Tm9kZUluZGV4LA0KICAgICAgICBnZXROb2RlTGVuZ3RoOiBnZXROb2RlTGVuZ3RoLA0KICAgICAgICBnZXRDb21tb25BbmNlc3RvcjogZ2V0Q29tbW9uQW5jZXN0b3IsDQogICAgICAgIGlzQW5jZXN0b3JPZjogaXNBbmNlc3Rvck9mLA0KICAgICAgICBnZXRDbG9zZXN0QW5jZXN0b3JJbjogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4sDQogICAgICAgIGlzQ2hhcmFjdGVyRGF0YU5vZGU6IGlzQ2hhcmFjdGVyRGF0YU5vZGUsDQogICAgICAgIGluc2VydEFmdGVyOiBpbnNlcnRBZnRlciwNCiAgICAgICAgc3BsaXREYXRhTm9kZTogc3BsaXREYXRhTm9kZSwNCiAgICAgICAgZ2V0RG9jdW1lbnQ6IGdldERvY3VtZW50LA0KICAgICAgICBnZXRXaW5kb3c6IGdldFdpbmRvdywNCiAgICAgICAgZ2V0SWZyYW1lV2luZG93OiBnZXRJZnJhbWVXaW5kb3csDQogICAgICAgIGdldElmcmFtZURvY3VtZW50OiBnZXRJZnJhbWVEb2N1bWVudCwNCiAgICAgICAgZ2V0Qm9keTogZ2V0Qm9keSwNCiAgICAgICAgZ2V0Um9vdENvbnRhaW5lcjogZ2V0Um9vdENvbnRhaW5lciwNCiAgICAgICAgY29tcGFyZVBvaW50czogY29tcGFyZVBvaW50cywNCiAgICAgICAgaW5zcGVjdE5vZGU6IGluc3BlY3ROb2RlLA0KICAgICAgICBmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW46IGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbiwNCiAgICAgICAgY3JlYXRlSXRlcmF0b3I6IGNyZWF0ZUl0ZXJhdG9yLA0KICAgICAgICBEb21Qb3NpdGlvbjogRG9tUG9zaXRpb24NCiAgICB9Ow0KDQogICAgYXBpLkRPTUV4Y2VwdGlvbiA9IERPTUV4Y2VwdGlvbjsNCn0pO3Jhbmd5LmNyZWF0ZU1vZHVsZSgiRG9tUmFuZ2UiLCBmdW5jdGlvbihhcGksIG1vZHVsZSkgewogICAgYXBpLnJlcXVpcmVNb2R1bGVzKCBbIkRvbVV0aWwiXSApOwoKCiAgICB2YXIgZG9tID0gYXBpLmRvbTsKICAgIHZhciBEb21Qb3NpdGlvbiA9IGRvbS5Eb21Qb3NpdGlvbjsKICAgIHZhciBET01FeGNlcHRpb24gPSBhcGkuRE9NRXhjZXB0aW9uOwogICAgCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIFV0aWxpdHkgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQobm9kZSwgcmFuZ2UpIHsKICAgICAgICByZXR1cm4gKG5vZGUubm9kZVR5cGUgIT0gMykgJiYKICAgICAgICAgICAgICAgKGRvbS5pc0FuY2VzdG9yT2Yobm9kZSwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHRydWUpIHx8IGRvbS5pc0FuY2VzdG9yT2Yobm9kZSwgcmFuZ2UuZW5kQ29udGFpbmVyLCB0cnVlKSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmFuZ2VEb2N1bWVudChyYW5nZSkgewogICAgICAgIHJldHVybiBkb20uZ2V0RG9jdW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQocmFuZ2UsIHR5cGUsIGFyZ3MpIHsKICAgICAgICB2YXIgbGlzdGVuZXJzID0gcmFuZ2UuX2xpc3RlbmVyc1t0eXBlXTsKICAgICAgICBpZiAobGlzdGVuZXJzKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHJhbmdlLCB7dGFyZ2V0OiByYW5nZSwgYXJnczogYXJnc30pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJvdW5kYXJ5QmVmb3JlTm9kZShub2RlKSB7CiAgICAgICAgcmV0dXJuIG5ldyBEb21Qb3NpdGlvbihub2RlLnBhcmVudE5vZGUsIGRvbS5nZXROb2RlSW5kZXgobm9kZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpIHsKICAgICAgICByZXR1cm4gbmV3IERvbVBvc2l0aW9uKG5vZGUucGFyZW50Tm9kZSwgZG9tLmdldE5vZGVJbmRleChub2RlKSArIDEpOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIG4sIG8pIHsKICAgICAgICB2YXIgZmlyc3ROb2RlSW5zZXJ0ZWQgPSBub2RlLm5vZGVUeXBlID09IDExID8gbm9kZS5maXJzdENoaWxkIDogbm9kZTsKICAgICAgICBpZiAoZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUobikpIHsKICAgICAgICAgICAgaWYgKG8gPT0gbi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGRvbS5pbnNlcnRBZnRlcihub2RlLCBuKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbyA9PSAwID8gbiA6IGRvbS5zcGxpdERhdGFOb2RlKG4sIG8pKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobyA+PSBuLmNoaWxkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgICAgIG4uYXBwZW5kQ2hpbGQobm9kZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbi5pbnNlcnRCZWZvcmUobm9kZSwgbi5jaGlsZE5vZGVzW29dKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZpcnN0Tm9kZUluc2VydGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsb25lU3VidHJlZShpdGVyYXRvcikgewogICAgICAgIHZhciBwYXJ0aWFsbHlTZWxlY3RlZDsKICAgICAgICBmb3IgKHZhciBub2RlLCBmcmFnID0gZ2V0UmFuZ2VEb2N1bWVudChpdGVyYXRvci5yYW5nZSkuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBzdWJJdGVyYXRvcjsgbm9kZSA9IGl0ZXJhdG9yLm5leHQoKTsgKSB7CiAgICAgICAgICAgIHBhcnRpYWxseVNlbGVjdGVkID0gaXRlcmF0b3IuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKTsKCiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSghcGFydGlhbGx5U2VsZWN0ZWQpOwogICAgICAgICAgICBpZiAocGFydGlhbGx5U2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yID0gaXRlcmF0b3IuZ2V0U3VidHJlZUl0ZXJhdG9yKCk7CiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNsb25lU3VidHJlZShzdWJJdGVyYXRvcikpOwogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IuZGV0YWNoKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxMCkgeyAvLyBEb2N1bWVudFR5cGUKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIkhJRVJBUkNIWV9SRVFVRVNUX0VSUiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQobm9kZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmcmFnOwogICAgfQoKICAgIGZ1bmN0aW9uIGl0ZXJhdGVTdWJ0cmVlKHJhbmdlSXRlcmF0b3IsIGZ1bg==YywgaXRlcmF0b3JTdGF0ZSkgewogICAgICAgIHZhciBpdCwgbjsKICAgICAgICBpdGVyYXRvclN0YXRlID0gaXRlcmF0b3JTdGF0ZSB8fCB7IHN0b3A6IGZhbHNlIH07CiAgICAgICAgZm9yICh2YXIgbm9kZSwgc3ViUmFuZ2VJdGVyYXRvcjsgbm9kZSA9IHJhbmdlSXRlcmF0b3IubmV4dCgpOyApIHsKICAgICAgICAgICAgLy9sb2cuZGVidWcoIml0ZXJhdGVTdWJ0cmVlLCBwYXJ0aWFsbHkgc2VsZWN0ZWQ6ICIgKyByYW5nZUl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCksIG5vZGVUb1N0cmluZyhub2RlKSk7CiAgICAgICAgICAgIGlmIChyYW5nZUl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCkpIHsKICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlIGlzIHBhcnRpYWxseSBzZWxlY3RlZCBieSB0aGUgUmFuZ2UsIHNvIHdlIGNhbiB1c2UgYSBuZXcgUmFuZ2VJdGVyYXRvciBvbiB0aGUgcG9ydGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgIC8vIG5vZGUgc2VsZWN0ZWQgYnkgdGhlIFJhbmdlLgogICAgICAgICAgICAgICAgaWYgKGZ1bmMobm9kZSkgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3JTdGF0ZS5zdG9wID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN1YlJhbmdlSXRlcmF0b3IgPSByYW5nZUl0ZXJhdG9yLmdldFN1YnRyZWVJdGVyYXRvcigpOwogICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKHN1YlJhbmdlSXRlcmF0b3IsIGZ1bmMsIGl0ZXJhdG9yU3RhdGUpOwogICAgICAgICAgICAgICAgICAgIHN1YlJhbmdlSXRlcmF0b3IuZGV0YWNoKHRydWUpOwogICAgICAgICAgICAgICAgICAgIGlmIChpdGVyYXRvclN0YXRlLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIFRoZSB3aG9sZSBub2RlIGlzIHNlbGVjdGVkLCBzbyB3ZSBjYW4gdXNlIGVmZmljaWVudCBET00gaXRlcmF0aW9uIHRvIGl0ZXJhdGUgb3ZlciB0aGUgbm9kZSBhbmQgaXRzCiAgICAgICAgICAgICAgICAvLyBkZXNjZW5kYW50CiAgICAgICAgICAgICAgICBpdCA9IGRvbS5jcmVhdGVJdGVyYXRvcihub2RlKTsKICAgICAgICAgICAgICAgIHdoaWxlICggKG4gPSBpdC5uZXh0KCkpICkgewogICAgICAgICAgICAgICAgICAgIGlmIChmdW5jKG4pID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRvclN0YXRlLnN0b3AgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRlbGV0ZVN1YnRyZWUoaXRlcmF0b3IpIHsKICAgICAgICB2YXIgc3ViSXRlcmF0b3I7CiAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLm5leHQoKSkgewogICAgICAgICAgICBpZiAoaXRlcmF0b3IuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKSkgewogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IgPSBpdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTsKICAgICAgICAgICAgICAgIGRlbGV0ZVN1YnRyZWUoc3ViSXRlcmF0b3IpOwogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IuZGV0YWNoKHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaXRlcmF0b3IucmVtb3ZlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZXh0cmFjdFN1YnRyZWUoaXRlcmF0b3IpIHsKCiAgICAgICAgZm9yICh2YXIgbm9kZSwgZnJhZyA9IGdldFJhbmdlRG9jdW1lbnQoaXRlcmF0b3IucmFuZ2UpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgc3ViSXRlcmF0b3I7IG5vZGUgPSBpdGVyYXRvci5uZXh0KCk7ICkgewoKCiAgICAgICAgICAgIGlmIChpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7CiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOwogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IgPSBpdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTsKICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZXh0cmFjdFN1YnRyZWUoc3ViSXRlcmF0b3IpKTsKICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yLmRldGFjaCh0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEwKSB7IC8vIERvY3VtZW50VHlwZQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZyYWc7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Tm9kZXNJblJhbmdlKHJhbmdlLCBub2RlVHlwZXMsIGZpbHRlcikgewogICAgICAgIC8vbG9nLmluZm8oImdldE5vZGVzSW5SYW5nZSwgIiArIG5vZGVUeXBlcy5qb2luKCIsIikpOwogICAgICAgIHZhciBmaWx0ZXJOb2RlVHlwZXMgPSAhIShub2RlVHlwZXMgJiYgbm9kZVR5cGVzLmxlbmd0aCksIHJlZ2V4OwogICAgICAgIHZhciBmaWx0ZXJFeGlzdHMgPSAhIWZpbHRlcjsKICAgICAgICBpZiAoZmlsdGVyTm9kZVR5cGVzKSB7CiAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgiXigiICsgbm9kZVR5cGVzLmpvaW4oInwiKSArICIpJCIpOwogICAgICAgIH0KCiAgICAgICAgdmFyIG5vZGVzID0gW107CiAgICAgICAgaXRlcmF0ZVN1YnRyZWUobmV3IFJhbmdlSXRlcmF0b3IocmFuZ2UsIGZhbHNlKSwgZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICBpZiAoKCFmaWx0ZXJOb2RlVHlwZXMgfHwgcmVnZXgudGVzdChub2RlLm5vZGVUeXBlKSkgJiYgKCFmaWx0ZXJFeGlzdHMgfHwgZmlsdGVyKG5vZGUpKSkgewogICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBub2RlczsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNwZWN0KHJhbmdlKSB7CiAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHJhbmdlLmdldE5hbWUgPT0gInVuZGVmaW5lZCIpID8gIlJhbmdlIiA6IHJhbmdlLmdldE5hbWUoKTsKICAgICAgICByZXR1cm4gIlsiICsgbmFtZSArICIoIiArIGRvbS5pbnNwZWN0Tm9kZShyYW5nZS5zdGFydENvbnRhaW5lcikgKyAiOiIgKyByYW5nZS5zdGFydE9mZnNldCArICIsICIgKwogICAgICAgICAgICAgICAgZG9tLmluc3BlY3ROb2RlKHJhbmdlLmVuZENvbnRhaW5lcikgKyAiOiIgKyByYW5nZS5lbmRPZmZzZXQgKyAiKV0iOwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gUmFuZ2VJdGVyYXRvciBjb2RlIHBhcnRpYWxseSBib3Jyb3dzIGZyb20gSUVSYW5nZSBieSBUaW0gUnlhbiAoaHR0cDovL2dpdGh1Yi5jb20vdGltY2FtZXJvbnJ5YW4vSUVSYW5nZSkKCiAgICAvKioKICAgICAqIEBjb25zdHJ1Y3RvcgogICAgICovCiAgICBmdW5jdGlvbiBSYW5nZUl0ZXJhdG9yKHJhbmdlLCBjbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKSB7CiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlOwogICAgICAgIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcyA9IGNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXM7CgoKCiAgICAgICAgaWYgKCFyYW5nZS5jb2xsYXBzZWQpIHsKICAgICAgICAgICAgdGhpcy5zYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyOwogICAgICAgICAgICB0aGlzLnNvID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7CiAgICAgICAgICAgIHRoaXMuZWMgPSByYW5nZQ==LmVuZENvbnRhaW5lcjsKICAgICAgICAgICAgdGhpcy5lbyA9IHJhbmdlLmVuZE9mZnNldDsKICAgICAgICAgICAgdmFyIHJvb3QgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjsKCiAgICAgICAgICAgIGlmICh0aGlzLnNjID09PSB0aGlzLmVjICYmIGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuc2MpKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlzU2luZ2xlQ2hhcmFjdGVyRGF0YU5vZGUgPSB0cnVlOwogICAgICAgICAgICAgICAgdGhpcy5fZmlyc3QgPSB0aGlzLl9sYXN0ID0gdGhpcy5fbmV4dCA9IHRoaXMuc2M7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLl9maXJzdCA9IHRoaXMuX25leHQgPSAodGhpcy5zYyA9PT0gcm9vdCAmJiAhZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5zYykpID8KICAgICAgICAgICAgICAgICAgICB0aGlzLnNjLmNoaWxkTm9kZXNbdGhpcy5zb10gOiBkb20uZ2V0Q2xvc2VzdEFuY2VzdG9ySW4odGhpcy5zYywgcm9vdCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0ID0gKHRoaXMuZWMgPT09IHJvb3QgJiYgIWRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuZWMpKSA/CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lYy5jaGlsZE5vZGVzW3RoaXMuZW8gLSAxXSA6IGRvbS5nZXRDbG9zZXN0QW5jZXN0b3JJbih0aGlzLmVjLCByb290LCB0cnVlKTsKICAgICAgICAgICAgfQoKICAgICAgICB9CiAgICB9CgogICAgUmFuZ2VJdGVyYXRvci5wcm90b3R5cGUgPSB7CiAgICAgICAgX2N1cnJlbnQ6IG51bGwsCiAgICAgICAgX25leHQ6IG51bGwsCiAgICAgICAgX2ZpcnN0OiBudWxsLAogICAgICAgIF9sYXN0OiBudWxsLAogICAgICAgIGlzU2luZ2xlQ2hhcmFjdGVyRGF0YU5vZGU6IGZhbHNlLAoKICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSBudWxsOwogICAgICAgICAgICB0aGlzLl9uZXh0ID0gdGhpcy5fZmlyc3Q7CiAgICAgICAgfSwKCiAgICAgICAgaGFzTmV4dDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAhIXRoaXMuX25leHQ7CiAgICAgICAgfSwKCiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIC8vIE1vdmUgdG8gbmV4dCBub2RlCiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQ7CiAgICAgICAgICAgIGlmIChjdXJyZW50KSB7CiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0ID0gKGN1cnJlbnQgIT09IHRoaXMuX2xhc3QpID8gY3VycmVudC5uZXh0U2libGluZyA6IG51bGw7CgogICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHBhcnRpYWxseSBzZWxlY3RlZCB0ZXh0IG5vZGVzCiAgICAgICAgICAgICAgICBpZiAoZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUoY3VycmVudCkgJiYgdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZWMpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5jbG9uZU5vZGUodHJ1ZSkpLmRlbGV0ZURhdGEodGhpcy5lbywgY3VycmVudC5sZW5ndGggLSB0aGlzLmVvKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQgPT09IHRoaXMuc2MpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5jbG9uZU5vZGUodHJ1ZSkpLmRlbGV0ZURhdGEoMCwgdGhpcy5zbyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gY3VycmVudDsKICAgICAgICB9LAoKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQsIHN0YXJ0LCBlbmQ7CgogICAgICAgICAgICBpZiAoZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUoY3VycmVudCkgJiYgKGN1cnJlbnQgPT09IHRoaXMuc2MgfHwgY3VycmVudCA9PT0gdGhpcy5lYykpIHsKICAgICAgICAgICAgICAgIHN0YXJ0ID0gKGN1cnJlbnQgPT09IHRoaXMuc2MpID8gdGhpcy5zbyA6IDA7CiAgICAgICAgICAgICAgICBlbmQgPSAoY3VycmVudCA9PT0gdGhpcy5lYykgPyB0aGlzLmVvIDogY3VycmVudC5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgIT0gZW5kKSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5kZWxldGVEYXRhKHN0YXJ0LCBlbmQgLSBzdGFydCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5wYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1cnJlbnQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGN1cnJlbnQgbm9kZSBpcyBwYXJ0aWFsbHkgc2VsZWN0ZWQKICAgICAgICBpc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgICAgcmV0dXJuIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGN1cnJlbnQsIHRoaXMucmFuZ2UpOwogICAgICAgIH0sCgogICAgICAgIGdldFN1YnRyZWVJdGVyYXRvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBzdWJSYW5nZTsKICAgICAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSkgewogICAgICAgICAgICAgICAgc3ViUmFuZ2UgPSB0aGlzLnJhbmdlLmNsb25lUmFuZ2UoKTsKICAgICAgICAgICAgICAgIHN1YlJhbmdlLmNvbGxhcHNlKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzdWJSYW5nZSA9IG5ldyBSYW5nZShnZXRSYW5nZURvY3VtZW50KHRoaXMucmFuZ2UpKTsKICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgICAgICAgIHZhciBzdGFydENvbnRhaW5lciA9IGN1cnJlbnQsIHN0YXJ0T2Zmc2V0ID0gMCwgZW5kQ29udGFpbmVyID0gY3VycmVudCwgZW5kT2Zmc2V0ID0gZG9tLmdldE5vZGVMZW5ndGgoY3VycmVudCk7CgogICAgICAgICAgICAgICAgaWYgKGRvbS5pc0FuY2VzdG9yT2YoY3VycmVudCwgdGhpcy5zYywgdHJ1ZSkpIHsKICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IHRoaXMuc2M7CiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSB0aGlzLnNvOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGRvbS5pc0FuY2VzdG9yT2YoY3VycmVudCwgdGhpcy5lYywgdHJ1ZSkpIHsKICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXIgPSB0aGlzLmVjOwogICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldCA9IHRoaXMuZW87CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdXBkYXRlQm91bmRhcmllcyhzdWJSYW5nZSwgc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRDb250YWluZXIsIGVuZE9mZnNldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZUl0ZXJhdG9yKHN1YlJhbmdlLCB0aGlzLmNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXMpOwogICAgICAgIH0sCgogICAgICAgIGRldGFjaDogZnVuY3Rpb24oZGV0YWNoUmFuZ2UpIHsKICAgICAgICAgICAgaWYgKGRldGFjaFJhbmdlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlLmRldGFjaCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucmFuZ2UgPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dCA9IHRoaXMuX2ZpcnN0ID0gdGhpcy5fbGFzdCA9IHRoaXMuc2MgPSB0aGlzLnNvID0gdGhpcy5lYyA9IHRoaXMuZW8gPSBudWxsOwogICAgICAgIH0KICAgIH07CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ==LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIEV4Y2VwdGlvbnMKCiAgICAvKioKICAgICAqIEBjb25zdHJ1Y3RvcgogICAgICovCiAgICBmdW5jdGlvbiBSYW5nZUV4Y2VwdGlvbihjb2RlTmFtZSkgewogICAgICAgIHRoaXMuY29kZSA9IHRoaXNbY29kZU5hbWVdOwogICAgICAgIHRoaXMuY29kZU5hbWUgPSBjb2RlTmFtZTsKICAgICAgICB0aGlzLm1lc3NhZ2UgPSAiUmFuZ2VFeGNlcHRpb246ICIgKyB0aGlzLmNvZGVOYW1lOwogICAgfQoKICAgIFJhbmdlRXhjZXB0aW9uLnByb3RvdHlwZSA9IHsKICAgICAgICBCQURfQk9VTkRBUllQT0lOVFNfRVJSOiAxLAogICAgICAgIElOVkFMSURfTk9ERV9UWVBFX0VSUjogMgogICAgfTsKCiAgICBSYW5nZUV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlOwogICAgfTsKCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8qKgogICAgICogQ3VycmVudGx5IGl0ZXJhdGVzIHRocm91Z2ggYWxsIG5vZGVzIGluIHRoZSByYW5nZSBvbiBjcmVhdGlvbiB1bnRpbCBJIHRoaW5rIG9mIGEgZGVjZW50IHdheSB0byBkbyBpdAogICAgICogVE9ETzogTG9vayBpbnRvIG1ha2luZyB0aGlzIGEgcHJvcGVyIGl0ZXJhdG9yLCBub3QgcmVxdWlyaW5nIHByZWxvYWRpbmcgZXZlcnl0aGluZyBmaXJzdAogICAgICogQGNvbnN0cnVjdG9yCiAgICAgKi8KICAgIGZ1bmN0aW9uIFJhbmdlTm9kZUl0ZXJhdG9yKHJhbmdlLCBub2RlVHlwZXMsIGZpbHRlcikgewogICAgICAgIHRoaXMubm9kZXMgPSBnZXROb2Rlc0luUmFuZ2UocmFuZ2UsIG5vZGVUeXBlcywgZmlsdGVyKTsKICAgICAgICB0aGlzLl9uZXh0ID0gdGhpcy5ub2Rlc1swXTsKICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IDA7CiAgICB9CgogICAgUmFuZ2VOb2RlSXRlcmF0b3IucHJvdG90eXBlID0gewogICAgICAgIF9jdXJyZW50OiBudWxsLAoKICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fbmV4dDsKICAgICAgICB9LAoKICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQ7CiAgICAgICAgICAgIHRoaXMuX25leHQgPSB0aGlzLm5vZGVzWyArK3RoaXMuX3Bvc2l0aW9uIF07CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50OwogICAgICAgIH0sCgogICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9uZXh0ID0gdGhpcy5ub2RlcyA9IG51bGw7CiAgICAgICAgfQogICAgfTsKCiAgICB2YXIgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMgPSBbMSwgMywgNCwgNSwgNywgOCwgMTBdOwogICAgdmFyIHJvb3RDb250YWluZXJOb2RlVHlwZXMgPSBbMiwgOSwgMTFdOwogICAgdmFyIHJlYWRvbmx5Tm9kZVR5cGVzID0gWzUsIDYsIDEwLCAxMl07CiAgICB2YXIgaW5zZXJ0YWJsZU5vZGVUeXBlcyA9IFsxLCAzLCA0LCA1LCA3LCA4LCAxMCwgMTFdOwogICAgdmFyIHN1cnJvdW5kTm9kZVR5cGVzID0gWzEsIDMsIDQsIDUsIDcsIDhdOwoKICAgIGZ1bmN0aW9uIGNyZWF0ZUFuY2VzdG9yRmluZGVyKG5vZGVUeXBlcykgewogICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBzZWxmSXNBbmNlc3RvcikgewogICAgICAgICAgICB2YXIgdCwgbiA9IHNlbGZJc0FuY2VzdG9yID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgd2hpbGUgKG4pIHsKICAgICAgICAgICAgICAgIHQgPSBuLm5vZGVUeXBlOwogICAgICAgICAgICAgICAgaWYgKGRvbS5hcnJheUNvbnRhaW5zKG5vZGVUeXBlcywgdCkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG4gPSBuLnBhcmVudE5vZGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfTsKICAgIH0KCiAgICB2YXIgZ2V0Um9vdENvbnRhaW5lciA9IGRvbS5nZXRSb290Q29udGFpbmVyOwogICAgdmFyIGdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lciA9IGNyZWF0ZUFuY2VzdG9yRmluZGVyKCBbOSwgMTFdICk7CiAgICB2YXIgZ2V0UmVhZG9ubHlBbmNlc3RvciA9IGNyZWF0ZUFuY2VzdG9yRmluZGVyKHJlYWRvbmx5Tm9kZVR5cGVzKTsKICAgIHZhciBnZXREb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3RvciA9IGNyZWF0ZUFuY2VzdG9yRmluZGVyKCBbNiwgMTAsIDEyXSApOwoKICAgIGZ1bmN0aW9uIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgYWxsb3dTZWxmKSB7CiAgICAgICAgaWYgKGdldERvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGFsbG93U2VsZikpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXhjZXB0aW9uKCJJTlZBTElEX05PREVfVFlQRV9FUlIiKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0Tm90RGV0YWNoZWQocmFuZ2UpIHsKICAgICAgICBpZiAoIXJhbmdlLnN0YXJ0Q29udGFpbmVyKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIklOVkFMSURfU1RBVEVfRVJSIik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgaW52YWxpZFR5cGVzKSB7CiAgICAgICAgaWYgKCFkb20uYXJyYXlDb250YWlucyhpbnZhbGlkVHlwZXMsIG5vZGUubm9kZVR5cGUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUV4Y2VwdGlvbigiSU5WQUxJRF9OT0RFX1RZUEVfRVJSIik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkgewogICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IChkb20uaXNDaGFyYWN0ZXJEYXRhTm9kZShub2RlKSA/IG5vZGUubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSU5ERVhfU0laRV9FUlIiKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlMSwgbm9kZTIpIHsKICAgICAgICBpZiAoZ2V0RG9jdW1lbnRPckZyYWdtZW50Q29udGFpbmVyKG5vZGUxLCB0cnVlKSAhPT0gZ2V0RG9jdW1lbnRPckZyYWdtZW50Q29udGFpbmVyKG5vZGUyLCB0cnVlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJXUk9OR19ET0NVTUVOVF9FUlIiKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KG5vZGUpIHsKICAgICAgICBpZiAoZ2V0UmVhZG9ubHlBbmNlc3Rvcihub2RlLCB0cnVlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIiKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlLCBjb2RlTmFtZSkgewogICAgICAgIGlmICghbm9kZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKGNvZGVOYW1lKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaXNPcnBoYW4obm9kZSkgewogICAgICAgIHJldHVybiAhZG9tLmFycmF5Q29udGFpbnMocm9vdENvbnRhaW5lck5vZGVUeXBlcywgbm9kZS5ub2RlVHlwZSkgJiYgIWdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lcihub2RlLCB0cnVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1ZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkgewogICAgICAgIHJldHVybiBvZmZzZXQgPD0gKGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpID8gbm9kZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1JhbmdlVmFsaWQocmFuZ2UpIHsKICAgICAgICByZXR1cm4gKCEhcmFuZ2Uuc3RhcnRDb250YWluZXIgJiYgIQ==IXJhbmdlLmVuZENvbnRhaW5lcgogICAgICAgICAgICAgICAgJiYgIWlzT3JwaGFuKHJhbmdlLnN0YXJ0Q29udGFpbmVyKQogICAgICAgICAgICAgICAgJiYgIWlzT3JwaGFuKHJhbmdlLmVuZENvbnRhaW5lcikKICAgICAgICAgICAgICAgICYmIGlzVmFsaWRPZmZzZXQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KQogICAgICAgICAgICAgICAgJiYgaXNWYWxpZE9mZnNldChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydFJhbmdlVmFsaWQocmFuZ2UpIHsKICAgICAgICBhc3NlcnROb3REZXRhY2hlZChyYW5nZSk7CiAgICAgICAgaWYgKCFpc1JhbmdlVmFsaWQocmFuZ2UpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiUmFuZ2UgZXJyb3I6IFJhbmdlIGlzIG5vIGxvbmdlciB2YWxpZCBhZnRlciBET00gbXV0YXRpb24gKCIgKyByYW5nZS5pbnNwZWN0KCkgKyAiKSIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIFRlc3QgdGhlIGJyb3dzZXIncyBpbm5lckhUTUwgc3VwcG9ydCB0byBkZWNpZGUgaG93IHRvIGltcGxlbWVudCBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQKICAgIHZhciBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKICAgIHZhciBodG1sUGFyc2luZ0NvbmZvcm1zID0gZmFsc2U7CiAgICB0cnkgewogICAgICAgIHN0eWxlRWwuaW5uZXJIVE1MID0gIjxiPng8L2I+IjsKICAgICAgICBodG1sUGFyc2luZ0NvbmZvcm1zID0gKHN0eWxlRWwuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAzKTsgLy8gT3BlcmEgaW5jb3JyZWN0bHkgY3JlYXRlcyBhbiBlbGVtZW50IG5vZGUKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAvLyBJRSA2IGFuZCA3IHRocm93CiAgICB9CgogICAgYXBpLmZlYXR1cmVzLmh0bWxQYXJzaW5nQ29uZm9ybXMgPSBodG1sUGFyc2luZ0NvbmZvcm1zOwoKICAgIHZhciBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgPSBodG1sUGFyc2luZ0NvbmZvcm1zID8KCiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gYXMgcGVyIEhUTUwgcGFyc2luZyBzcGVjLCB0cnVzdGluZyBpbiB0aGUgYnJvd3NlcidzIGltcGxlbWVudGF0aW9uIG9mIGlubmVySFRNTC4gU2VlCiAgICAgICAgLy8gZGlzY3Vzc2lvbiBhbmQgYmFzZSBjb2RlIGZvciB0aGlzIGltcGxlbWVudGF0aW9uIGF0IGlzc3VlIDY3LgogICAgICAgIC8vIFNwZWM6IGh0dHA6Ly9odG1sNS5vcmcvc3BlY3MvZG9tLXBhcnNpbmcuaHRtbCNleHRlbnNpb25zLXRvLXRoZS1yYW5nZS1pbnRlcmZhY2UKICAgICAgICAvLyBUaGFua3MgdG8gQWxla3MgV2lsbGlhbXMuCiAgICAgICAgZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHsKICAgICAgICAgICAgLy8gIkxldCBub2RlIHRoZSBjb250ZXh0IG9iamVjdCdzIHN0YXJ0J3Mgbm9kZS4iCiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydENvbnRhaW5lcjsKICAgICAgICAgICAgdmFyIGRvYyA9IGRvbS5nZXREb2N1bWVudChub2RlKTsKCiAgICAgICAgICAgIC8vICJJZiB0aGUgY29udGV4dCBvYmplY3QncyBzdGFydCdzIG5vZGUgaXMgbnVsbCwgcmFpc2UgYW4gSU5WQUxJRF9TVEFURV9FUlIKICAgICAgICAgICAgLy8gZXhjZXB0aW9uIGFuZCBhYm9ydCB0aGVzZSBzdGVwcy4iCiAgICAgICAgICAgIGlmICghbm9kZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSU5WQUxJRF9TVEFURV9FUlIiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gIkxldCBlbGVtZW50IGJlIGFzIGZvbGxvd3MsIGRlcGVuZGluZyBvbiBub2RlJ3MgaW50ZXJmYWNlOiIKICAgICAgICAgICAgLy8gRG9jdW1lbnQsIERvY3VtZW50IEZyYWdtZW50OiBudWxsCiAgICAgICAgICAgIHZhciBlbCA9IG51bGw7CgogICAgICAgICAgICAvLyAiRWxlbWVudDogbm9kZSIKICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkgewogICAgICAgICAgICAgICAgZWwgPSBub2RlOwoKICAgICAgICAgICAgLy8gIlRleHQsIENvbW1lbnQ6IG5vZGUncyBwYXJlbnRFbGVtZW50IgogICAgICAgICAgICB9IGVsc2UgaWYgKGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpKSB7CiAgICAgICAgICAgICAgICBlbCA9IGRvbS5wYXJlbnRFbGVtZW50KG5vZGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyAiSWYgZWl0aGVyIGVsZW1lbnQgaXMgbnVsbCBvciBlbGVtZW50J3Mgb3duZXJEb2N1bWVudCBpcyBhbiBIVE1MIGRvY3VtZW50CiAgICAgICAgICAgIC8vIGFuZCBlbGVtZW50J3MgbG9jYWwgbmFtZSBpcyAiaHRtbCIgYW5kIGVsZW1lbnQncyBuYW1lc3BhY2UgaXMgdGhlIEhUTUwKICAgICAgICAgICAgLy8gbmFtZXNwYWNlIgogICAgICAgICAgICBpZiAoZWwgPT09IG51bGwgfHwgKAogICAgICAgICAgICAgICAgZWwubm9kZU5hbWUgPT0gIkhUTUwiCiAgICAgICAgICAgICAgICAmJiBkb20uaXNIdG1sTmFtZXNwYWNlKGRvbS5nZXREb2N1bWVudChlbCkuZG9jdW1lbnRFbGVtZW50KQogICAgICAgICAgICAgICAgJiYgZG9tLmlzSHRtbE5hbWVzcGFjZShlbCkKICAgICAgICAgICAgKSkgewoKICAgICAgICAgICAgLy8gImxldCBlbGVtZW50IGJlIGEgbmV3IEVsZW1lbnQgd2l0aCAiYm9keSIgYXMgaXRzIGxvY2FsIG5hbWUgYW5kIHRoZSBIVE1MCiAgICAgICAgICAgIC8vIG5hbWVzcGFjZSBhcyBpdHMgbmFtZXNwYWNlLiIiCiAgICAgICAgICAgICAgICBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCJib2R5Iik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlbCA9IGVsLmNsb25lTm9kZShmYWxzZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vICJJZiB0aGUgbm9kZSdzIGRvY3VtZW50IGlzIGFuIEhUTUwgZG9jdW1lbnQ6IEludm9rZSB0aGUgSFRNTCBmcmFnbWVudCBwYXJzaW5nIGFsZ29yaXRobS4iCiAgICAgICAgICAgIC8vICJJZiB0aGUgbm9kZSdzIGRvY3VtZW50IGlzIGFuIFhNTCBkb2N1bWVudDogSW52b2tlIHRoZSBYTUwgZnJhZ21lbnQgcGFyc2luZyBhbGdvcml0aG0uIgogICAgICAgICAgICAvLyAiSW4gZWl0aGVyIGNhc2UsIHRoZSBhbGdvcml0aG0gbXVzdCBiZSBpbnZva2VkIHdpdGggZnJhZ21lbnQgYXMgdGhlIGlucHV0CiAgICAgICAgICAgIC8vIGFuZCBlbGVtZW50IGFzIHRoZSBjb250ZXh0IGVsZW1lbnQuIgogICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBmcmFnbWVudFN0cjsKCiAgICAgICAgICAgIC8vICJJZiB0aGlzIHJhaXNlcyBhbiBleGNlcHRpb24sIHRoZW4gYWJvcnQgdGhlc2Ugc3RlcHMuIE90aGVyd2lzZSwgbGV0IG5ldwogICAgICAgICAgICAvLyBjaGlsZHJlbiBiZSB0aGUgbm9kZXMgcmV0dXJuZWQuIgoKICAgICAgICAgICAgLy8gIkxldCBmcmFnbWVudCBiZSBhIG5ldyBEb2N1bWVudEZyYWdtZW50LiIKICAgICAgICAgICAgLy8gIkFwcGVuZCBhbGwgbmV3IGNoaWxkcmVuIHRvIGZyYWdtZW50LiIKICAgICAgICAgICAgLy8gIlJldHVybiBmcmFnbWVudC4iCiAgICAgICAgICAgIHJldHVybiBkb20uZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuKGVsKTsKICAgICAgICB9IDoKCiAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCBpbm5lckhUTUwgY2Fubm90IGJlIHRydXN0ZWQsIHNvIGZhbGwgYmFjayB0byBhIHNpbXBsZXIsIG5vbi1jb25mb3JtYW50IGltcGxlbWVudGF0aW9uIHRoYXQKICAgICAgICAvLyBwcmV2aW91cyB2ZXJzaW9ucyBvZiBSYW5neSB1c2VkICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdXNpbmcgYSBib2R5IGVsZW1lbnQgcmF0aGVyIHRoYW4gYSBkaXYpCiAgICAgICAgZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHsKICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CiAgICAgICAgICAgIHZhciBkb2MgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpOwogICAgICAgICAgICB2YXIgZWwgPSBkb2MuY3JlYXRlRWxlbWVudCgiYm9keSIpOw==CiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGZyYWdtZW50U3RyOwoKICAgICAgICAgICAgcmV0dXJuIGRvbS5mcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4oZWwpOwogICAgICAgIH07CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICB2YXIgcmFuZ2VQcm9wZXJ0aWVzID0gWyJzdGFydENvbnRhaW5lciIsICJzdGFydE9mZnNldCIsICJlbmRDb250YWluZXIiLCAiZW5kT2Zmc2V0IiwgImNvbGxhcHNlZCIsCiAgICAgICAgImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIl07CgogICAgdmFyIHMycyA9IDAsIHMyZSA9IDEsIGUyZSA9IDIsIGUycyA9IDM7CiAgICB2YXIgbl9iID0gMCwgbl9hID0gMSwgbl9iX2EgPSAyLCBuX2kgPSAzOwoKICAgIGZ1bmN0aW9uIFJhbmdlUHJvdG90eXBlKCkge30KCiAgICBSYW5nZVByb3RvdHlwZS5wcm90b3R5cGUgPSB7CiAgICAgICAgYXR0YWNoTGlzdGVuZXI6IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTsKICAgICAgICB9LAoKICAgICAgICBjb21wYXJlQm91bmRhcnlQb2ludHM6IGZ1bmN0aW9uKGhvdywgcmFuZ2UpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudCh0aGlzLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lcik7CgogICAgICAgICAgICB2YXIgbm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCOwogICAgICAgICAgICB2YXIgcHJlZml4QSA9IChob3cgPT0gZTJzIHx8IGhvdyA9PSBzMnMpID8gInN0YXJ0IiA6ICJlbmQiOwogICAgICAgICAgICB2YXIgcHJlZml4QiA9IChob3cgPT0gczJlIHx8IGhvdyA9PSBzMnMpID8gInN0YXJ0IiA6ICJlbmQiOwogICAgICAgICAgICBub2RlQSA9IHRoaXNbcHJlZml4QSArICJDb250YWluZXIiXTsKICAgICAgICAgICAgb2Zmc2V0QSA9IHRoaXNbcHJlZml4QSArICJPZmZzZXQiXTsKICAgICAgICAgICAgbm9kZUIgPSByYW5nZVtwcmVmaXhCICsgIkNvbnRhaW5lciJdOwogICAgICAgICAgICBvZmZzZXRCID0gcmFuZ2VbcHJlZml4QiArICJPZmZzZXQiXTsKICAgICAgICAgICAgcmV0dXJuIGRvbS5jb21wYXJlUG9pbnRzKG5vZGVBLCBvZmZzZXRBLCBub2RlQiwgb2Zmc2V0Qik7CiAgICAgICAgfSwKCiAgICAgICAgaW5zZXJ0Tm9kZTogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGluc2VydGFibGVOb2RlVHlwZXMpOwogICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5zdGFydENvbnRhaW5lcik7CgogICAgICAgICAgICBpZiAoZG9tLmlzQW5jZXN0b3JPZihub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0cnVlKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE5vIGNoZWNrIGZvciB3aGV0aGVyIHRoZSBjb250YWluZXIgb2YgdGhlIHN0YXJ0IG9mIHRoZSBSYW5nZSBpcyBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhbGxvdwogICAgICAgICAgICAvLyBjaGlsZHJlbiBvZiB0aGUgdHlwZSBvZiBub2RlOiB0aGUgYnJvd3NlcidzIERPTSBpbXBsZW1lbnRhdGlvbiBzaG91bGQgZG8gdGhpcyBmb3IgdXMgd2hlbiB3ZSBhdHRlbXB0CiAgICAgICAgICAgIC8vIHRvIGFkZCB0aGUgbm9kZQoKICAgICAgICAgICAgdmFyIGZpcnN0Tm9kZUluc2VydGVkID0gaW5zZXJ0Tm9kZUF0UG9zaXRpb24obm9kZSwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7CiAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRCZWZvcmUoZmlyc3ROb2RlSW5zZXJ0ZWQpOwogICAgICAgIH0sCgogICAgICAgIGNsb25lQ29udGVudHM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwoKICAgICAgICAgICAgdmFyIGNsb25lLCBmcmFnOwogICAgICAgICAgICBpZiAodGhpcy5jb2xsYXBzZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0Q29udGFpbmVyID09PSB0aGlzLmVuZENvbnRhaW5lciAmJiBkb20uaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnN0YXJ0Q29udGFpbmVyKSkgewogICAgICAgICAgICAgICAgICAgIGNsb25lID0gdGhpcy5zdGFydENvbnRhaW5lci5jbG9uZU5vZGUodHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZGF0YSA9IGNsb25lLmRhdGEuc2xpY2UodGhpcy5zdGFydE9mZnNldCwgdGhpcy5lbmRPZmZzZXQpOwogICAgICAgICAgICAgICAgICAgIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGNsb25lKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJhZzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFJhbmdlSXRlcmF0b3IodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBjbG9uZVN1YnRyZWUoaXRlcmF0b3IpOwogICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY2FuU3Vycm91bmRDb250ZW50czogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLnN0YXJ0Q29udGFpbmVyKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuZW5kQ29udGFpbmVyKTsKCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZW50cyBjYW4gYmUgc3Vycm91bmRlZC4gU3BlY2lmaWNhbGx5LCB0aGlzIG1lYW5zIHdoZXRoZXIgdGhlIHJhbmdlIHBhcnRpYWxseSBzZWxlY3RzCiAgICAgICAgICAgIC8vIG5vIG5vbi10ZXh0IG5vZGVzLgogICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTsKICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXNJbnZhbGlkID0gKGl0ZXJhdG9yLl9maXJzdCAmJiAoaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2ZpcnN0LCB0aGlzKSkgfHwKICAgICAgICAgICAgICAgICAgICAoaXRlcmF0b3IuX2xhc3QgJiYgaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2xhc3QsIHRoaXMpKSk7CiAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICByZXR1cm4gIWJvdW5kYXJpZXNJbnZhbGlkOwogICAgICAgIH0sCgogICAgICAgIHN1cnJvdW5kQ29udGVudHM6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBzdXJyb3VuZE5vZGVUeXBlcyk7CgogICAgICAgICAgICBpZiAoIXRoaXMuY2FuU3Vycm91bmRDb250ZW50cygpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFeGNlcHRpb24oIkJBRF9CT1VOREFSWVBPSU5UU19FUlIiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgY29udGVudHMKICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmV4dHJhY3RDb250ZW50cygpOwoKICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGNoaWxkcmVuIG9mIHRoZSBub2RlCiAgICAgICAgICAgIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkgewogICAgICAgICAgICAgICAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSB7CiAgICAgICAgICAgICAgICAgIA==ICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBuZXcgbm9kZSBhbmQgYWRkIHRoZSBleHRyYWN0ZWQgY29udGVudHMKICAgICAgICAgICAgaW5zZXJ0Tm9kZUF0UG9zaXRpb24obm9kZSwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7CiAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoY29udGVudCk7CgogICAgICAgICAgICB0aGlzLnNlbGVjdE5vZGUobm9kZSk7CiAgICAgICAgfSwKCiAgICAgICAgY2xvbmVSYW5nZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgIHZhciByYW5nZSA9IG5ldyBSYW5nZShnZXRSYW5nZURvY3VtZW50KHRoaXMpKTsKICAgICAgICAgICAgdmFyIGkgPSByYW5nZVByb3BlcnRpZXMubGVuZ3RoLCBwcm9wOwogICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICBwcm9wID0gcmFuZ2VQcm9wZXJ0aWVzW2ldOwogICAgICAgICAgICAgICAgcmFuZ2VbcHJvcF0gPSB0aGlzW3Byb3BdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByYW5nZTsKICAgICAgICB9LAoKICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXI7CiAgICAgICAgICAgIGlmIChzYyA9PT0gdGhpcy5lbmRDb250YWluZXIgJiYgZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKHNjLm5vZGVUeXBlID09IDMgfHwgc2Mubm9kZVR5cGUgPT0gNCkgPyBzYy5kYXRhLnNsaWNlKHRoaXMuc3RhcnRPZmZzZXQsIHRoaXMuZW5kT2Zmc2V0KSA6ICIiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHRleHRCaXRzID0gW10sIGl0ZXJhdG9yID0gbmV3IFJhbmdlSXRlcmF0b3IodGhpcywgdHJ1ZSk7CgogICAgICAgICAgICAgICAgaXRlcmF0ZVN1YnRyZWUoaXRlcmF0b3IsIGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgICAgICAgICAvLyBBY2NlcHQgb25seSB0ZXh0IG9yIENEQVRBIG5vZGVzLCBub3QgY29tbWVudHMKCiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyB8fCBub2RlLm5vZGVUeXBlID09IDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEJpdHMucHVzaChub2RlLmRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dEJpdHMuam9pbigiIik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBUaGUgbWV0aG9kcyBiZWxvdyBhcmUgYWxsIG5vbi1zdGFuZGFyZC4gVGhlIGZvbGxvd2luZyBiYXRjaCB3ZXJlIGludHJvZHVjZWQgYnkgTW96aWxsYSBidXQgaGF2ZSBzaW5jZQogICAgICAgIC8vIGJlZW4gcmVtb3ZlZCBmcm9tIE1vemlsbGEuCgogICAgICAgIGNvbXBhcmVOb2RlOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CgogICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlOwogICAgICAgICAgICB2YXIgbm9kZUluZGV4ID0gZG9tLmdldE5vZGVJbmRleChub2RlKTsKCiAgICAgICAgICAgIGlmICghcGFyZW50KSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJOT1RfRk9VTkRfRVJSIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzdGFydENvbXBhcmlzb24gPSB0aGlzLmNvbXBhcmVQb2ludChwYXJlbnQsIG5vZGVJbmRleCksCiAgICAgICAgICAgICAgICBlbmRDb21wYXJpc29uID0gdGhpcy5jb21wYXJlUG9pbnQocGFyZW50LCBub2RlSW5kZXggKyAxKTsKCiAgICAgICAgICAgIGlmIChzdGFydENvbXBhcmlzb24gPCAwKSB7IC8vIE5vZGUgc3RhcnRzIGJlZm9yZQogICAgICAgICAgICAgICAgcmV0dXJuIChlbmRDb21wYXJpc29uID4gMCkgPyBuX2JfYSA6IG5fYjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAoZW5kQ29tcGFyaXNvbiA+IDApID8gbl9hIDogbl9pOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY29tcGFyZVBvaW50OiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZShub2RlLCAiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIik7CiAgICAgICAgICAgIGFzc2VydFNhbWVEb2N1bWVudE9yRnJhZ21lbnQobm9kZSwgdGhpcy5zdGFydENvbnRhaW5lcik7CgogICAgICAgICAgICBpZiAoZG9tLmNvbXBhcmVQb2ludHMobm9kZSwgb2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KSA8IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChkb20uY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPiAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9LAoKICAgICAgICBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQ6IGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCwKCiAgICAgICAgdG9IdG1sOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGdldFJhbmdlRG9jdW1lbnQodGhpcykuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNsb25lQ29udGVudHMoKSk7CiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MOwogICAgICAgIH0sCgogICAgICAgIC8vIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoaXMgbWV0aG9kIGNvbnNpZGVycyBhIG5vZGUgdGhhdCBib3JkZXJzIGEgcmFuZ2UgaW50ZXJzZWN0cwogICAgICAgIC8vIHdpdGggaXQgKGFzIGluIFdlYktpdCkgb3Igbm90IChhcyBpbiBHZWNrbyBwcmUtMS45LCBhbmQgdGhlIGRlZmF1bHQpCiAgICAgICAgaW50ZXJzZWN0c05vZGU6IGZ1bmN0aW9uKG5vZGUsIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZShub2RlLCAiTk9UX0ZPVU5EX0VSUiIpOwogICAgICAgICAgICBpZiAoZG9tLmdldERvY3VtZW50KG5vZGUpICE9PSBnZXRSYW5nZURvY3VtZW50KHRoaXMpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUsIG9mZnNldCA9IGRvbS5nZXROb2RlSW5kZXgobm9kZSk7CiAgICAgICAgICAgIGFzc2VydE5vZGUocGFyZW50LCAiTk9UX0ZPVU5EX0VSUiIpOwoKICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGRvbS5jb21wYXJlUG9pbnRzKHBhcmVudCwgb2Zmc2V0LCB0aGlzLmVuZENvbnRhaW5lciwgdGhpcy5lbmRPZmZzZXQpLAogICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IGRvbS5jb21wYXJlUG9pbnRzKHBhcmVudCwgb2Zmc2V0ICsgMSwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7CgogICAgICAgICAgICByZXR1cm4gdG91Y2hpbmdJc0ludGVyc2VjdGluZyA/IHN0YXJ0Q29tcGFyaXNvbiA8PSAwICYmIGVuZENvbXBhcmlzb24gPj0gMCA6IHN0YXJ0Q29tcGFyaXNvbiA8IDAgJiYgZW5kQ29tcGFyaXNvbiA+IDA7CiAgICAgICAgfSwKCgogICAgICAgIGlzUG9pbnRJblJhbmdlOiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZShub2RlLCAiSElFUkFSQ0hZXw==UkVRVUVTVF9FUlIiKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKTsKCiAgICAgICAgICAgIHJldHVybiAoZG9tLmNvbXBhcmVQb2ludHMobm9kZSwgb2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KSA+PSAwKSAmJgogICAgICAgICAgICAgICAgICAgKGRvbS5jb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSA8PSAwKTsKICAgICAgICB9LAoKICAgICAgICAvLyBUaGUgbWV0aG9kcyBiZWxvdyBhcmUgbm9uLXN0YW5kYXJkIGFuZCBpbnZlbnRlZCBieSBtZS4KCiAgICAgICAgLy8gU2hhcmluZyBhIGJvdW5kYXJ5IHN0YXJ0LXRvLWVuZCBvciBlbmQtdG8tc3RhcnQgZG9lcyBub3QgY291bnQgYXMgaW50ZXJzZWN0aW9uLgogICAgICAgIGludGVyc2VjdHNSYW5nZTogZnVuY3Rpb24ocmFuZ2UsIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKCiAgICAgICAgICAgIGlmIChnZXRSYW5nZURvY3VtZW50KHJhbmdlKSAhPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJXUk9OR19ET0NVTUVOVF9FUlIiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGRvbS5jb21wYXJlUG9pbnRzKHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQsIHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KSwKICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBkb20uY29tcGFyZVBvaW50cyh0aGlzLmVuZENvbnRhaW5lciwgdGhpcy5lbmRPZmZzZXQsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7CgogICAgICAgICAgICByZXR1cm4gdG91Y2hpbmdJc0ludGVyc2VjdGluZyA/IHN0YXJ0Q29tcGFyaXNvbiA8PSAwICYmIGVuZENvbXBhcmlzb24gPj0gMCA6IHN0YXJ0Q29tcGFyaXNvbiA8IDAgJiYgZW5kQ29tcGFyaXNvbiA+IDA7CiAgICAgICAgfSwKCiAgICAgICAgaW50ZXJzZWN0aW9uOiBmdW5jdGlvbihyYW5nZSkgewogICAgICAgICAgICBpZiAodGhpcy5pbnRlcnNlY3RzUmFuZ2UocmFuZ2UpKSB7CiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gZG9tLmNvbXBhcmVQb2ludHModGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KSwKICAgICAgICAgICAgICAgICAgICBlbmRDb21wYXJpc29uID0gZG9tLmNvbXBhcmVQb2ludHModGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0LCByYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7CgogICAgICAgICAgICAgICAgdmFyIGludGVyc2VjdGlvblJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCk7CgogICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29tcGFyaXNvbiA9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZW5kQ29tcGFyaXNvbiA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25SYW5nZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAoKICAgICAgICB1bmlvbjogZnVuY3Rpb24ocmFuZ2UpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c1JhbmdlKHJhbmdlLCB0cnVlKSkgewogICAgICAgICAgICAgICAgdmFyIHVuaW9uUmFuZ2UgPSB0aGlzLmNsb25lUmFuZ2UoKTsKICAgICAgICAgICAgICAgIGlmIChkb20uY29tcGFyZVBvaW50cyhyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpID09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgdW5pb25SYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGRvbS5jb21wYXJlUG9pbnRzKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCB0aGlzLmVuZENvbnRhaW5lciwgdGhpcy5lbmRPZmZzZXQpID09IDEpIHsKICAgICAgICAgICAgICAgICAgICB1bmlvblJhbmdlLnNldEVuZChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdW5pb25SYW5nZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUV4Y2VwdGlvbigiUmFuZ2VzIGRvIG5vdCBpbnRlcnNlY3QiKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGNvbnRhaW5zTm9kZTogZnVuY3Rpb24obm9kZSwgYWxsb3dQYXJ0aWFsKSB7CiAgICAgICAgICAgIGlmIChhbGxvd1BhcnRpYWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVyc2VjdHNOb2RlKG5vZGUsIGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVOb2RlKG5vZGUpID09IG5faTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGNvbnRhaW5zTm9kZUNvbnRlbnRzOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVQb2ludChub2RlLCAwKSA+PSAwICYmIHRoaXMuY29tcGFyZVBvaW50KG5vZGUsIGRvbS5nZXROb2RlTGVuZ3RoKG5vZGUpKSA8PSAwOwogICAgICAgIH0sCgogICAgICAgIGNvbnRhaW5zUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVyc2VjdGlvbihyYW5nZSkuZXF1YWxzKHJhbmdlKTsKICAgICAgICB9LAoKICAgICAgICBjb250YWluc05vZGVUZXh0OiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIHZhciBub2RlUmFuZ2UgPSB0aGlzLmNsb25lUmFuZ2UoKTsKICAgICAgICAgICAgbm9kZVJhbmdlLnNlbGVjdE5vZGUobm9kZSk7CiAgICAgICAgICAgIHZhciB0ZXh0Tm9kZXMgPSBub2RlUmFuZ2UuZ2V0Tm9kZXMoWzNdKTsKICAgICAgICAgICAgaWYgKHRleHROb2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBub2RlUmFuZ2Uuc2V0U3RhcnQodGV4dE5vZGVzWzBdLCAwKTsKICAgICAgICAgICAgICAgIHZhciBsYXN0VGV4dE5vZGUgPSB0ZXh0Tm9kZXMucG9wKCk7CiAgICAgICAgICAgICAgICBub2RlUmFuZ2Uuc2V0RW5kKGxhc3RUZXh0Tm9kZSwgbGFzdFRleHROb2RlLmxlbmd0aCk7CiAgICAgICAgICAgICAgICB2YXIgY29udGFpbnMgPSB0aGlzLmNvbnRhaW5zUmFuZ2Uobm9kZVJhbmdlKTsKICAgICAgICAgICAgICAgIG5vZGVSYW5nZS5kZXRhY2goKTsKICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluczsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5zTm9kZUNvbnRlbnRzKG5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY3JlYXRlTm9kZUl0ZXJhdG9yOiBmdW5jdGlvbihub2RlVHlwZXMsIGZpbHRlcikgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICByZXR1cm4gbmV3IFJhbmdlTm9kZUl0ZXJhdG9yKHRoaXMsIG5vZGVUeXBlcywgZmlsdGVyKTsKICAgICAgICB9LAoKICAgICAgICBnZXROb2RlczogZnVuY3Rpb24obm9kZVR5cGVzLCBmaWx0ZXIpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIGdldE5vZGVzSW5SYW5nZSh0aGlzLCBub2RlVHlwZXMsIGZpbHRlcg==KTsKICAgICAgICB9LAoKICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRSYW5nZURvY3VtZW50KHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIGNvbGxhcHNlQmVmb3JlOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwoKICAgICAgICAgICAgdGhpcy5zZXRFbmRCZWZvcmUobm9kZSk7CiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UoZmFsc2UpOwogICAgICAgIH0sCgogICAgICAgIGNvbGxhcHNlQWZ0ZXI6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CgogICAgICAgICAgICB0aGlzLnNldFN0YXJ0QWZ0ZXIobm9kZSk7CiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodHJ1ZSk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0TmFtZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAiRG9tUmFuZ2UiOwogICAgICAgIH0sCgogICAgICAgIGVxdWFsczogZnVuY3Rpb24ocmFuZ2UpIHsKICAgICAgICAgICAgcmV0dXJuIFJhbmdlLnJhbmdlc0VxdWFsKHRoaXMsIHJhbmdlKTsKICAgICAgICB9LAoKICAgICAgICBpc1ZhbGlkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGlzUmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICB9LAoKICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7CiAgICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiBjb3B5Q29tcGFyaXNvbkNvbnN0YW50c1RvT2JqZWN0KG9iaikgewogICAgICAgIG9iai5TVEFSVF9UT19TVEFSVCA9IHMyczsKICAgICAgICBvYmouU1RBUlRfVE9fRU5EID0gczJlOwogICAgICAgIG9iai5FTkRfVE9fRU5EID0gZTJlOwogICAgICAgIG9iai5FTkRfVE9fU1RBUlQgPSBlMnM7CgogICAgICAgIG9iai5OT0RFX0JFRk9SRSA9IG5fYjsKICAgICAgICBvYmouTk9ERV9BRlRFUiA9IG5fYTsKICAgICAgICBvYmouTk9ERV9CRUZPUkVfQU5EX0FGVEVSID0gbl9iX2E7CiAgICAgICAgb2JqLk5PREVfSU5TSURFID0gbl9pOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzKGNvbnN0cnVjdG9yKSB7CiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdChjb25zdHJ1Y3Rvcik7CiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdChjb25zdHJ1Y3Rvci5wcm90b3R5cGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIocmVtb3ZlciwgYm91bmRhcnlVcGRhdGVyKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwoKICAgICAgICAgICAgdmFyIHNjID0gdGhpcy5zdGFydENvbnRhaW5lciwgc28gPSB0aGlzLnN0YXJ0T2Zmc2V0LCByb290ID0gdGhpcy5jb21tb25BbmNlc3RvckNvbnRhaW5lcjsKCiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpOwoKICAgICAgICAgICAgLy8gV29yayBvdXQgd2hlcmUgdG8gcG9zaXRpb24gdGhlIHJhbmdlIGFmdGVyIGNvbnRlbnQgcmVtb3ZhbAogICAgICAgICAgICB2YXIgbm9kZSwgYm91bmRhcnk7CiAgICAgICAgICAgIGlmIChzYyAhPT0gcm9vdCkgewogICAgICAgICAgICAgICAgbm9kZSA9IGRvbS5nZXRDbG9zZXN0QW5jZXN0b3JJbihzYywgcm9vdCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBib3VuZGFyeSA9IGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpOwogICAgICAgICAgICAgICAgc2MgPSBib3VuZGFyeS5ub2RlOwogICAgICAgICAgICAgICAgc28gPSBib3VuZGFyeS5vZmZzZXQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIG5vbmUgb2YgdGhlIHJhbmdlIGlzIHJlYWQtb25seQogICAgICAgICAgICBpdGVyYXRlU3VidHJlZShpdGVyYXRvciwgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KTsKCiAgICAgICAgICAgIGl0ZXJhdG9yLnJlc2V0KCk7CgogICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGNvbnRlbnQKICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gcmVtb3ZlcihpdGVyYXRvcik7CiAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwoKICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV3IHBvc2l0aW9uCiAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBzYywgc28sIHNjLCBzbyk7CgogICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVQcm90b3R5cGVSYW5nZShjb25zdHJ1Y3RvciwgYm91bmRhcnlVcGRhdGVyLCBkZXRhY2hlcikgewogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihpc0JlZm9yZSwgaXNTdGFydCkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGJlZm9yZUFmdGVyTm9kZVR5cGVzKTsKICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUoZ2V0Um9vdENvbnRhaW5lcihub2RlKSwgcm9vdENvbnRhaW5lck5vZGVUeXBlcyk7CgogICAgICAgICAgICAgICAgdmFyIGJvdW5kYXJ5ID0gKGlzQmVmb3JlID8gZ2V0Qm91bmRhcnlCZWZvcmVOb2RlIDogZ2V0Qm91bmRhcnlBZnRlck5vZGUpKG5vZGUpOwogICAgICAgICAgICAgICAgKGlzU3RhcnQgPyBzZXRSYW5nZVN0YXJ0IDogc2V0UmFuZ2VFbmQpKHRoaXMsIGJvdW5kYXJ5Lm5vZGUsIGJvdW5kYXJ5Lm9mZnNldCk7CiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXRSYW5nZVN0YXJ0KHJhbmdlLCBub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgdmFyIGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyLCBlbyA9IHJhbmdlLmVuZE9mZnNldDsKICAgICAgICAgICAgaWYgKG5vZGUgIT09IHJhbmdlLnN0YXJ0Q29udGFpbmVyIHx8IG9mZnNldCAhPT0gcmFuZ2Uuc3RhcnRPZmZzZXQpIHsKICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSByb290IGNvbnRhaW5lcnMgb2YgdGhlIHJhbmdlIGFuZCB0aGUgbmV3IGJvdW5kYXJ5LCBhbmQgYWxzbyBjaGVjayB3aGV0aGVyIHRoZSBuZXcgYm91bmRhcnkKICAgICAgICAgICAgICAgIC8vIGlzIGFmdGVyIHRoZSBjdXJyZW50IGVuZC4gSW4gZWl0aGVyIGNhc2UsIGNvbGxhcHNlIHRoZSByYW5nZSB0byB0aGUgbmV3IHBvc2l0aW9uCiAgICAgICAgICAgICAgICBpZiAoZ2V0Um9vdENvbnRhaW5lcihub2RlKSAhPSBnZXRSb290Q29udGFpbmVyKGVjKSB8fCBkb20uY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIGVjLCBlbykgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTsKICAgICAgICAgICAgICAgICAgICBlbyA9IG9mZnNldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcihyYW5nZSwgbm9kZSwgb2Zmc2V0LCBlYywgZW8pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXRSYW5nZUVuZChyYW5nZSwgbm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgIHZhciBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0OwogICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2UuZW5kQ29udGFpbmVyIHx8IG9mZnNldCAhPT0gcmFuZ2UuZW5kT2Zmc2V0KSB7CiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgcm9vdCBjb250YWluZXJzIG9mIHRoZSByYW5nZSBhbmQgdGhlIG5ldyBib3VuZGFyeSwgYW5kIGFsc28gY2hlY2sgd2hldGhlciB0aGUgbmV3IGJvdW5kYXJ5CiAgICAgICAgICAgICAgICAvLyBpcyBhZnRlciB0aGUgY3VycmVudCBlbmQuIEluIGVpdGhlciBjYXNlLCBjb2xsYXBzZSB0aGUgcmFuZ2UgdG8gdGhlIG5ldyBwb3NpdGlvbgogICAgICAgICAgICAgICAgaWYgKGdldFJvb3RDb250YWluZXIobm9kZSkgIT0gZ2V0Um9vdENvbnRhaW5lcihzYykgfHwgZG9tLmNvbXBhcmVQb2ludA==cyhub2RlLCBvZmZzZXQsIHNjLCBzbykgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBzYyA9IG5vZGU7CiAgICAgICAgICAgICAgICAgICAgc28gPSBvZmZzZXQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIocmFuZ2UsIHNjLCBzbywgbm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0UmFuZ2VTdGFydEFuZEVuZChyYW5nZSwgbm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgIGlmIChub2RlICE9PSByYW5nZS5zdGFydENvbnRhaW5lciB8fCBvZmZzZXQgIT09IHJhbmdlLnN0YXJ0T2Zmc2V0IHx8IG5vZGUgIT09IHJhbmdlLmVuZENvbnRhaW5lciB8fCBvZmZzZXQgIT09IHJhbmdlLmVuZE9mZnNldCkgewogICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHJhbmdlLCBub2RlLCBvZmZzZXQsIG5vZGUsIG9mZnNldCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSYW5nZVByb3RvdHlwZSgpOwoKICAgICAgICBhcGkudXRpbC5leHRlbmQoY29uc3RydWN0b3IucHJvdG90eXBlLCB7CiAgICAgICAgICAgIHNldFN0YXJ0OiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTsKICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCk7CgogICAgICAgICAgICAgICAgc2V0UmFuZ2VTdGFydCh0aGlzLCBub2RlLCBvZmZzZXQpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2V0RW5kOiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTsKICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCk7CgogICAgICAgICAgICAgICAgc2V0UmFuZ2VFbmQodGhpcywgbm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldFN0YXJ0QmVmb3JlOiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIodHJ1ZSwgdHJ1ZSksCiAgICAgICAgICAgIHNldFN0YXJ0QWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgdHJ1ZSksCiAgICAgICAgICAgIHNldEVuZEJlZm9yZTogY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKHRydWUsIGZhbHNlKSwKICAgICAgICAgICAgc2V0RW5kQWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgZmFsc2UpLAoKICAgICAgICAgICAgY29sbGFwc2U6IGZ1bmN0aW9uKGlzU3RhcnQpIHsKICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAoaXNTdGFydCkgewogICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNlbGVjdE5vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgLy8gVGhpcyBkb2Vzbid0IHNlZW0gd2VsbCBzcGVjaWZpZWQ6IHRoZSBzcGVjIHRhbGtzIG9ubHkgYWJvdXQgc2VsZWN0aW5nIHRoZSBub2RlJ3MgY29udGVudHMsIHdoaWNoCiAgICAgICAgICAgICAgICAvLyBjb3VsZCBiZSB0YWtlbiB0byBtZWFuIG9ubHkgaXRzIGNoaWxkcmVuLiBIb3dldmVyLCBicm93c2VycyBpbXBsZW1lbnQgdGhpcyB0aGUgc2FtZSBhcyBzZWxlY3ROb2RlIGZvcgogICAgICAgICAgICAgICAgLy8gdGV4dCBub2Rlcywgc28gSSBzaGFsbCBkbyBsaWtld2lzZQogICAgICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CiAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIHRydWUpOwoKICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBub2RlLCAwLCBub2RlLCBkb20uZ2V0Tm9kZUxlbmd0aChub2RlKSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzZWxlY3ROb2RlOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgZmFsc2UpOwogICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBiZWZvcmVBZnRlck5vZGVUeXBlcyk7CgogICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gZ2V0Qm91bmRhcnlCZWZvcmVOb2RlKG5vZGUpLCBlbmQgPSBnZXRCb3VuZGFyeUFmdGVyTm9kZShub2RlKTsKICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBzdGFydC5ub2RlLCBzdGFydC5vZmZzZXQsIGVuZC5ub2RlLCBlbmQub2Zmc2V0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGV4dHJhY3RDb250ZW50czogY3JlYXRlUmFuZ2VDb250ZW50UmVtb3ZlcihleHRyYWN0U3VidHJlZSwgYm91bmRhcnlVcGRhdGVyKSwKCiAgICAgICAgICAgIGRlbGV0ZUNvbnRlbnRzOiBjcmVhdGVSYW5nZUNvbnRlbnRSZW1vdmVyKGRlbGV0ZVN1YnRyZWUsIGJvdW5kYXJ5VXBkYXRlciksCgogICAgICAgICAgICBjYW5TdXJyb3VuZENvbnRlbnRzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5zdGFydENvbnRhaW5lcik7CiAgICAgICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5lbmRDb250YWluZXIpOwoKICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZW50cyBjYW4gYmUgc3Vycm91bmRlZC4gU3BlY2lmaWNhbGx5LCB0aGlzIG1lYW5zIHdoZXRoZXIgdGhlIHJhbmdlIHBhcnRpYWxseSBzZWxlY3RzCiAgICAgICAgICAgICAgICAvLyBubyBub24tdGV4dCBub2Rlcy4KICAgICAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpOwogICAgICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXNJbnZhbGlkID0gKGl0ZXJhdG9yLl9maXJzdCAmJiAoaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2ZpcnN0LCB0aGlzKSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZXJhdG9yLl9sYXN0ICYmIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9sYXN0LCB0aGlzKSkpOwogICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gIWJvdW5kYXJpZXNJbnZhbGlkOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGRldGFjaGVyKHRoaXMpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc3BsaXRCb3VuZGFyaWVzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CgoKICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXIsIHNvID0gdGhpcy5zdGFydE9mZnNldCwgZWMgPSB0aGlzLmVuZENvbnRhaW5lciwgZW8gPSB0aGlzLmVuZE9mZnNldDsKICAgICAgICAgICAgICAgIHZhciBzdGFydEVuZFNhbWUgPSAoc2MgPT09IGVjKTsKCiAgICAgICAgICAgICAgICBpZiAoZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUoZWMpICYmIGVvID4gMCAmJiBlbyA8IGVjLmxlbmd0aCkgewogICAgIA==ICAgICAgICAgICAgICAgZG9tLnNwbGl0RGF0YU5vZGUoZWMsIGVvKTsKCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKHNjKSAmJiBzbyA+IDAgJiYgc28gPCBzYy5sZW5ndGgpIHsKCiAgICAgICAgICAgICAgICAgICAgc2MgPSBkb20uc3BsaXREYXRhTm9kZShzYywgc28pOwogICAgICAgICAgICAgICAgICAgIGlmIChzdGFydEVuZFNhbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZW8gLT0gc287CiAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gc2M7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlYyA9PSBzYy5wYXJlbnROb2RlICYmIGVvID49IGRvbS5nZXROb2RlSW5kZXgoc2MpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVvKys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHNvID0gMDsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbm9ybWFsaXplQm91bmRhcmllczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwoKICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXIsIHNvID0gdGhpcy5zdGFydE9mZnNldCwgZWMgPSB0aGlzLmVuZENvbnRhaW5lciwgZW8gPSB0aGlzLmVuZE9mZnNldDsKCiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VGb3J3YXJkID0gZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gbm9kZS5uZXh0U2libGluZzsKICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICBlbyA9IG5vZGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZERhdGEoc2libGluZy5kYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIG1lcmdlQmFja3dhcmQgPSBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBub2RlLnByZXZpb3VzU2libGluZzsKICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2MgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUxlbmd0aCA9IG5vZGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBzbyA9IHNpYmxpbmcubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmluc2VydERhdGEoMCwgc2libGluZy5kYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2MgPT0gZWMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvICs9IHNvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBzYzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlYyA9PSBub2RlLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBkb20uZ2V0Tm9kZUluZGV4KG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVvID09IG5vZGVJbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbyA9IG5vZGVMZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVvID4gbm9kZUluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8tLTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZVN0YXJ0ID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICBpZiAoZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUoZWMpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVjLmxlbmd0aCA9PSBlbykgewogICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUZvcndhcmQoZWMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVvID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kTm9kZSA9IGVjLmNoaWxkTm9kZXNbZW8gLSAxXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZE5vZGUgJiYgZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUoZW5kTm9kZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlRm9yd2FyZChlbmROb2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVTdGFydCA9ICF0aGlzLmNvbGxhcHNlZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbyA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUJhY2t3YXJkKHNjKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbyA8IHNjLmNoaWxkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnROb2RlID0gc2MuY2hpbGROb2Rlc1tzb107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnROb2RlICYmIGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKHN0YXJ0Tm9kZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUJhY2t3YXJkKHN0YXJ0Tm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNjID0gZWM7CiAgICAgICAgICAgICAgICAgICAgc28gPSBlbzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29sbGFwc2VUb1BvaW50OiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwoKICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpOwoKICAgICAgICAgICAgICAgIHNldFJhbmdlU3RhcnRBbmRFbmQodGhpcywgbm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBjb3B5Q29tcGFyaXNvbkNvbnN0YW50cyhjb25zdHJ1Y3Rvcik7CiAgICB9CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvLyBVcGRhdGVzIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIGFuZCBjb2xsYXBzZWQgYWZ0ZXIgYm91bmRhcnkgY2hhbmdlCiAgICBmdW5jdGlvbiB1cGRhdGVDb2xsYXBzZWRBbmRDb21tb25BbmNlc3Rvcg==KHJhbmdlKSB7CiAgICAgICAgcmFuZ2UuY29sbGFwc2VkID0gKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IHJhbmdlLmVuZE9mZnNldCk7CiAgICAgICAgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb2xsYXBzZWQgPwogICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2UuZW5kQ29udGFpbmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVCb3VuZGFyaWVzKHJhbmdlLCBzdGFydENvbnRhaW5lciwgc3RhcnRPZmZzZXQsIGVuZENvbnRhaW5lciwgZW5kT2Zmc2V0KSB7CiAgICAgICAgdmFyIHN0YXJ0TW92ZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgIT09IHN0YXJ0Q29udGFpbmVyIHx8IHJhbmdlLnN0YXJ0T2Zmc2V0ICE9PSBzdGFydE9mZnNldCk7CiAgICAgICAgdmFyIGVuZE1vdmVkID0gKHJhbmdlLmVuZENvbnRhaW5lciAhPT0gZW5kQ29udGFpbmVyIHx8IHJhbmdlLmVuZE9mZnNldCAhPT0gZW5kT2Zmc2V0KTsKCiAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgPSBzdGFydENvbnRhaW5lcjsKICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IHN0YXJ0T2Zmc2V0OwogICAgICAgIHJhbmdlLmVuZENvbnRhaW5lciA9IGVuZENvbnRhaW5lcjsKICAgICAgICByYW5nZS5lbmRPZmZzZXQgPSBlbmRPZmZzZXQ7CgogICAgICAgIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHJhbmdlKTsKICAgICAgICBkaXNwYXRjaEV2ZW50KHJhbmdlLCAiYm91bmRhcnljaGFuZ2UiLCB7c3RhcnRNb3ZlZDogc3RhcnRNb3ZlZCwgZW5kTW92ZWQ6IGVuZE1vdmVkfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZGV0YWNoKHJhbmdlKSB7CiAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQocmFuZ2UpOwogICAgICAgIHJhbmdlLnN0YXJ0Q29udGFpbmVyID0gcmFuZ2Uuc3RhcnRPZmZzZXQgPSByYW5nZS5lbmRDb250YWluZXIgPSByYW5nZS5lbmRPZmZzZXQgPSBudWxsOwogICAgICAgIHJhbmdlLmNvbGxhcHNlZCA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gbnVsbDsKICAgICAgICBkaXNwYXRjaEV2ZW50KHJhbmdlLCAiZGV0YWNoIiwgbnVsbCk7CiAgICAgICAgcmFuZ2UuX2xpc3RlbmVycyA9IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBAY29uc3RydWN0b3IKICAgICAqLwogICAgZnVuY3Rpb24gUmFuZ2UoZG9jKSB7CiAgICAgICAgdGhpcy5zdGFydENvbnRhaW5lciA9IGRvYzsKICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gMDsKICAgICAgICB0aGlzLmVuZENvbnRhaW5lciA9IGRvYzsKICAgICAgICB0aGlzLmVuZE9mZnNldCA9IDA7CiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gewogICAgICAgICAgICBib3VuZGFyeWNoYW5nZTogW10sCiAgICAgICAgICAgIGRldGFjaDogW10KICAgICAgICB9OwogICAgICAgIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHRoaXMpOwogICAgfQoKICAgIGNyZWF0ZVByb3RvdHlwZVJhbmdlKFJhbmdlLCB1cGRhdGVCb3VuZGFyaWVzLCBkZXRhY2gpOwoKICAgIGFwaS5yYW5nZVByb3RvdHlwZSA9IFJhbmdlUHJvdG90eXBlLnByb3RvdHlwZTsKCiAgICBSYW5nZS5yYW5nZVByb3BlcnRpZXMgPSByYW5nZVByb3BlcnRpZXM7CiAgICBSYW5nZS5SYW5nZUl0ZXJhdG9yID0gUmFuZ2VJdGVyYXRvcjsKICAgIFJhbmdlLmNvcHlDb21wYXJpc29uQ29uc3RhbnRzID0gY29weUNvbXBhcmlzb25Db25zdGFudHM7CiAgICBSYW5nZS5jcmVhdGVQcm90b3R5cGVSYW5nZSA9IGNyZWF0ZVByb3RvdHlwZVJhbmdlOwogICAgUmFuZ2UuaW5zcGVjdCA9IGluc3BlY3Q7CiAgICBSYW5nZS5nZXRSYW5nZURvY3VtZW50ID0gZ2V0UmFuZ2VEb2N1bWVudDsKICAgIFJhbmdlLnJhbmdlc0VxdWFsID0gZnVuY3Rpb24ocjEsIHIyKSB7CiAgICAgICAgcmV0dXJuIHIxLnN0YXJ0Q29udGFpbmVyID09PSByMi5zdGFydENvbnRhaW5lciAmJgogICAgICAgICAgICAgICByMS5zdGFydE9mZnNldCA9PT0gcjIuc3RhcnRPZmZzZXQgJiYKICAgICAgICAgICAgICAgcjEuZW5kQ29udGFpbmVyID09PSByMi5lbmRDb250YWluZXIgJiYKICAgICAgICAgICAgICAgcjEuZW5kT2Zmc2V0ID09PSByMi5lbmRPZmZzZXQ7CiAgICB9OwoKICAgIGFwaS5Eb21SYW5nZSA9IFJhbmdlOwogICAgYXBpLlJhbmdlRXhjZXB0aW9uID0gUmFuZ2VFeGNlcHRpb247Cn0pO3Jhbmd5LmNyZWF0ZU1vZHVsZSgiV3JhcHBlZFJhbmdlIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCiAgICBhcGkucmVxdWlyZU1vZHVsZXMoIFsiRG9tVXRpbCIsICJEb21SYW5nZSJdICk7DQoNCiAgICAvKioNCiAgICAgKiBAY29uc3RydWN0b3INCiAgICAgKi8NCiAgICB2YXIgV3JhcHBlZFJhbmdlOw0KICAgIHZhciBkb20gPSBhcGkuZG9tOw0KICAgIHZhciBEb21Qb3NpdGlvbiA9IGRvbS5Eb21Qb3NpdGlvbjsNCiAgICB2YXIgRG9tUmFuZ2UgPSBhcGkuRG9tUmFuZ2U7DQoNCg0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIC8qDQogICAgVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIGEgYnVnIHdoZXJlIElFIHJldHVybnMgdGhlIHdyb25nIGNvbnRhaW5lciBlbGVtZW50IGZyb20gdGhlIFRleHRSYW5nZSdzIHBhcmVudEVsZW1lbnQoKQ0KICAgIG1ldGhvZC4gRm9yIGV4YW1wbGUsIGluIHRoZSBmb2xsb3dpbmcgKHdoZXJlIHBpcGVzIGRlbm90ZSB0aGUgc2VsZWN0aW9uIGJvdW5kYXJpZXMpOg0KDQogICAgPHVsIGlkPSJ1bCI+PGxpIGlkPSJhIj58IGEgPC9saT48bGkgaWQ9ImIiPiBiIHw8L2xpPjwvdWw+DQoNCiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTsNCiAgICBhbGVydChyYW5nZS5wYXJlbnRFbGVtZW50KCkuaWQpOyAvLyBTaG91bGQgYWxlcnQgInVsIiBidXQgYWxlcnRzICJiIg0KDQogICAgVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgY29tbW9uIGFuY2VzdG9yIG5vZGUgb2YgdGhlIGZvbGxvd2luZzoNCiAgICAtIHRoZSBwYXJlbnRFbGVtZW50KCkgb2YgdGhlIHRleHRSYW5nZQ0KICAgIC0gdGhlIHBhcmVudEVsZW1lbnQoKSBvZiB0aGUgdGV4dFJhbmdlIGFmdGVyIGNhbGxpbmcgY29sbGFwc2UodHJ1ZSkNCiAgICAtIHRoZSBwYXJlbnRFbGVtZW50KCkgb2YgdGhlIHRleHRSYW5nZSBhZnRlciBjYWxsaW5nIGNvbGxhcHNlKGZhbHNlKQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQodGV4dFJhbmdlKSB7DQogICAgICAgIHZhciBwYXJlbnRFbCA9IHRleHRSYW5nZS5wYXJlbnRFbGVtZW50KCk7DQoNCiAgICAgICAgdmFyIHJhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpOw0KICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTsNCiAgICAgICAgdmFyIHN0YXJ0RWwgPSByYW5nZS5wYXJlbnRFbGVtZW50KCk7DQogICAgICAgIHJhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpOw0KICAgICAgICByYW5nZS5jb2xsYXBzZShmYWxzZSk7DQogICAgICAgIHZhciBlbmRFbCA9IHJhbmdlLnBhcmVudEVsZW1lbnQoKTsNCiAgICAgICAgdmFyIHN0YXJ0RW5kQ29udGFpbmVyID0gKHN0YXJ0RWwgPT0gZW5kRWwpID8gc3RhcnRFbCA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihzdGFydEVsLCBlbmRFbCk7DQoNCiAgICAgICAgcmV0dXJuIHN0YXJ0RW5kQ29udGFpbmVyID09IHBhcmVudEVsID8gc3RhcnRFbmRDb250YWluZXIgOiBkb20uZ2V0Q29tbW9uQW5jZXN0b3IocGFyZW50RWwsIHN0YXJ0RW5kQ29udGFpbmVyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0ZXh0UmFuZ2VJc0NvbGxhcHNlZCh0ZXh0UmFuZ2UpIHsNCiAgICAgICAgcmV0dXJuIHRleHRSYW5nZS5jb21wYXJlRW5kUG9pbnRzKCJTdGFydFRvRW5kIiwgdGV4dFJhbmdlKSA9PSAwOw0KICAgIH0NCg0KICAgIC8vIEdldHMgdGhlIGJvdW5kYXJ5IG9mIGEgVGV4dA==UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0IG5vZGUuIFRoaXMgZnVuY3Rpb24gc3RhcnRlZCBvdXQgYXMNCiAgICAvLyBhbiBpbXByb3ZlZCB2ZXJzaW9uIG9mIGNvZGUgZm91bmQgaW4gVGltIENhbWVyb24gUnlhbidzIElFUmFuZ2UgKGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZXJhbmdlLykgYnV0IGhhcw0KICAgIC8vIGdyb3duLCBmaXhpbmcgcHJvYmxlbXMgd2l0aCBsaW5lIGJyZWFrcyBpbiBwcmVmb3JtYXR0ZWQgdGV4dCwgYWRkaW5nIHdvcmthcm91bmQgZm9yIElFIFRleHRSYW5nZSBidWdzLCBoYW5kbGluZw0KICAgIC8vIGZvciBpbnB1dHMgYW5kIGltYWdlcywgcGx1cyBvcHRpbWl6YXRpb25zLg0KICAgIGZ1bmN0aW9uIGdldFRleHRSYW5nZUJvdW5kYXJ5UG9zaXRpb24odGV4dFJhbmdlLCB3aG9sZVJhbmdlQ29udGFpbmVyRWxlbWVudCwgaXNTdGFydCwgaXNDb2xsYXBzZWQpIHsNCiAgICAgICAgdmFyIHdvcmtpbmdSYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTsNCg0KICAgICAgICB3b3JraW5nUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7DQogICAgICAgIHZhciBjb250YWluZXJFbGVtZW50ID0gd29ya2luZ1JhbmdlLnBhcmVudEVsZW1lbnQoKTsNCg0KICAgICAgICAvLyBTb21ldGltZXMgY29sbGFwc2luZyBhIFRleHRSYW5nZSB0aGF0J3MgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dCBub2RlIGNhbiBtb3ZlIGl0IGludG8gdGhlIHByZXZpb3VzIG5vZGUsIHNvDQogICAgICAgIC8vIGNoZWNrIGZvciB0aGF0DQogICAgICAgIC8vIFRPRE86IEZpbmQgb3V0IHdoZW4uIFdvcmthcm91bmQgZm9yIHdob2xlUmFuZ2VDb250YWluZXJFbGVtZW50IG1heSBicmVhayB0aGlzDQogICAgICAgIGlmICghZG9tLmlzQW5jZXN0b3JPZih3aG9sZVJhbmdlQ29udGFpbmVyRWxlbWVudCwgY29udGFpbmVyRWxlbWVudCwgdHJ1ZSkpIHsNCiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSB3aG9sZVJhbmdlQ29udGFpbmVyRWxlbWVudDsNCg0KICAgICAgICB9DQoNCg0KDQogICAgICAgIC8vIERlYWwgd2l0aCBub2RlcyB0aGF0IGNhbm5vdCAiY29udGFpbiByaWNoIEhUTUwgbWFya3VwIi4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnMgZm9ybSBpbnB1dHMsIGltYWdlcyBhbmQNCiAgICAgICAgLy8gc2ltaWxhci4gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTcwMzk1MCUyOFZTLjg1JTI5LmFzcHgNCiAgICAgICAgaWYgKCFjb250YWluZXJFbGVtZW50LmNhbkhhdmVIVE1MKSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IERvbVBvc2l0aW9uKGNvbnRhaW5lckVsZW1lbnQucGFyZW50Tm9kZSwgZG9tLmdldE5vZGVJbmRleChjb250YWluZXJFbGVtZW50KSk7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgd29ya2luZ05vZGUgPSBkb20uZ2V0RG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkuY3JlYXRlRWxlbWVudCgic3BhbiIpOw0KICAgICAgICB2YXIgY29tcGFyaXNvbiwgd29ya2luZ0NvbXBhcmlzb25UeXBlID0gaXNTdGFydCA/ICJTdGFydFRvU3RhcnQiIDogIlN0YXJ0VG9FbmQiOw0KICAgICAgICB2YXIgcHJldmlvdXNOb2RlLCBuZXh0Tm9kZSwgYm91bmRhcnlQb3NpdGlvbiwgYm91bmRhcnlOb2RlOw0KDQogICAgICAgIC8vIE1vdmUgdGhlIHdvcmtpbmcgcmFuZ2UgdGhyb3VnaCB0aGUgY29udGFpbmVyJ3MgY2hpbGRyZW4sIHN0YXJ0aW5nIGF0IHRoZSBlbmQgYW5kIHdvcmtpbmcgYmFja3dhcmRzLCB1bnRpbCB0aGUNCiAgICAgICAgLy8gd29ya2luZyByYW5nZSByZWFjaGVzIG9yIGdvZXMgcGFzdCB0aGUgYm91bmRhcnkgd2UncmUgaW50ZXJlc3RlZCBpbg0KICAgICAgICBkbyB7DQogICAgICAgICAgICBjb250YWluZXJFbGVtZW50Lmluc2VydEJlZm9yZSh3b3JraW5nTm9kZSwgd29ya2luZ05vZGUucHJldmlvdXNTaWJsaW5nKTsNCiAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dCh3b3JraW5nTm9kZSk7DQogICAgICAgIH0gd2hpbGUgKCAoY29tcGFyaXNvbiA9IHdvcmtpbmdSYW5nZS5jb21wYXJlRW5kUG9pbnRzKHdvcmtpbmdDb21wYXJpc29uVHlwZSwgdGV4dFJhbmdlKSkgPiAwICYmDQogICAgICAgICAgICAgICAgd29ya2luZ05vZGUucHJldmlvdXNTaWJsaW5nKTsNCg0KICAgICAgICAvLyBXZSd2ZSBub3cgcmVhY2hlZCBvciBnb25lIHBhc3QgdGhlIGJvdW5kYXJ5IG9mIHRoZSB0ZXh0IHJhbmdlIHdlJ3JlIGludGVyZXN0ZWQgaW4NCiAgICAgICAgLy8gc28gaGF2ZSBpZGVudGlmaWVkIHRoZSBub2RlIHdlIHdhbnQNCiAgICAgICAgYm91bmRhcnlOb2RlID0gd29ya2luZ05vZGUubmV4dFNpYmxpbmc7DQoNCiAgICAgICAgaWYgKGNvbXBhcmlzb24gPT0gLTEgJiYgYm91bmRhcnlOb2RlICYmIGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKGJvdW5kYXJ5Tm9kZSkpIHsNCiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjaGFyYWN0ZXIgZGF0YSBub2RlICh0ZXh0LCBjb21tZW50LCBjZGF0YSkuIFRoZSB3b3JraW5nIHJhbmdlIGlzIGNvbGxhcHNlZCBhdCB0aGUgc3RhcnQgb2YgdGhlDQogICAgICAgICAgICAvLyBub2RlIGNvbnRhaW5pbmcgdGhlIHRleHQgcmFuZ2UncyBib3VuZGFyeSwgc28gd2UgbW92ZSB0aGUgZW5kIG9mIHRoZSB3b3JraW5nIHJhbmdlIHRvIHRoZSBib3VuZGFyeSBwb2ludA0KICAgICAgICAgICAgLy8gYW5kIG1lYXN1cmUgdGhlIGxlbmd0aCBvZiBpdHMgdGV4dCB0byBnZXQgdGhlIGJvdW5kYXJ5J3Mgb2Zmc2V0IHdpdGhpbiB0aGUgbm9kZS4NCiAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5zZXRFbmRQb2ludChpc1N0YXJ0ID8gIkVuZFRvU3RhcnQiIDogIkVuZFRvRW5kIiwgdGV4dFJhbmdlKTsNCg0KDQogICAgICAgICAgICB2YXIgb2Zmc2V0Ow0KDQogICAgICAgICAgICBpZiAoL1tcclxuXS8udGVzdChib3VuZGFyeU5vZGUuZGF0YSkpIHsNCiAgICAgICAgICAgICAgICAvKg0KICAgICAgICAgICAgICAgIEZvciB0aGUgcGFydGljdWxhciBjYXNlIG9mIGEgYm91bmRhcnkgd2l0aGluIGEgdGV4dCBub2RlIGNvbnRhaW5pbmcgbGluZSBicmVha3MgKHdpdGhpbiBhIDxwcmU+IGVsZW1lbnQsDQogICAgICAgICAgICAgICAgZm9yIGV4YW1wbGUpLCB3ZSBuZWVkIGEgc2xpZ2h0bHkgY29tcGxpY2F0ZWQgYXBwcm9hY2ggdG8gZ2V0IHRoZSBib3VuZGFyeSdzIG9mZnNldCBpbiBJRS4gVGhlIGZhY3RzOg0KDQogICAgICAgICAgICAgICAgLSBFYWNoIGxpbmUgYnJlYWsgaXMgcmVwcmVzZW50ZWQgYXMgXHIgaW4gdGhlIHRleHQgbm9kZSdzIGRhdGEvbm9kZVZhbHVlIHByb3BlcnRpZXMNCiAgICAgICAgICAgICAgICAtIEVhY2ggbGluZSBicmVhayBpcyByZXByZXNlbnRlZCBhcyBcclxuIGluIHRoZSBUZXh0UmFuZ2UncyAndGV4dCcgcHJvcGVydHkNCiAgICAgICAgICAgICAgICAtIFRoZSAndGV4dCcgcHJvcGVydHkgb2YgdGhlIFRleHRSYW5nZSBkb2VzIG5vdCBjb250YWluIHRyYWlsaW5nIGxpbmUgYnJlYWtzDQoNCiAgICAgICAgICAgICAgICBUbyBnZXQgcm91bmQgdGhlIHByb2JsZW0gcHJlc2VudGVkIGJ5IHRoZSBmaW5hbCBmYWN0IGFib3ZlLCB3ZSBjYW4gdXNlIHRoZSBmYWN0IHRoYXQgVGV4dFJhbmdlJ3MNCiAgICAgICAgICAgICAgICBtb3ZlU3RhcnQoKSBhbmQgbW92ZUVuZCgpIG1ldGhvZHMgcmV0dXJuIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGNoYXJhY3RlcnMgbW92ZWQsIHdoaWNoIGlzIG5vdCBuZWNlc3NhcmlseQ0KICAgICAgICAgICAgICAgIHRoZSBzYW1lIGFzIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBpdCB3YXMgaW5zdHJ1Y3RlZCB0byBtb3ZlLiBUaGUgc2ltcGxlc3QgYXBwcm9hY2ggaXMgdG8gdXNlIHRoaXMgdG8NCiAgICAgICAgICAgICAgICBzdG9yZSB0aGUgY2hhcmFjdGVycyBtb3ZlZCB3aGVuIG1vdmluZyBib3RoIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSByYW5nZSB0byB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50DQogICAgICAgICAgICAgICAgYm9keSBhbmQgc3VidHJhY3RpbmcgdGhlIHN0YXJ0IG9mZnNldCBmcm9tIHRoZSBlbmQgb2Zmc2V0ICh0aGUgIm1vdmUtbmVnYXRpdmUtZ2F6aWxsaW9uIiBtZQ==dGhvZCkuDQogICAgICAgICAgICAgICAgSG93ZXZlciwgdGhpcyBpcyBleHRyZW1lbHkgc2xvdyB3aGVuIHRoZSBkb2N1bWVudCBpcyBsYXJnZSBhbmQgdGhlIHJhbmdlIGlzIG5lYXIgdGhlIGVuZCBvZiBpdC4gQ2xlYXJseQ0KICAgICAgICAgICAgICAgIGRvaW5nIHRoZSBtaXJyb3IgaW1hZ2UgKGkuZS4gbW92aW5nIHRoZSByYW5nZSBib3VuZGFyaWVzIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50KSBoYXMgdGhlIHNhbWUNCiAgICAgICAgICAgICAgICBwcm9ibGVtLg0KDQogICAgICAgICAgICAgICAgQW5vdGhlciBhcHByb2FjaCB0aGF0IHdvcmtzIGlzIHRvIHVzZSBtb3ZlU3RhcnQoKSB0byBtb3ZlIHRoZSBzdGFydCBib3VuZGFyeSBvZiB0aGUgcmFuZ2UgdXAgdG8gdGhlIGVuZA0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5IG9uZSBjaGFyYWN0ZXIgYXQgYSB0aW1lIGFuZCBpbmNyZW1lbnRpbmcgYSBjb3VudGVyIHdpdGggdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBtb3ZlU3RhcnQoKQ0KICAgICAgICAgICAgICAgIGNhbGwuIEhvd2V2ZXIsIHRoZSBjaGVjayBmb3Igd2hldGhlciB0aGUgc3RhcnQgYm91bmRhcnkgaGFzIHJlYWNoZWQgdGhlIGVuZCBib3VuZGFyeSBpcyBleHBlbnNpdmUsIHNvDQogICAgICAgICAgICAgICAgdGhpcyBtZXRob2QgaXMgc2xvdyAoYWx0aG91Z2ggdW5saWtlICJtb3ZlLW5lZ2F0aXZlLWdhemlsbGlvbiIgaXMgbGFyZ2VseSB1bmFmZmVjdGVkIGJ5IHRoZSBsb2NhdGlvbiBvZg0KICAgICAgICAgICAgICAgIHRoZSByYW5nZSB3aXRoaW4gdGhlIGRvY3VtZW50KS4NCg0KICAgICAgICAgICAgICAgIFRoZSBtZXRob2QgYmVsb3cgaXMgYSBoeWJyaWQgb2YgdGhlIHR3byBtZXRob2RzIGFib3ZlLiBJdCB1c2VzIHRoZSBmYWN0IHRoYXQgYSBzdHJpbmcgY29udGFpbmluZyB0aGUNCiAgICAgICAgICAgICAgICBUZXh0UmFuZ2UncyAndGV4dCcgcHJvcGVydHkgd2l0aCBlYWNoIFxyXG4gY29udmVydGVkIHRvIGEgc2luZ2xlIFxyIGNoYXJhY3RlciBjYW5ub3QgYmUgbG9uZ2VyIHRoYW4gdGhlDQogICAgICAgICAgICAgICAgdGV4dCBvZiB0aGUgVGV4dFJhbmdlLCBzbyB0aGUgc3RhcnQgb2YgdGhlIHJhbmdlIGlzIG1vdmVkIHRoYXQgbGVuZ3RoIGluaXRpYWxseSBhbmQgdGhlbiBhIGNoYXJhY3RlciBhdA0KICAgICAgICAgICAgICAgIGEgdGltZSB0byBtYWtlIHVwIGZvciBhbnkgdHJhaWxpbmcgbGluZSBicmVha3Mgbm90IGNvbnRhaW5lZCBpbiB0aGUgJ3RleHQnIHByb3BlcnR5LiBUaGlzIGhhcyBnb29kDQogICAgICAgICAgICAgICAgcGVyZm9ybWFuY2UgaW4gbW9zdCBzaXR1YXRpb25zIGNvbXBhcmVkIHRvIHRoZSBwcmV2aW91cyB0d28gbWV0aG9kcy4NCiAgICAgICAgICAgICAgICAqLw0KICAgICAgICAgICAgICAgIHZhciB0ZW1wUmFuZ2UgPSB3b3JraW5nUmFuZ2UuZHVwbGljYXRlKCk7DQogICAgICAgICAgICAgICAgdmFyIHJhbmdlTGVuZ3RoID0gdGVtcFJhbmdlLnRleHQucmVwbGFjZSgvXHJcbi9nLCAiXHIiKS5sZW5ndGg7DQoNCiAgICAgICAgICAgICAgICBvZmZzZXQgPSB0ZW1wUmFuZ2UubW92ZVN0YXJ0KCJjaGFyYWN0ZXIiLCByYW5nZUxlbmd0aCk7DQogICAgICAgICAgICAgICAgd2hpbGUgKCAoY29tcGFyaXNvbiA9IHRlbXBSYW5nZS5jb21wYXJlRW5kUG9pbnRzKCJTdGFydFRvRW5kIiwgdGVtcFJhbmdlKSkgPT0gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7DQogICAgICAgICAgICAgICAgICAgIHRlbXBSYW5nZS5tb3ZlU3RhcnQoImNoYXJhY3RlciIsIDEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgb2Zmc2V0ID0gd29ya2luZ1JhbmdlLnRleHQubGVuZ3RoOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihib3VuZGFyeU5vZGUsIG9mZnNldCk7DQogICAgICAgIH0gZWxzZSB7DQoNCg0KICAgICAgICAgICAgLy8gSWYgdGhlIGJvdW5kYXJ5IGltbWVkaWF0ZWx5IGZvbGxvd3MgYSBjaGFyYWN0ZXIgZGF0YSBub2RlIGFuZCB0aGlzIGlzIHRoZSBlbmQgYm91bmRhcnksIHdlIHNob3VsZCBmYXZvdXINCiAgICAgICAgICAgIC8vIGEgcG9zaXRpb24gd2l0aGluIHRoYXQsIGFuZCBsaWtld2lzZSBmb3IgYSBzdGFydCBib3VuZGFyeSBwcmVjZWRpbmcgYSBjaGFyYWN0ZXIgZGF0YSBub2RlDQogICAgICAgICAgICBwcmV2aW91c05vZGUgPSAoaXNDb2xsYXBzZWQgfHwgIWlzU3RhcnQpICYmIHdvcmtpbmdOb2RlLnByZXZpb3VzU2libGluZzsNCiAgICAgICAgICAgIG5leHROb2RlID0gKGlzQ29sbGFwc2VkIHx8IGlzU3RhcnQpICYmIHdvcmtpbmdOb2RlLm5leHRTaWJsaW5nOw0KDQoNCg0KICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKG5leHROb2RlKSkgew0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb24gPSBuZXcgRG9tUG9zaXRpb24obmV4dE5vZGUsIDApOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2aW91c05vZGUgJiYgZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGUocHJldmlvdXNOb2RlKSkgew0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb24gPSBuZXcgRG9tUG9zaXRpb24ocHJldmlvdXNOb2RlLCBwcmV2aW91c05vZGUubGVuZ3RoKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihjb250YWluZXJFbGVtZW50LCBkb20uZ2V0Tm9kZUluZGV4KHdvcmtpbmdOb2RlKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDbGVhbiB1cA0KICAgICAgICB3b3JraW5nTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdvcmtpbmdOb2RlKTsNCg0KICAgICAgICByZXR1cm4gYm91bmRhcnlQb3NpdGlvbjsNCiAgICB9DQoNCiAgICAvLyBSZXR1cm5zIGEgVGV4dFJhbmdlIHJlcHJlc2VudGluZyB0aGUgYm91bmRhcnkgb2YgYSBUZXh0UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0IG5vZGUuDQogICAgLy8gVGhpcyBmdW5jdGlvbiBzdGFydGVkIG91dCBhcyBhbiBvcHRpbWl6ZWQgdmVyc2lvbiBvZiBjb2RlIGZvdW5kIGluIFRpbSBDYW1lcm9uIFJ5YW4ncyBJRVJhbmdlDQogICAgLy8gKGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZXJhbmdlLykNCiAgICBmdW5jdGlvbiBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZShib3VuZGFyeVBvc2l0aW9uLCBpc1N0YXJ0KSB7DQogICAgICAgIHZhciBib3VuZGFyeU5vZGUsIGJvdW5kYXJ5UGFyZW50LCBib3VuZGFyeU9mZnNldCA9IGJvdW5kYXJ5UG9zaXRpb24ub2Zmc2V0Ow0KICAgICAgICB2YXIgZG9jID0gZG9tLmdldERvY3VtZW50KGJvdW5kYXJ5UG9zaXRpb24ubm9kZSk7DQogICAgICAgIHZhciB3b3JraW5nTm9kZSwgY2hpbGROb2Rlcywgd29ya2luZ1JhbmdlID0gZG9jLmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgIHZhciBub2RlSXNEYXRhTm9kZSA9IGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlKGJvdW5kYXJ5UG9zaXRpb24ubm9kZSk7DQoNCiAgICAgICAgaWYgKG5vZGVJc0RhdGFOb2RlKSB7DQogICAgICAgICAgICBib3VuZGFyeU5vZGUgPSBib3VuZGFyeVBvc2l0aW9uLm5vZGU7DQogICAgICAgICAgICBib3VuZGFyeVBhcmVudCA9IGJvdW5kYXJ5Tm9kZS5wYXJlbnROb2RlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgY2hpbGROb2RlcyA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZS5jaGlsZE5vZGVzOw0KICAgICAgICAgICAgYm91bmRhcnlOb2RlID0gKGJvdW5kYXJ5T2Zmc2V0IDwgY2hpbGROb2Rlcy5sZW5ndGgpID8gY2hpbGROb2Rlc1tib3VuZGFyeU9mZnNldF0gOiBudWxsOw0KICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQgPSBib3VuZGFyeVBvc2l0aW9uLm5vZGU7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBQb3NpdGlvbiB0aGUgcmFuZ2UgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBub2RlIGNvbnRhaW5pbmcgdGhlIGJvdW5kYXJ5DQogICAgICAgIHdvcmtpbmdOb2RlID0gZG9jLg==Y3JlYXRlRWxlbWVudCgic3BhbiIpOw0KDQogICAgICAgIC8vIE1ha2luZyB0aGUgd29ya2luZyBlbGVtZW50IG5vbi1lbXB0eSBlbGVtZW50IHBlcnN1YWRlcyBJRSB0byBjb25zaWRlciB0aGUgVGV4dFJhbmdlIGJvdW5kYXJ5IHRvIGJlIHdpdGhpbiB0aGUNCiAgICAgICAgLy8gZWxlbWVudCByYXRoZXIgdGhhbiBpbW1lZGlhdGVseSBiZWZvcmUgb3IgYWZ0ZXIgaXQsIHdoaWNoIGlzIHdoYXQgd2Ugd2FudA0KICAgICAgICB3b3JraW5nTm9kZS5pbm5lckhUTUwgPSAiJiNmZWZmOyI7DQoNCiAgICAgICAgLy8gaW5zZXJ0QmVmb3JlIGlzIHN1cHBvc2VkIHRvIHdvcmsgbGlrZSBhcHBlbmRDaGlsZCBpZiB0aGUgc2Vjb25kIHBhcmFtZXRlciBpcyBudWxsLiBIb3dldmVyLCBhIGJ1ZyByZXBvcnQNCiAgICAgICAgLy8gZm9yIElFUmFuZ2Ugc3VnZ2VzdHMgdGhhdCBpdCBjYW4gY3Jhc2ggdGhlIGJyb3dzZXI6IGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZXJhbmdlL2lzc3Vlcy9kZXRhaWw/aWQ9MTINCiAgICAgICAgaWYgKGJvdW5kYXJ5Tm9kZSkgew0KICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQuaW5zZXJ0QmVmb3JlKHdvcmtpbmdOb2RlLCBib3VuZGFyeU5vZGUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQuYXBwZW5kQ2hpbGQod29ya2luZ05vZGUpOw0KICAgICAgICB9DQoNCiAgICAgICAgd29ya2luZ1JhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHdvcmtpbmdOb2RlKTsNCiAgICAgICAgd29ya2luZ1JhbmdlLmNvbGxhcHNlKCFpc1N0YXJ0KTsNCg0KICAgICAgICAvLyBDbGVhbiB1cA0KICAgICAgICBib3VuZGFyeVBhcmVudC5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7DQoNCiAgICAgICAgLy8gTW92ZSB0aGUgd29ya2luZyByYW5nZSB0byB0aGUgdGV4dCBvZmZzZXQsIGlmIHJlcXVpcmVkDQogICAgICAgIGlmIChub2RlSXNEYXRhTm9kZSkgew0KICAgICAgICAgICAgd29ya2luZ1JhbmdlW2lzU3RhcnQgPyAibW92ZVN0YXJ0IiA6ICJtb3ZlRW5kIl0oImNoYXJhY3RlciIsIGJvdW5kYXJ5T2Zmc2V0KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB3b3JraW5nUmFuZ2U7DQogICAgfQ0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIGlmIChhcGkuZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlICYmICghYXBpLmZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UgfHwgIWFwaS5jb25maWcucHJlZmVyVGV4dFJhbmdlKSkgew0KICAgICAgICAvLyBUaGlzIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIGJyb3dzZXIncyBuYXRpdmUgRE9NIFJhbmdlLiBJdCBoYXMgdHdvIGFpbXM6DQogICAgICAgIC8vIC0gUHJvdmlkZSB3b3JrYXJvdW5kcyBmb3Igc3BlY2lmaWMgYnJvd3NlciBidWdzDQogICAgICAgIC8vIC0gcHJvdmlkZSBjb252ZW5pZW50IGV4dGVuc2lvbnMsIHdoaWNoIGFyZSBpbmhlcml0ZWQgZnJvbSBSYW5neSdzIERvbVJhbmdlDQoNCiAgICAgICAgKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIHJhbmdlUHJvdG87DQogICAgICAgICAgICB2YXIgcmFuZ2VQcm9wZXJ0aWVzID0gRG9tUmFuZ2UucmFuZ2VQcm9wZXJ0aWVzOw0KICAgICAgICAgICAgdmFyIGNhblNldFJhbmdlU3RhcnRBZnRlckVuZDsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHJhbmdlKSB7DQogICAgICAgICAgICAgICAgdmFyIGkgPSByYW5nZVByb3BlcnRpZXMubGVuZ3RoLCBwcm9wOw0KICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsNCiAgICAgICAgICAgICAgICAgICAgcHJvcCA9IHJhbmdlUHJvcGVydGllc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbcHJvcF0gPSByYW5nZS5uYXRpdmVSYW5nZVtwcm9wXTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU5hdGl2ZVJhbmdlKHJhbmdlLCBzdGFydENvbnRhaW5lciwgc3RhcnRPZmZzZXQsIGVuZENvbnRhaW5lcixlbmRPZmZzZXQpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3RhcnRNb3ZlZCA9IChyYW5nZS5zdGFydENvbnRhaW5lciAhPT0gc3RhcnRDb250YWluZXIgfHwgcmFuZ2Uuc3RhcnRPZmZzZXQgIT0gc3RhcnRPZmZzZXQpOw0KICAgICAgICAgICAgICAgIHZhciBlbmRNb3ZlZCA9IChyYW5nZS5lbmRDb250YWluZXIgIT09IGVuZENvbnRhaW5lciB8fCByYW5nZS5lbmRPZmZzZXQgIT0gZW5kT2Zmc2V0KTsNCg0KICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBzZXQgYm90aCBib3VuZGFyaWVzIGZvciB0aGUgYmVuZWZpdCBvZiBJRTkgKHNlZSBpc3N1ZSAzNSkNCiAgICAgICAgICAgICAgICBpZiAoc3RhcnRNb3ZlZCB8fCBlbmRNb3ZlZCkgew0KICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQoZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpOw0KICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChzdGFydENvbnRhaW5lciwgc3RhcnRPZmZzZXQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZnVuY3Rpb24gZGV0YWNoKHJhbmdlKSB7DQogICAgICAgICAgICAgICAgcmFuZ2UubmF0aXZlUmFuZ2UuZGV0YWNoKCk7DQogICAgICAgICAgICAgICAgcmFuZ2UuZGV0YWNoZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIHZhciBpID0gcmFuZ2VQcm9wZXJ0aWVzLmxlbmd0aCwgcHJvcDsNCiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7DQogICAgICAgICAgICAgICAgICAgIHByb3AgPSByYW5nZVByb3BlcnRpZXNbaV07DQogICAgICAgICAgICAgICAgICAgIHJhbmdlW3Byb3BdID0gbnVsbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXI7DQoNCiAgICAgICAgICAgIFdyYXBwZWRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICAgICAgaWYgKCFyYW5nZSkgew0KICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlJhbmdlIG11c3QgYmUgc3BlY2lmaWVkIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UgPSByYW5nZTsNCiAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBEb21SYW5nZS5jcmVhdGVQcm90b3R5cGVSYW5nZShXcmFwcGVkUmFuZ2UsIHVwZGF0ZU5hdGl2ZVJhbmdlLCBkZXRhY2gpOw0KDQogICAgICAgICAgICByYW5nZVByb3RvID0gV3JhcHBlZFJhbmdlLnByb3RvdHlwZTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5zZWxlY3ROb2RlID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2VsZWN0Tm9kZShub2RlKTsNCiAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICByYW5nZVByb3RvLmRlbGV0ZUNvbnRlbnRzID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5kZWxldGVDb250ZW50cygpOw0KICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uZXh0cmFjdENvbnRlbnRzID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgdmFyIGZyYWcgPSB0aGlzLm5hdGl2ZVJhbmdlLmV4dHJhY3RDb250ZW50cygpOw0KICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gZnJhZzsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uY2xvbmVDb250ZW50cyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNsb25lQ29udGVudHMoKTsNCiAgICAgIA==ICAgICAgfTsNCg0KICAgICAgICAgICAgLy8gVE9ETzogVW50aWwgSSBjYW4gZmluZCBhIHdheSB0byBwcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXIgdGhlIEZpcmVmb3ggYnVnIChhcHBhcmVudGx5IGxvbmctc3RhbmRpbmcsIHN0aWxsDQogICAgICAgICAgICAvLyBwcmVzZW50IGluIDMuNi44KSB0aGF0IHRocm93cyAiSW5kZXggb3Igc2l6ZSBpcyBuZWdhdGl2ZSBvciBncmVhdGVyIHRoYW4gdGhlIGFsbG93ZWQgYW1vdW50IiBmb3INCiAgICAgICAgICAgIC8vIGluc2VydE5vZGUgaW4gc29tZSBjaXJjdW1zdGFuY2VzLCBhbGwgYnJvd3NlcnMgd2lsbCBoYXZlIHRvIHVzZSB0aGUgUmFuZ3kncyBvd24gaW1wbGVtZW50YXRpb24gb2YNCiAgICAgICAgICAgIC8vIGluc2VydE5vZGUsIHdoaWNoIHdvcmtzIGJ1dCBpcyBhbG1vc3QgY2VydGFpbmx5IHNsb3dlciB0aGFuIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24uDQovKg0KICAgICAgICAgICAgcmFuZ2VQcm90by5pbnNlcnROb2RlID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UuaW5zZXJ0Tm9kZShub2RlKTsNCiAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICB9Ow0KKi8NCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5zdXJyb3VuZENvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc3Vycm91bmRDb250ZW50cyhub2RlKTsNCiAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICByYW5nZVByb3RvLmNvbGxhcHNlID0gZnVuY3Rpb24oaXNTdGFydCkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7DQogICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5jbG9uZVJhbmdlID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXcmFwcGVkUmFuZ2UodGhpcy5uYXRpdmVSYW5nZS5jbG9uZVJhbmdlKCkpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5yZWZyZXNoID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLnRvU3RyaW5nKCk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAvLyBDcmVhdGUgdGVzdCByYW5nZSBhbmQgbm9kZSBmb3IgZmVhdHVyZSBkZXRlY3Rpb24NCg0KICAgICAgICAgICAgdmFyIHRlc3RUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJ0ZXN0Iik7DQogICAgICAgICAgICBkb20uZ2V0Qm9keShkb2N1bWVudCkuYXBwZW5kQ2hpbGQodGVzdFRleHROb2RlKTsNCiAgICAgICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQoNCiAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLw0KDQogICAgICAgICAgICAvLyBUZXN0IGZvciBGaXJlZm94IDIgYnVnIHRoYXQgcHJldmVudHMgbW92aW5nIHRoZSBzdGFydCBvZiBhIFJhbmdlIHRvIGEgcG9pbnQgYWZ0ZXIgaXRzIGN1cnJlbnQgZW5kIGFuZA0KICAgICAgICAgICAgLy8gY29ycmVjdCBmb3IgaXQNCg0KICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGVzdFRleHROb2RlLCAwKTsNCiAgICAgICAgICAgIHJhbmdlLnNldEVuZCh0ZXN0VGV4dE5vZGUsIDApOw0KDQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHRlc3RUZXh0Tm9kZSwgMSk7DQogICAgICAgICAgICAgICAgY2FuU2V0UmFuZ2VTdGFydEFmdGVyRW5kID0gdHJ1ZTsNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnQgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpOw0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyID0gZnVuY3Rpb24obmFtZSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB9IGNhdGNoKGV4KSB7DQoNCg0KICAgICAgICAgICAgICAgIGNhblNldFJhbmdlU3RhcnRBZnRlckVuZCA9IGZhbHNlOw0KDQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydCA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgew0KICAgICAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpOw0KICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQpOw0KICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlciA9IGZ1bmN0aW9uKG5hbWUsIG9wcG9zaXRlTmFtZSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlW25hbWVdKG5vZGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlW29wcG9zaXRlTmFtZV0obm9kZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIA==ICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnRCZWZvcmUgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoInNldFN0YXJ0QmVmb3JlIiwgInNldEVuZEJlZm9yZSIpOw0KICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydEFmdGVyID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKCJzZXRTdGFydEFmdGVyIiwgInNldEVuZEFmdGVyIik7DQogICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZEJlZm9yZSA9IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcigic2V0RW5kQmVmb3JlIiwgInNldFN0YXJ0QmVmb3JlIik7DQogICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZEFmdGVyID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKCJzZXRFbmRBZnRlciIsICJzZXRTdGFydEFmdGVyIik7DQoNCiAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLw0KDQogICAgICAgICAgICAvLyBUZXN0IGZvciBhbmQgY29ycmVjdCBGaXJlZm94IDIgYmVoYXZpb3VyIHdpdGggc2VsZWN0Tm9kZUNvbnRlbnRzIG9uIHRleHQgbm9kZXM6IGl0IGNvbGxhcHNlcyB0aGUgcmFuZ2UgdG8NCiAgICAgICAgICAgIC8vIHRoZSAwdGggY2hhcmFjdGVyIG9mIHRoZSB0ZXh0IG5vZGUNCiAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0ZXN0VGV4dE5vZGUpOw0KICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09IHRlc3RUZXh0Tm9kZSAmJiByYW5nZS5lbmRDb250YWluZXIgPT0gdGVzdFRleHROb2RlICYmDQogICAgICAgICAgICAgICAgICAgIHJhbmdlLnN0YXJ0T2Zmc2V0ID09IDAgJiYgcmFuZ2UuZW5kT2Zmc2V0ID09IHRlc3RUZXh0Tm9kZS5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNlbGVjdE5vZGVDb250ZW50cyA9IGZ1bmN0aW9uKG5vZGUpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNlbGVjdE5vZGVDb250ZW50cyA9IGZ1bmN0aW9uKG5vZGUpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydChub2RlLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFbmQobm9kZSwgRG9tUmFuZ2UuZ2V0RW5kT2Zmc2V0KG5vZGUpKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gVGVzdCBmb3IgV2ViS2l0IGJ1ZyB0aGF0IGhhcyB0aGUgYmVhaHZpb3VyIG9mIGNvbXBhcmVCb3VuZGFyeVBvaW50cyByb3VuZCB0aGUgd3Jvbmcgd2F5IGZvciBjb25zdGFudHMNCiAgICAgICAgICAgIC8vIFNUQVJUX1RPX0VORCBhbmQgRU5EX1RPX1NUQVJUOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjA3MzgNCg0KICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZS5zZXRFbmQodGVzdFRleHROb2RlLCAzKTsNCg0KICAgICAgICAgICAgdmFyIHJhbmdlMiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICByYW5nZTIuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZTIuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgNCk7DQogICAgICAgICAgICByYW5nZTIuc2V0U3RhcnQodGVzdFRleHROb2RlLCAyKTsNCg0KICAgICAgICAgICAgaWYgKHJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhyYW5nZS5TVEFSVF9UT19FTkQsIHJhbmdlMikgPT0gLTEgJg0KICAgICAgICAgICAgICAgICAgICByYW5nZS5jb21wYXJlQm91bmRhcnlQb2ludHMocmFuZ2UuRU5EX1RPX1NUQVJULCByYW5nZTIpID09IDEpIHsNCiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSB3cm9uZyB3YXkgcm91bmQsIHNvIGNvcnJlY3QgZm9yIGl0DQoNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY29tcGFyZUJvdW5kYXJ5UG9pbnRzID0gZnVuY3Rpb24odHlwZSwgcmFuZ2UpIHsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSByYW5nZS5uYXRpdmVSYW5nZSB8fCByYW5nZTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gcmFuZ2UuU1RBUlRfVE9fRU5EKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gcmFuZ2UuRU5EX1RPX1NUQVJUOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gcmFuZ2UuRU5EX1RPX1NUQVJUKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gcmFuZ2UuU1RBUlRfVE9fRU5EOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyh0eXBlLCByYW5nZSk7DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jb21wYXJlQm91bmRhcnlQb2ludHMgPSBmdW5jdGlvbih0eXBlLCByYW5nZSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS5jb21wYXJlQm91bmRhcnlQb2ludHModHlwZSwgcmFuZ2UubmF0aXZlUmFuZ2UgfHwgcmFuZ2UpOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLw0KDQogICAgICAgICAgICAvLyBUZXN0IGZvciBleGlzdGVuY2Ugb2YgY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50IGFuZCBkZWxlZ2F0ZSB0byBpdCBpZiBpdCBleGlzdHMNCiAgICAgICAgICAgIGlmIChhcGkudXRpbC5pc0hvc3RNZXRob2QocmFuZ2UsICJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiKSkgew0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50ID0gZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGZyYWdtZW50U3RyKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gQ2xlYW4gdXANCiAgICAgICAgICAgIGRvbS5nZXRCb2R5KGRvY3VtZW50KS5yZW1vdmVDaGlsZCh0ZXN0VGV4dE5vZGUpOw0KICAgICAgICAgICAgcmFuZ2UuZGV0YWNoKCk7DQogICAgICAgICAgICByYW5nZTIuZGV0YWNoKCk7DQogICAgICAgIH0pKCk7DQoNCiAgICAgICAgYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgICAgICBkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7DQogICAgICAgICAgICByZXR1cm4gZG9jLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgIH07DQogICAgfSBlbHNlIGlmIChhcGkuZmVhdHVyZXMuaW1wbGVtZW50c1RleHRSYW5nZSkgew0KICAgICAgICAvLyBUaGlzIGlzIGEgd3JhcHBlciBhcm91bmQgYSBUZXh0UmFuZ2UsIHByb3ZpZGluZyBmdQ==bGwgRE9NIFJhbmdlIGZ1bmN0aW9uYWxpdHkgdXNpbmcgcmFuZ3kncyBEb21SYW5nZSBhcyBhDQogICAgICAgIC8vIHByb3RvdHlwZQ0KDQogICAgICAgIFdyYXBwZWRSYW5nZSA9IGZ1bmN0aW9uKHRleHRSYW5nZSkgew0KICAgICAgICAgICAgdGhpcy50ZXh0UmFuZ2UgPSB0ZXh0UmFuZ2U7DQogICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBXcmFwcGVkUmFuZ2UucHJvdG90eXBlID0gbmV3IERvbVJhbmdlKGRvY3VtZW50KTsNCg0KICAgICAgICBXcmFwcGVkUmFuZ2UucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBzdGFydCwgZW5kOw0KDQogICAgICAgICAgICAvLyBUZXh0UmFuZ2UncyBwYXJlbnRFbGVtZW50KCkgbWV0aG9kIGNhbm5vdCBiZSB0cnVzdGVkLiBnZXRUZXh0UmFuZ2VDb250YWluZXJFbGVtZW50KCkgd29ya3MgYXJvdW5kIHRoYXQuDQogICAgICAgICAgICB2YXIgcmFuZ2VDb250YWluZXJFbGVtZW50ID0gZ2V0VGV4dFJhbmdlQ29udGFpbmVyRWxlbWVudCh0aGlzLnRleHRSYW5nZSk7DQoNCiAgICAgICAgICAgIGlmICh0ZXh0UmFuZ2VJc0NvbGxhcHNlZCh0aGlzLnRleHRSYW5nZSkpIHsNCiAgICAgICAgICAgICAgICBlbmQgPSBzdGFydCA9IGdldFRleHRSYW5nZUJvdW5kYXJ5UG9zaXRpb24odGhpcy50ZXh0UmFuZ2UsIHJhbmdlQ29udGFpbmVyRWxlbWVudCwgdHJ1ZSwgdHJ1ZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KDQogICAgICAgICAgICAgICAgc3RhcnQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIHRydWUsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBlbmQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIGZhbHNlLCBmYWxzZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHRoaXMuc2V0U3RhcnQoc3RhcnQubm9kZSwgc3RhcnQub2Zmc2V0KTsNCiAgICAgICAgICAgIHRoaXMuc2V0RW5kKGVuZC5ub2RlLCBlbmQub2Zmc2V0KTsNCiAgICAgICAgfTsNCg0KICAgICAgICBEb21SYW5nZS5jb3B5Q29tcGFyaXNvbkNvbnN0YW50cyhXcmFwcGVkUmFuZ2UpOw0KDQogICAgICAgIC8vIEFkZCBXcmFwcGVkUmFuZ2UgYXMgdGhlIFJhbmdlIHByb3BlcnR5IG9mIHRoZSBnbG9iYWwgb2JqZWN0IHRvIGFsbG93IGV4cHJlc3Npb24gbGlrZSBSYW5nZS5FTkRfVE9fRU5EIHRvIHdvcmsNCiAgICAgICAgdmFyIGdsb2JhbE9iaiA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pKCk7DQogICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsT2JqLlJhbmdlID09ICJ1bmRlZmluZWQiKSB7DQogICAgICAgICAgICBnbG9iYWxPYmouUmFuZ2UgPSBXcmFwcGVkUmFuZ2U7DQogICAgICAgIH0NCg0KICAgICAgICBhcGkuY3JlYXRlTmF0aXZlUmFuZ2UgPSBmdW5jdGlvbihkb2MpIHsNCiAgICAgICAgICAgIGRvYyA9IGRvYyB8fCBkb2N1bWVudDsNCiAgICAgICAgICAgIHJldHVybiBkb2MuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTsNCiAgICAgICAgfTsNCiAgICB9DQoNCiAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UpIHsNCiAgICAgICAgV3JhcHBlZFJhbmdlLnJhbmdlVG9UZXh0UmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkgew0KICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCkgew0KICAgICAgICAgICAgICAgIHZhciB0ciA9IGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlKG5ldyBEb21Qb3NpdGlvbihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLCB0cnVlKTsNCg0KDQoNCiAgICAgICAgICAgICAgICByZXR1cm4gdHI7DQoNCiAgICAgICAgICAgICAgICAvL3JldHVybiBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZShuZXcgRG9tUG9zaXRpb24ocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KSwgdHJ1ZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHZhciBzdGFydFJhbmdlID0gY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UobmV3IERvbVBvc2l0aW9uKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCksIHRydWUpOw0KICAgICAgICAgICAgICAgIHZhciBlbmRSYW5nZSA9IGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlKG5ldyBEb21Qb3NpdGlvbihyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCksIGZhbHNlKTsNCiAgICAgICAgICAgICAgICB2YXIgdGV4dFJhbmdlID0gZG9tLmdldERvY3VtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKS5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpOw0KICAgICAgICAgICAgICAgIHRleHRSYW5nZS5zZXRFbmRQb2ludCgiU3RhcnRUb1N0YXJ0Iiwgc3RhcnRSYW5nZSk7DQogICAgICAgICAgICAgICAgdGV4dFJhbmdlLnNldEVuZFBvaW50KCJFbmRUb0VuZCIsIGVuZFJhbmdlKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dFJhbmdlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0NCg0KICAgIFdyYXBwZWRSYW5nZS5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uKCkgew0KICAgICAgICByZXR1cm4gIldyYXBwZWRSYW5nZSI7DQogICAgfTsNCg0KICAgIGFwaS5XcmFwcGVkUmFuZ2UgPSBXcmFwcGVkUmFuZ2U7DQoNCiAgICBhcGkuY3JlYXRlUmFuZ2UgPSBmdW5jdGlvbihkb2MpIHsNCiAgICAgICAgZG9jID0gZG9jIHx8IGRvY3VtZW50Ow0KICAgICAgICByZXR1cm4gbmV3IFdyYXBwZWRSYW5nZShhcGkuY3JlYXRlTmF0aXZlUmFuZ2UoZG9jKSk7DQogICAgfTsNCg0KICAgIGFwaS5jcmVhdGVSYW5neVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgIGRvYyA9IGRvYyB8fCBkb2N1bWVudDsNCiAgICAgICAgcmV0dXJuIG5ldyBEb21SYW5nZShkb2MpOw0KICAgIH07DQoNCiAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ2UgPSBmdW5jdGlvbihpZnJhbWVFbCkgew0KICAgICAgICByZXR1cm4gYXBpLmNyZWF0ZVJhbmdlKGRvbS5nZXRJZnJhbWVEb2N1bWVudChpZnJhbWVFbCkpOw0KICAgIH07DQoNCiAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZSA9IGZ1bmN0aW9uKGlmcmFtZUVsKSB7DQogICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ3lSYW5nZShkb20uZ2V0SWZyYW1lRG9jdW1lbnQoaWZyYW1lRWwpKTsNCiAgICB9Ow0KDQogICAgYXBpLmFkZENyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcihmdW5jdGlvbih3aW4pIHsNCiAgICAgICAgdmFyIGRvYyA9IHdpbi5kb2N1bWVudDsNCiAgICAgICAgaWYgKHR5cGVvZiBkb2MuY3JlYXRlUmFuZ2UgPT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgIGRvYy5jcmVhdGVSYW5nZSA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ2UodGhpcyk7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQogICAgICAgIGRvYyA9IHdpbiA9IG51bGw7DQogICAgfSk7DQp9KTtyYW5neS5jcmVhdGVNb2R1bGUoIldyYXBwZWRTZWxlY3Rpb24iLCBmdW5jdGlvbihhcGksIG1vZHVsZSkgew0KICAgIC8vIFRoaXMgd2lsbCBjcmVhdGUgYSBzZWxlY3Rpb24gb2JqZWN0IHdyYXBwZXIgdGhhdCBmb2xsb3dzIHRoZSBTZWxlY3Rpb24gb2JqZWN0IGZvdW5kIGluIHRoZSBXSEFUV0cgZHJhZnQgRE9NIFJhbmdlDQogICAgLy8gc3BlYyAoaHR0cDovL2h0bWw1Lm9yZy9zcGVjcy9kb20tcmFuZ2UuaHRtbCkNCg0KICAgIGFwaS5yZXF1aXJlTW9kdWxlcyggWyJEb21VdGlsIiwgIkRvbVJhbmdlIiwgIldyYXBwZWRSYW5nZSJdICk7DQoNCiAgICBhcGkuY29uZmlnLmNoZWNrU2VsZWN0aW9uUmFuZ2VzID0gdHJ1ZTsNCg0KICAgIHZhciBCT09MRUFOID0gImJvb2xlYW4iLA0KICAgICAgICB3aW5kb3dQcm9wZXJ0eU5hbWUgPSAiX3Jhbmd5U2VsZWN0aW9uIiwNCiAgICAgICAgZG9tID0gYXBpLmRvbSwNCiAgICAgICAgdXRpbCA9IGFwaS51dGlsLA0KICAgICAgICBEb21SYW5nZSA9IGFwaS5Eb21SYW5nZSwNCiAgICAgICAgV3JhcHBlZFJhbmdlID0gYXBpLldyYXBwZWRSYW5nZQ==LA0KICAgICAgICBET01FeGNlcHRpb24gPSBhcGkuRE9NRXhjZXB0aW9uLA0KICAgICAgICBEb21Qb3NpdGlvbiA9IGRvbS5Eb21Qb3NpdGlvbiwNCiAgICAgICAgZ2V0U2VsZWN0aW9uLA0KICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCwNCiAgICAgICAgQ09OVFJPTCA9ICJDb250cm9sIjsNCg0KDQoNCiAgICBmdW5jdGlvbiBnZXRXaW5TZWxlY3Rpb24od2luUGFyYW0pIHsNCiAgICAgICAgcmV0dXJuICh3aW5QYXJhbSB8fCB3aW5kb3cpLmdldFNlbGVjdGlvbigpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldERvY1NlbGVjdGlvbih3aW5QYXJhbSkgew0KICAgICAgICByZXR1cm4gKHdpblBhcmFtIHx8IHdpbmRvdykuZG9jdW1lbnQuc2VsZWN0aW9uOw0KICAgIH0NCg0KICAgIC8vIFRlc3QgZm9yIHRoZSBSYW5nZS9UZXh0UmFuZ2UgYW5kIFNlbGVjdGlvbiBmZWF0dXJlcyByZXF1aXJlZA0KICAgIC8vIFRlc3QgZm9yIGFiaWxpdHkgdG8gcmV0cmlldmUgc2VsZWN0aW9uDQogICAgdmFyIGltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gPSBhcGkudXRpbC5pc0hvc3RNZXRob2Qod2luZG93LCAiZ2V0U2VsZWN0aW9uIiksDQogICAgICAgIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gPSBhcGkudXRpbC5pc0hvc3RPYmplY3QoZG9jdW1lbnQsICJzZWxlY3Rpb24iKTsNCg0KICAgIHZhciB1c2VEb2N1bWVudFNlbGVjdGlvbiA9IGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgKCFpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uIHx8IGFwaS5jb25maWcucHJlZmVyVGV4dFJhbmdlKTsNCg0KICAgIGlmICh1c2VEb2N1bWVudFNlbGVjdGlvbikgew0KICAgICAgICBnZXRTZWxlY3Rpb24gPSBnZXREb2NTZWxlY3Rpb247DQogICAgICAgIGFwaS5pc1NlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24od2luUGFyYW0pIHsNCiAgICAgICAgICAgIHZhciBkb2MgPSAod2luUGFyYW0gfHwgd2luZG93KS5kb2N1bWVudCwgbmF0aXZlU2VsID0gZG9jLnNlbGVjdGlvbjsNCg0KICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0aW9uIFRleHRSYW5nZSBpcyBhY3R1YWxseSBjb250YWluZWQgd2l0aGluIHRoZSBjb3JyZWN0IGRvY3VtZW50DQogICAgICAgICAgICByZXR1cm4gKG5hdGl2ZVNlbC50eXBlICE9ICJOb25lIiB8fCBkb20uZ2V0RG9jdW1lbnQobmF0aXZlU2VsLmNyZWF0ZVJhbmdlKCkucGFyZW50RWxlbWVudCgpKSA9PSBkb2MpOw0KICAgICAgICB9Ow0KICAgIH0gZWxzZSBpZiAoaW1wbGVtZW50c1dpbkdldFNlbGVjdGlvbikgew0KICAgICAgICBnZXRTZWxlY3Rpb24gPSBnZXRXaW5TZWxlY3Rpb247DQogICAgICAgIGFwaS5pc1NlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBtb2R1bGUuZmFpbCgiTmVpdGhlciBkb2N1bWVudC5zZWxlY3Rpb24gb3Igd2luZG93LmdldFNlbGVjdGlvbigpIGRldGVjdGVkLiIpOw0KICAgIH0NCg0KICAgIGFwaS5nZXROYXRpdmVTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb247DQoNCiAgICB2YXIgdGVzdFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbigpOw0KICAgIHZhciB0ZXN0UmFuZ2UgPSBhcGkuY3JlYXRlTmF0aXZlUmFuZ2UoZG9jdW1lbnQpOw0KICAgIHZhciBib2R5ID0gZG9tLmdldEJvZHkoZG9jdW1lbnQpOw0KDQogICAgLy8gT2J0YWluaW5nIGEgcmFuZ2UgZnJvbSBhIHNlbGVjdGlvbg0KICAgIHZhciBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyA9IHV0aWwuYXJlSG9zdE9iamVjdHModGVzdFNlbGVjdGlvbiwgWyJhbmNob3JOb2RlIiwgImZvY3VzTm9kZSJdICYmDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hcmVIb3N0UHJvcGVydGllcyh0ZXN0U2VsZWN0aW9uLCBbImFuY2hvck9mZnNldCIsICJmb2N1c09mZnNldCJdKSk7DQogICAgYXBpLmZlYXR1cmVzLnNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzID0gc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXM7DQoNCiAgICAvLyBUZXN0IGZvciBleGlzdGVuY2Ugb2YgbmF0aXZlIHNlbGVjdGlvbiBleHRlbmQoKSBtZXRob2QNCiAgICB2YXIgc2VsZWN0aW9uSGFzRXh0ZW5kID0gdXRpbC5pc0hvc3RNZXRob2QodGVzdFNlbGVjdGlvbiwgImV4dGVuZCIpOw0KICAgIGFwaS5mZWF0dXJlcy5zZWxlY3Rpb25IYXNFeHRlbmQgPSBzZWxlY3Rpb25IYXNFeHRlbmQ7DQoNCiAgICAvLyBUZXN0IGlmIHJhbmdlQ291bnQgZXhpc3RzDQogICAgdmFyIHNlbGVjdGlvbkhhc1JhbmdlQ291bnQgPSAodHlwZW9mIHRlc3RTZWxlY3Rpb24ucmFuZ2VDb3VudCA9PSAibnVtYmVyIik7DQogICAgYXBpLmZlYXR1cmVzLnNlbGVjdGlvbkhhc1JhbmdlQ291bnQgPSBzZWxlY3Rpb25IYXNSYW5nZUNvdW50Ow0KDQogICAgdmFyIHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMgPSBmYWxzZTsNCiAgICB2YXIgY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkID0gdHJ1ZTsNCg0KICAgIGlmICh1dGlsLmFyZUhvc3RNZXRob2RzKHRlc3RTZWxlY3Rpb24sIFsiYWRkUmFuZ2UiLCAiZ2V0UmFuZ2VBdCIsICJyZW1vdmVBbGxSYW5nZXMiXSkgJiYNCiAgICAgICAgICAgIHR5cGVvZiB0ZXN0U2VsZWN0aW9uLnJhbmdlQ291bnQgPT0gIm51bWJlciIgJiYgYXBpLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkgew0KDQogICAgICAgIChmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsNCiAgICAgICAgICAgIGlmcmFtZS5mcmFtZUJvcmRlciA9IDA7DQogICAgICAgICAgICBpZnJhbWUuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOw0KICAgICAgICAgICAgaWZyYW1lLnN0eWxlLmxlZnQgPSAiLTEwMDAwcHgiOw0KICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpOw0KDQogICAgICAgICAgICB2YXIgaWZyYW1lRG9jID0gZG9tLmdldElmcmFtZURvY3VtZW50KGlmcmFtZSk7DQogICAgICAgICAgICBpZnJhbWVEb2Mub3BlbigpOw0KICAgICAgICAgICAgaWZyYW1lRG9jLndyaXRlKCI8aHRtbD48aGVhZD48L2hlYWQ+PGJvZHk+MTI8L2JvZHk+PC9odG1sPiIpOw0KICAgICAgICAgICAgaWZyYW1lRG9jLmNsb3NlKCk7DQoNCiAgICAgICAgICAgIHZhciBzZWwgPSBkb20uZ2V0SWZyYW1lV2luZG93KGlmcmFtZSkuZ2V0U2VsZWN0aW9uKCk7DQogICAgICAgICAgICB2YXIgZG9jRWwgPSBpZnJhbWVEb2MuZG9jdW1lbnRFbGVtZW50Ow0KICAgICAgICAgICAgdmFyIGlmcmFtZUJvZHkgPSBkb2NFbC5sYXN0Q2hpbGQsIHRleHROb2RlID0gaWZyYW1lQm9keS5maXJzdENoaWxkOw0KDQogICAgICAgICAgICAvLyBUZXN0IHdoZXRoZXIgdGhlIG5hdGl2ZSBzZWxlY3Rpb24gd2lsbCBhbGxvdyBhIGNvbGxhcHNlZCBzZWxlY3Rpb24gd2l0aGluIGEgbm9uLWVkaXRhYmxlIGVsZW1lbnQNCiAgICAgICAgICAgIHZhciByMSA9IGlmcmFtZURvYy5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgcjEuc2V0U3RhcnQodGV4dE5vZGUsIDEpOw0KICAgICAgICAgICAgcjEuY29sbGFwc2UodHJ1ZSk7DQogICAgICAgICAgICBzZWwuYWRkUmFuZ2UocjEpOw0KICAgICAgICAgICAgY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkID0gKHNlbC5yYW5nZUNvdW50ID09IDEpOw0KICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpOw0KDQogICAgICAgICAgICAvLyBUZXN0IHdoZXRoZXIgdGhlIG5hdGl2ZSBzZWxlY3Rpb24gaXMgY2FwYWJsZSBvZiBzdXBwb3J0aW5nIG11bHRpcGxlIHJhbmdlcw0KICAgICAgICAgICAgdmFyIHIyID0gcjEuY2xvbmVSYW5nZSgpOw0KICAgICAgICAgICAgcjEuc2V0U3RhcnQodGV4dE5vZGUsIDApOw0KICAgICAgICAgICAgcjIuc2V0RW5kKHRleHROb2RlLCAyKTsNCiAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMSk7DQogICAgICAgICAgICBzZWwuYWRkUmFuZ2UocjIpOw0KDQogICAgICAgICAgICBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gKHNlbC5yYW5nZUNvdW50ID09IDIpOw0KDQogICAgICAgICAgIA==IC8vIENsZWFuIHVwDQogICAgICAgICAgICByMS5kZXRhY2goKTsNCiAgICAgICAgICAgIHIyLmRldGFjaCgpOw0KDQogICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7DQogICAgICAgIH0pKCk7DQogICAgfQ0KDQogICAgYXBpLmZlYXR1cmVzLnNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMgPSBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzOw0KICAgIGFwaS5mZWF0dXJlcy5jb2xsYXBzZWROb25FZGl0YWJsZVNlbGVjdGlvbnNTdXBwb3J0ZWQgPSBjb2xsYXBzZWROb25FZGl0YWJsZVNlbGVjdGlvbnNTdXBwb3J0ZWQ7DQoNCiAgICAvLyBDb250cm9sUmFuZ2VzDQogICAgdmFyIGltcGxlbWVudHNDb250cm9sUmFuZ2UgPSBmYWxzZSwgdGVzdENvbnRyb2xSYW5nZTsNCg0KICAgIGlmIChib2R5ICYmIHV0aWwuaXNIb3N0TWV0aG9kKGJvZHksICJjcmVhdGVDb250cm9sUmFuZ2UiKSkgew0KICAgICAgICB0ZXN0Q29udHJvbFJhbmdlID0gYm9keS5jcmVhdGVDb250cm9sUmFuZ2UoKTsNCiAgICAgICAgaWYgKHV0aWwuYXJlSG9zdFByb3BlcnRpZXModGVzdENvbnRyb2xSYW5nZSwgWyJpdGVtIiwgImFkZCJdKSkgew0KICAgICAgICAgICAgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IHRydWU7DQogICAgICAgIH0NCiAgICB9DQogICAgYXBpLmZlYXR1cmVzLmltcGxlbWVudHNDb250cm9sUmFuZ2UgPSBpbXBsZW1lbnRzQ29udHJvbFJhbmdlOw0KDQogICAgLy8gU2VsZWN0aW9uIGNvbGxhcHNlZG5lc3MNCiAgICBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMpIHsNCiAgICAgICAgc2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBmdW5jdGlvbihzZWwpIHsNCiAgICAgICAgICAgIHJldHVybiBzZWwuYW5jaG9yTm9kZSA9PT0gc2VsLmZvY3VzTm9kZSAmJiBzZWwuYW5jaG9yT2Zmc2V0ID09PSBzZWwuZm9jdXNPZmZzZXQ7DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgc2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBmdW5jdGlvbihzZWwpIHsNCiAgICAgICAgICAgIHJldHVybiBzZWwucmFuZ2VDb3VudCA/IHNlbC5nZXRSYW5nZUF0KHNlbC5yYW5nZUNvdW50IC0gMSkuY29sbGFwc2VkIDogZmFsc2U7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCByYW5nZSwgYmFja3dhcmRzKSB7DQogICAgICAgIHZhciBhbmNob3JQcmVmaXggPSBiYWNrd2FyZHMgPyAiZW5kIiA6ICJzdGFydCIsIGZvY3VzUHJlZml4ID0gYmFja3dhcmRzID8gInN0YXJ0IiA6ICJlbmQiOw0KICAgICAgICBzZWwuYW5jaG9yTm9kZSA9IHJhbmdlW2FuY2hvclByZWZpeCArICJDb250YWluZXIiXTsNCiAgICAgICAgc2VsLmFuY2hvck9mZnNldCA9IHJhbmdlW2FuY2hvclByZWZpeCArICJPZmZzZXQiXTsNCiAgICAgICAgc2VsLmZvY3VzTm9kZSA9IHJhbmdlW2ZvY3VzUHJlZml4ICsgIkNvbnRhaW5lciJdOw0KICAgICAgICBzZWwuZm9jdXNPZmZzZXQgPSByYW5nZVtmb2N1c1ByZWZpeCArICJPZmZzZXQiXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21OYXRpdmVTZWxlY3Rpb24oc2VsKSB7DQogICAgICAgIHZhciBuYXRpdmVTZWwgPSBzZWwubmF0aXZlU2VsZWN0aW9uOw0KICAgICAgICBzZWwuYW5jaG9yTm9kZSA9IG5hdGl2ZVNlbC5hbmNob3JOb2RlOw0KICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gbmF0aXZlU2VsLmFuY2hvck9mZnNldDsNCiAgICAgICAgc2VsLmZvY3VzTm9kZSA9IG5hdGl2ZVNlbC5mb2N1c05vZGU7DQogICAgICAgIHNlbC5mb2N1c09mZnNldCA9IG5hdGl2ZVNlbC5mb2N1c09mZnNldDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpIHsNCiAgICAgICAgc2VsLmFuY2hvck5vZGUgPSBzZWwuZm9jdXNOb2RlID0gbnVsbDsNCiAgICAgICAgc2VsLmFuY2hvck9mZnNldCA9IHNlbC5mb2N1c09mZnNldCA9IDA7DQogICAgICAgIHNlbC5yYW5nZUNvdW50ID0gMDsNCiAgICAgICAgc2VsLmlzQ29sbGFwc2VkID0gdHJ1ZTsNCiAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gMDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXROYXRpdmVSYW5nZShyYW5nZSkgew0KICAgICAgICB2YXIgbmF0aXZlUmFuZ2U7DQogICAgICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIERvbVJhbmdlKSB7DQogICAgICAgICAgICBuYXRpdmVSYW5nZSA9IHJhbmdlLl9zZWxlY3Rpb25OYXRpdmVSYW5nZTsNCiAgICAgICAgICAgIGlmICghbmF0aXZlUmFuZ2UpIHsNCiAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZSA9IGFwaS5jcmVhdGVOYXRpdmVSYW5nZShkb20uZ2V0RG9jdW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIpKTsNCiAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZS5zZXRFbmQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOw0KICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7DQogICAgICAgICAgICAgICAgcmFuZ2UuX3NlbGVjdGlvbk5hdGl2ZVJhbmdlID0gbmF0aXZlUmFuZ2U7DQogICAgICAgICAgICAgICAgcmFuZ2UuYXR0YWNoTGlzdGVuZXIoImRldGFjaCIsIGZ1bmN0aW9uKCkgew0KDQogICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbk5hdGl2ZVJhbmdlID0gbnVsbDsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChyYW5nZSBpbnN0YW5jZW9mIFdyYXBwZWRSYW5nZSkgew0KICAgICAgICAgICAgbmF0aXZlUmFuZ2UgPSByYW5nZS5uYXRpdmVSYW5nZTsNCiAgICAgICAgfSBlbHNlIGlmIChhcGkuZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlICYmIChyYW5nZSBpbnN0YW5jZW9mIGRvbS5nZXRXaW5kb3cocmFuZ2Uuc3RhcnRDb250YWluZXIpLlJhbmdlKSkgew0KICAgICAgICAgICAgbmF0aXZlUmFuZ2UgPSByYW5nZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbmF0aXZlUmFuZ2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmFuZ2VDb250YWluc1NpbmdsZUVsZW1lbnQocmFuZ2VOb2Rlcykgew0KICAgICAgICBpZiAoIXJhbmdlTm9kZXMubGVuZ3RoIHx8IHJhbmdlTm9kZXNbMF0ubm9kZVR5cGUgIT0gMSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW4gPSByYW5nZU5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICBpZiAoIWRvbS5pc0FuY2VzdG9yT2YocmFuZ2VOb2Rlc1swXSwgcmFuZ2VOb2Rlc1tpXSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZShyYW5nZSkgew0KICAgICAgICB2YXIgbm9kZXMgPSByYW5nZS5nZXROb2RlcygpOw0KICAgICAgICBpZiAoIXJhbmdlQ29udGFpbnNTaW5nbGVFbGVtZW50KG5vZGVzKSkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlOiByYW5nZSAiICsgcmFuZ2UuaW5zcGVjdCgpICsgIiBkaWQgbm90IGNvbnNpc3Qgb2YgYSBzaW5nbGUgZWxlbWVudCIpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBub2Rlc1swXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRSYW5nZShyYW5nZSkgew0KICAgICAgICByZXR1cm4gISFyYW5nZSAmJiB0eXBlb2YgcmFuZ2UudGV4dCAhPSAidW5kZWZpbmVkIjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB1cGRhdGVGcm9tVGV4dFJhbmdlKHNlbCwgcmFuZ2UpIHsNCiAgICAgICAgLy8gQ3JlYXRlIGEgUmFuZ2UgZnJvbSB0aGUgc2VsZWN0ZWQgVGV4dFJhbmdlDQogICAgICAgIHZhciB3cmFwcGVkUmFuZ2UgPSBuZXcgV3JhcHBlZFJhbmdlKHJhbmdlKTsNCiAgICAgICAgc2VsLl9yYW5nZXMgPSBbd3JhcHBlZFJhbmdlXTsNCg0KICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZShzZWwsIHdyYQ==cHBlZFJhbmdlLCBmYWxzZSk7DQogICAgICAgIHNlbC5yYW5nZUNvdW50ID0gMTsNCiAgICAgICAgc2VsLmlzQ29sbGFwc2VkID0gd3JhcHBlZFJhbmdlLmNvbGxhcHNlZDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCkgew0KICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZWQgc2VsZWN0aW9uIGJhc2VkIG9uIHdoYXQncyBub3cgaW4gdGhlIG5hdGl2ZSBzZWxlY3Rpb24NCiAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gMDsNCiAgICAgICAgaWYgKHNlbC5kb2NTZWxlY3Rpb24udHlwZSA9PSAiTm9uZSIpIHsNCiAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gc2VsLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgaWYgKGlzVGV4dFJhbmdlKGNvbnRyb2xSYW5nZSkpIHsNCiAgICAgICAgICAgICAgICAvLyBUaGlzIGNhc2UgKHdoZXJlIHRoZSBzZWxlY3Rpb24gdHlwZSBpcyAiQ29udHJvbCIgYW5kIGNhbGxpbmcgY3JlYXRlUmFuZ2UoKSBvbiB0aGUgc2VsZWN0aW9uIHJldHVybnMNCiAgICAgICAgICAgICAgICAvLyBhIFRleHRSYW5nZSkgY2FuIGhhcHBlbiBpbiBJRSA5LiBJdCBoYXBwZW5zLCBmb3IgZXhhbXBsZSwgd2hlbiBhbGwgZWxlbWVudHMgaW4gdGhlIHNlbGVjdGVkDQogICAgICAgICAgICAgICAgLy8gQ29udHJvbFJhbmdlIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIENvbnRyb2xSYW5nZSBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBkb2N1bWVudC4NCiAgICAgICAgICAgICAgICB1cGRhdGVGcm9tVGV4dFJhbmdlKHNlbCwgY29udHJvbFJhbmdlKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgc2VsLnJhbmdlQ291bnQgPSBjb250cm9sUmFuZ2UubGVuZ3RoOw0KICAgICAgICAgICAgICAgIHZhciByYW5nZSwgZG9jID0gZG9tLmdldERvY3VtZW50KGNvbnRyb2xSYW5nZS5pdGVtKDApKTsNCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbC5yYW5nZUNvdW50OyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UoZG9jKTsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShjb250cm9sUmFuZ2UuaXRlbShpKSk7DQogICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzLnB1c2gocmFuZ2UpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWwucmFuZ2VDb3VudCA9PSAxICYmIHNlbC5fcmFuZ2VzWzBdLmNvbGxhcHNlZDsNCiAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZShzZWwsIHNlbC5fcmFuZ2VzW3NlbC5yYW5nZUNvdW50IC0gMV0sIGZhbHNlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHNlbCwgcmFuZ2UpIHsNCiAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHNlbC5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTsNCiAgICAgICAgdmFyIHJhbmdlRWxlbWVudCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2UpOw0KDQogICAgICAgIC8vIENyZWF0ZSBhIG5ldyBDb250cm9sUmFuZ2UgY29udGFpbmluZyBhbGwgdGhlIGVsZW1lbnRzIGluIHRoZSBzZWxlY3RlZCBDb250cm9sUmFuZ2UgcGx1cyB0aGUgZWxlbWVudA0KICAgICAgICAvLyBjb250YWluZWQgYnkgdGhlIHN1cHBsaWVkIHJhbmdlDQogICAgICAgIHZhciBkb2MgPSBkb20uZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpOw0KICAgICAgICB2YXIgbmV3Q29udHJvbFJhbmdlID0gZG9tLmdldEJvZHkoZG9jKS5jcmVhdGVDb250cm9sUmFuZ2UoKTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLmFkZChjb250cm9sUmFuZ2UuaXRlbShpKSk7DQogICAgICAgIH0NCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIG5ld0NvbnRyb2xSYW5nZS5hZGQocmFuZ2VFbGVtZW50KTsNCiAgICAgICAgfSBjYXRjaCAoZXgpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiYWRkUmFuZ2UoKTogRWxlbWVudCB3aXRoaW4gdGhlIHNwZWNpZmllZCBSYW5nZSBjb3VsZCBub3QgYmUgYWRkZWQgdG8gY29udHJvbCBzZWxlY3Rpb24gKGRvZXMgaXQgaGF2ZSBsYXlvdXQ/KSIpOw0KICAgICAgICB9DQogICAgICAgIG5ld0NvbnRyb2xSYW5nZS5zZWxlY3QoKTsNCg0KICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZWQgc2VsZWN0aW9uIGJhc2VkIG9uIHdoYXQncyBub3cgaW4gdGhlIG5hdGl2ZSBzZWxlY3Rpb24NCiAgICAgICAgdXBkYXRlQ29udHJvbFNlbGVjdGlvbihzZWwpOw0KICAgIH0NCg0KICAgIHZhciBnZXRTZWxlY3Rpb25SYW5nZUF0Ow0KDQogICAgaWYgKHV0aWwuaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sICAiZ2V0UmFuZ2VBdCIpKSB7DQogICAgICAgIGdldFNlbGVjdGlvblJhbmdlQXQgPSBmdW5jdGlvbihzZWwsIGluZGV4KSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHJldHVybiBzZWwuZ2V0UmFuZ2VBdChpbmRleCk7DQogICAgICAgICAgICB9IGNhdGNoKGV4KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgfSBlbHNlIGlmIChzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cykgew0KICAgICAgICBnZXRTZWxlY3Rpb25SYW5nZUF0ID0gZnVuY3Rpb24oc2VsKSB7DQogICAgICAgICAgICB2YXIgZG9jID0gZG9tLmdldERvY3VtZW50KHNlbC5hbmNob3JOb2RlKTsNCiAgICAgICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpOw0KICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpOw0KICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7DQoNCiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3Rpb24gd2FzIHNlbGVjdGVkIGJhY2t3YXJkcyAoZnJvbSB0aGUgZW5kIHRvIHRoZSBzdGFydCBpbiB0aGUNCiAgICAgICAgICAgIC8vIGRvY3VtZW50KQ0KICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAhPT0gdGhpcy5pc0NvbGxhcHNlZCkgew0KICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7DQogICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJhbmdlOw0KICAgICAgICB9Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBjb25zdHJ1Y3Rvcg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIFdyYXBwZWRTZWxlY3Rpb24oc2VsZWN0aW9uLCBkb2NTZWxlY3Rpb24sIHdpbikgew0KICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbiA9IHNlbGVjdGlvbjsNCiAgICAgICAgdGhpcy5kb2NTZWxlY3Rpb24gPSBkb2NTZWxlY3Rpb247DQogICAgICAgIHRoaXMuX3JhbmdlcyA9IFtdOw0KICAgICAgICB0aGlzLndpbiA9IHdpbjsNCiAgICAgICAgdGhpcy5yZWZyZXNoKCk7DQogICAgfQ0KDQogICAgYXBpLmdldFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHdpbikgew0KICAgICAgICB3aW4gPSB3aW4gfHwgd2luZG93Ow0KICAgICAgICB2YXIgc2VsID0gd2luW3dpbmRvd1Byb3BlcnR5TmFtZV07DQogICAgICAgIHZhciBuYXRpdmVTZWwgPSBnZXRTZWxlY3Rpb24od2luKSwgZG9jU2VsID0gaW1wbGVtZW50c0RvY1NlbGVjdGlvbiA/IGdldERvY1NlbGVjdGlvbih3aW4pIDogbnVsbDsNCiAgICAgICAgaWYgKHNlbCkgew0KICAgICAgICAgICAgc2VsLm5hdGl2ZVNlbGVjdGlvbiA9IG5hdGl2ZVNlbDsNCiAgICAgICAgICAgIHNlbC5kb2NTZWxlY3Rpb24gPSBkb2NTZWw7DQogICAgIA==ICAgICAgIHNlbC5yZWZyZXNoKHdpbik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBzZWwgPSBuZXcgV3JhcHBlZFNlbGVjdGlvbihuYXRpdmVTZWwsIGRvY1NlbCwgd2luKTsNCiAgICAgICAgICAgIHdpblt3aW5kb3dQcm9wZXJ0eU5hbWVdID0gc2VsOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBzZWw7DQogICAgfTsNCg0KICAgIGFwaS5nZXRJZnJhbWVTZWxlY3Rpb24gPSBmdW5jdGlvbihpZnJhbWVFbCkgew0KICAgICAgICByZXR1cm4gYXBpLmdldFNlbGVjdGlvbihkb20uZ2V0SWZyYW1lV2luZG93KGlmcmFtZUVsKSk7DQogICAgfTsNCg0KICAgIHZhciBzZWxQcm90byA9IFdyYXBwZWRTZWxlY3Rpb24ucHJvdG90eXBlOw0KDQogICAgZnVuY3Rpb24gY3JlYXRlQ29udHJvbFNlbGVjdGlvbihzZWwsIHJhbmdlcykgew0KICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgc2VsZWN0aW9uIGJlY29tZXMgb2YgdHlwZSAiQ29udHJvbCINCiAgICAgICAgdmFyIGRvYyA9IGRvbS5nZXREb2N1bWVudChyYW5nZXNbMF0uc3RhcnRDb250YWluZXIpOw0KICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gZG9tLmdldEJvZHkoZG9jKS5jcmVhdGVDb250cm9sUmFuZ2UoKTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsOyBpIDwgcmFuZ2VDb3VudDsgKytpKSB7DQogICAgICAgICAgICBlbCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2VzW2ldKTsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgY29udHJvbFJhbmdlLmFkZChlbCk7DQogICAgICAgICAgICB9IGNhdGNoIChleCkgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigic2V0UmFuZ2VzKCk6IEVsZW1lbnQgd2l0aGluIHRoZSBvbmUgb2YgdGhlIHNwZWNpZmllZCBSYW5nZXMgY291bGQgbm90IGJlIGFkZGVkIHRvIGNvbnRyb2wgc2VsZWN0aW9uIChkb2VzIGl0IGhhdmUgbGF5b3V0PykiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjb250cm9sUmFuZ2Uuc2VsZWN0KCk7DQoNCiAgICAgICAgLy8gVXBkYXRlIHRoZSB3cmFwcGVkIHNlbGVjdGlvbiBiYXNlZCBvbiB3aGF0J3Mgbm93IGluIHRoZSBuYXRpdmUgc2VsZWN0aW9uDQogICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTsNCiAgICB9DQoNCiAgICAvLyBTZWxlY3RpbmcgYSByYW5nZQ0KICAgIGlmICghdXNlRG9jdW1lbnRTZWxlY3Rpb24gJiYgc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgJiYgdXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXN0U2VsZWN0aW9uLCBbInJlbW92ZUFsbFJhbmdlcyIsICJhZGRSYW5nZSJdKSkgew0KICAgICAgICBzZWxQcm90by5yZW1vdmVBbGxSYW5nZXMgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24odGhpcyk7DQogICAgICAgIH07DQoNCiAgICAgICAgdmFyIGFkZFJhbmdlQmFja3dhcmRzID0gZnVuY3Rpb24oc2VsLCByYW5nZSkgew0KICAgICAgICAgICAgdmFyIGRvYyA9IERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpOw0KICAgICAgICAgICAgdmFyIGVuZFJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7DQogICAgICAgICAgICBlbmRSYW5nZS5jb2xsYXBzZVRvUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOw0KICAgICAgICAgICAgc2VsLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShlbmRSYW5nZSkpOw0KICAgICAgICAgICAgc2VsLm5hdGl2ZVNlbGVjdGlvbi5leHRlbmQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTsNCiAgICAgICAgICAgIHNlbC5yZWZyZXNoKCk7DQogICAgICAgIH07DQoNCiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc1JhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UsIGJhY2t3YXJkcykgew0KICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgdGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBpZiAoYmFja3dhcmRzICYmIHNlbGVjdGlvbkhhc0V4dGVuZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZHModGhpcywgcmFuZ2UpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUmFuZ2VDb3VudDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSYW5nZUNvdW50ID0gdGhpcy5yYW5nZUNvdW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmFuZ2VDb3VudCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShyYW5nZSkpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIGFkZGluZyB0aGUgcmFuZ2Ugd2FzIHN1Y2Nlc3NmdWwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VDb3VudCA9IHRoaXMubmF0aXZlU2VsZWN0aW9uLnJhbmdlQ291bnQ7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQgPT0gcHJldmlvdXNSYW5nZUNvdW50ICsgMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYW5nZSB3YXMgYWRkZWQgc3VjY2Vzc2Z1bGx5DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSByYW5nZSB0aGF0IHdlIGFkZGVkIHRvIHRoZSBzZWxlY3Rpb24gaXMgcmVmbGVjdGVkIGluIHRoZSBsYXN0IHJhbmdlIGV4dHJhY3RlZCBmcm9tDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlbGVjdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcGkuY29uZmlnLmNoZWNrU2VsZWN0aW9uUmFuZ2VzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYXRpdmVSYW5nZSA9IGdldFNlbGVjdGlvblJhbmdlQXQodGhpcy5uYXRpdmVTZWxlY3Rpb24sIHRoaXMucmFuZ2VDb3VudCAtIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmF0aXZlUmFuZ2UgJiYgIURvbVJhbmdlLnJhbmdlc0VxdWFsKG5hdGl2ZVJhbmdlLCByYW5nZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhcHBlbnMgaW4gV2ViS2l0IHdpdGgsIGZvciBleGFtcGxlLCBhIHNlbGVjdGlvbiBwbGFjZWQgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dCBub2RlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IG5ldyBXcmFwcGVkUmFuZ2UobmF0aXZlUmFuZ2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jhbmdlc1t0aGlzLnJhbmdlQ291bnQgLSAxXSA9IHJhbmdlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHRoaXMsIHJhbmdlLCBzZWxlY3Rpb25Jc0JhY2t3YXJkcyh0aGlzLm5hdGl2ZVNlbGVjdGlvbikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZCh0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZQ==bHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmFuZ2Ugd2FzIG5vdCBhZGRlZCBzdWNjZXNzZnVsbHkuIFRoZSBzaW1wbGVzdCB0aGluZyBpcyB0byByZWZyZXNoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc2VsUHJvdG8uYWRkUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSwgYmFja3dhcmRzKSB7DQogICAgICAgICAgICAgICAgaWYgKGJhY2t3YXJkcyAmJiBzZWxlY3Rpb25IYXNFeHRlbmQpIHsNCiAgICAgICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZHModGhpcywgcmFuZ2UpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uLmFkZFJhbmdlKGdldE5hdGl2ZVJhbmdlKHJhbmdlKSk7DQogICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH0NCg0KICAgICAgICBzZWxQcm90by5zZXRSYW5nZXMgPSBmdW5jdGlvbihyYW5nZXMpIHsNCiAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIHJhbmdlcy5sZW5ndGggPiAxKSB7DQogICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbaV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICB9IGVsc2UgaWYgKHV0aWwuaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sICJlbXB0eSIpICYmIHV0aWwuaXNIb3N0TWV0aG9kKHRlc3RSYW5nZSwgInNlbGVjdCIpICYmDQogICAgICAgICAgICAgICBpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIHVzZURvY3VtZW50U2VsZWN0aW9uKSB7DQoNCiAgICAgICAgc2VsUHJvdG8ucmVtb3ZlQWxsUmFuZ2VzID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAvLyBBZGRlZCB0cnkvY2F0Y2ggYXMgZml4IGZvciBpc3N1ZSAjMjENCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgdGhpcy5kb2NTZWxlY3Rpb24uZW1wdHkoKTsNCg0KICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBlbXB0eSgpIG5vdCB3b3JraW5nIChpc3N1ZSAjMjQpDQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgIT0gIk5vbmUiKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIGZhaWx1cmUgdG8gZW1wdHkgYSBjb250cm9sIHNlbGVjdGlvbiBieSBpbnN0ZWFkIHNlbGVjdGluZyBhIFRleHRSYW5nZSBhbmQgdGhlbg0KICAgICAgICAgICAgICAgICAgICAvLyBjYWxsaW5nIGVtcHR5KCkNCiAgICAgICAgICAgICAgICAgICAgdmFyIGRvYzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5jaG9yTm9kZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZG9jID0gZG9tLmdldERvY3VtZW50KHRoaXMuYW5jaG9yTm9kZSk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gdGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmFuZ2UubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jID0gZG9tLmdldERvY3VtZW50KGNvbnRyb2xSYW5nZS5pdGVtKDApKS5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChkb2MpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0UmFuZ2UgPSBkb2MuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRSYW5nZS5zZWxlY3QoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jU2VsZWN0aW9uLmVtcHR5KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoKGV4KSB7fQ0KICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24odGhpcyk7DQogICAgICAgIH07DQoNCiAgICAgICAgc2VsUHJvdG8uYWRkUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkgew0KICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgV3JhcHBlZFJhbmdlLnJhbmdlVG9UZXh0UmFuZ2UocmFuZ2UpLnNlbGVjdCgpOw0KICAgICAgICAgICAgICAgIHRoaXMuX3Jhbmdlc1swXSA9IHJhbmdlOw0KICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VDb3VudCA9IDE7DQogICAgICAgICAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRoaXMuX3Jhbmdlc1swXS5jb2xsYXBzZWQ7DQogICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2UodGhpcywgcmFuZ2UsIGZhbHNlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCg0KICAgICAgICBzZWxQcm90by5zZXRSYW5nZXMgPSBmdW5jdGlvbihyYW5nZXMpIHsNCiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgICAgICB2YXIgcmFuZ2VDb3VudCA9IHJhbmdlcy5sZW5ndGg7DQogICAgICAgICAgICBpZiAocmFuZ2VDb3VudCA+IDEpIHsNCiAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlcyk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1swXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIk5vIG1lYW5zIG9mIHNlbGVjdGluZyBhIFJhbmdlIG9yIFRleHRSYW5nZSB3YXMgZm91bmQiKTsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIHNlbFByb3RvLmdldFJhbmdlQXQgPSBmdW5jdGlvbihpbmRleCkgew0KICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMucmFuZ2VDb3VudCkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSU5ERVhfU0laRV9FUlIiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYW5nZXNbaW5kZXhdOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHZhciByZWZyZXNoU2VsZWN0aW9uOw0KDQogICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7DQogICAgICAgIHJlZnJlc2hTZWxlY3Rpb24gPSBmdW5jdGlvbihzZWwpIHsNCiAgICAgICAgICAgIHZhciByYW5nZTsNCiAgICAgICAgICAgIGlmIChhcGkuaXNTZWxlY3Rpb25WYWxpZChzZWwud2luKSkgew0KICAgICAgICAgICAgICAgIHJhbmdlID0gc2VsLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByYW5nZSA9IGRvbS5nZXRCb2R5KHNlbC53aW4uZG9jdW1lbnQpLmNyZWF0ZVRleHRSYW5nZSgpOw0KICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpOw0KICAgICAgICAgICAgfQ0KDQoNCiAgICAgICAgICAgIGlmIChzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTsNCiAgICAgIA==ICAgICAgfSBlbHNlIGlmIChpc1RleHRSYW5nZShyYW5nZSkpIHsNCiAgICAgICAgICAgICAgICB1cGRhdGVGcm9tVGV4dFJhbmdlKHNlbCwgcmFuZ2UpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSBpZiAodXRpbC5pc0hvc3RNZXRob2QodGVzdFNlbGVjdGlvbiwgImdldFJhbmdlQXQiKSAmJiB0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09ICJudW1iZXIiKSB7DQogICAgICAgIHJlZnJlc2hTZWxlY3Rpb24gPSBmdW5jdGlvbihzZWwpIHsNCiAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgc2VsLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHsNCiAgICAgICAgICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzLmxlbmd0aCA9IHNlbC5yYW5nZUNvdW50ID0gc2VsLm5hdGl2ZVNlbGVjdGlvbi5yYW5nZUNvdW50Ow0KICAgICAgICAgICAgICAgIGlmIChzZWwucmFuZ2VDb3VudCkgew0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VsLnJhbmdlQ291bnQ7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsLl9yYW5nZXNbaV0gPSBuZXcgYXBpLldyYXBwZWRSYW5nZShzZWwubmF0aXZlU2VsZWN0aW9uLmdldFJhbmdlQXQoaSkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHNlbCwgc2VsLl9yYW5nZXNbc2VsLnJhbmdlQ291bnQgLSAxXSwgc2VsZWN0aW9uSXNCYWNrd2FyZHMoc2VsLm5hdGl2ZVNlbGVjdGlvbikpOw0KICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZChzZWwpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgJiYgdHlwZW9mIHRlc3RTZWxlY3Rpb24uaXNDb2xsYXBzZWQgPT0gQk9PTEVBTiAmJiB0eXBlb2YgdGVzdFJhbmdlLmNvbGxhcHNlZCA9PSBCT09MRUFOICYmIGFwaS5mZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UpIHsNCiAgICAgICAgcmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgdmFyIHJhbmdlLCBuYXRpdmVTZWwgPSBzZWwubmF0aXZlU2VsZWN0aW9uOw0KICAgICAgICAgICAgaWYgKG5hdGl2ZVNlbC5hbmNob3JOb2RlKSB7DQogICAgICAgICAgICAgICAgcmFuZ2UgPSBnZXRTZWxlY3Rpb25SYW5nZUF0KG5hdGl2ZVNlbCwgMCk7DQogICAgICAgICAgICAgICAgc2VsLl9yYW5nZXMgPSBbcmFuZ2VdOw0KICAgICAgICAgICAgICAgIHNlbC5yYW5nZUNvdW50ID0gMTsNCiAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21OYXRpdmVTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZChzZWwpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJObyBtZWFucyBvZiBvYnRhaW5pbmcgYSBSYW5nZSBvciBUZXh0UmFuZ2UgZnJvbSB0aGUgdXNlcidzIHNlbGVjdGlvbiB3YXMgZm91bmQiKTsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIHNlbFByb3RvLnJlZnJlc2ggPSBmdW5jdGlvbihjaGVja0ZvckNoYW5nZXMpIHsNCiAgICAgICAgdmFyIG9sZFJhbmdlcyA9IGNoZWNrRm9yQ2hhbmdlcyA/IHRoaXMuX3Jhbmdlcy5zbGljZSgwKSA6IG51bGw7DQogICAgICAgIHJlZnJlc2hTZWxlY3Rpb24odGhpcyk7DQogICAgICAgIGlmIChjaGVja0ZvckNoYW5nZXMpIHsNCiAgICAgICAgICAgIHZhciBpID0gb2xkUmFuZ2VzLmxlbmd0aDsNCiAgICAgICAgICAgIGlmIChpICE9IHRoaXMuX3Jhbmdlcy5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB3aGlsZSAoaS0tKSB7DQogICAgICAgICAgICAgICAgaWYgKCFEb21SYW5nZS5yYW5nZXNFcXVhbChvbGRSYW5nZXNbaV0sIHRoaXMuX3Jhbmdlc1tpXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8vIFJlbW92YWwgb2YgYSBzaW5nbGUgcmFuZ2UNCiAgICB2YXIgcmVtb3ZlUmFuZ2VNYW51YWxseSA9IGZ1bmN0aW9uKHNlbCwgcmFuZ2UpIHsNCiAgICAgICAgdmFyIHJhbmdlcyA9IHNlbC5nZXRBbGxSYW5nZXMoKSwgcmVtb3ZlZCA9IGZhbHNlOw0KICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmIChyZW1vdmVkIHx8IHJhbmdlICE9PSByYW5nZXNbaV0pIHsNCiAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2VzW2ldKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIHRoZSBkcmFmdCBXSEFUV0cgUmFuZ2Ugc3BlYywgdGhlIHNhbWUgcmFuZ2UgbWF5IGJlIGFkZGVkIHRvIHRoZSBzZWxlY3Rpb24gbXVsdGlwbGUNCiAgICAgICAgICAgICAgICAvLyB0aW1lcy4gcmVtb3ZlUmFuZ2Ugc2hvdWxkIG9ubHkgcmVtb3ZlIHRoZSBmaXJzdCBpbnN0YW5jZSwgc28gdGhlIGZvbGxvd2luZyBlbnN1cmVzIG9ubHkgdGhlIGZpcnN0DQogICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UgaXMgcmVtb3ZlZA0KICAgICAgICAgICAgICAgIHJlbW92ZWQgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICghc2VsLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgaWYgKGltcGxlbWVudHNDb250cm9sUmFuZ2UpIHsNCiAgICAgICAgc2VsUHJvdG8ucmVtb3ZlUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkgew0KICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSB0aGlzLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgICAgIHZhciByYW5nZUVsZW1lbnQgPSBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKTsNCg0KICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBDb250cm9sUmFuZ2UgY29udGFpbmluZyBhbGwgdGhlIGVsZW1lbnRzIGluIHRoZSBzZWxlY3RlZCBDb250cm9sUmFuZ2UgbWludXMgdGhlDQogICAgICAgICAgICAgICAgLy8gZWxlbWVudCBjb250YWluZWQgYnkgdGhlIHN1cHBsaWVkIHJhbmdlDQogICAgICAgICAgICAgICAgdmFyIGRvYyA9IGRvbS5nZXREb2N1bWVudChjb250cm9sUmFuZ2UuaXRlbSgwKSk7DQogICAgICAgICAgICAgICAgdmFyIG5ld0NvbnRyb2xSYW5nZSA9IGRvbS5nZXRCb2R5KGRvYykuY3JlYXRlQ29udHJvbFJhbmdlKCk7DQogICAgICAgICAgICAgICAgdmFyIGVsLCByZW1vdmVkID0gZmFsc2U7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgICAgICAgICBlbCA9IGNvbnRyb2xSYW5nZS5pdGVtKGkpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZWwgIT09IHJhbmdlRWxlbQ==ZW50IHx8IHJlbW92ZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xSYW5nZS5hZGQoY29udHJvbFJhbmdlLml0ZW0oaSkpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLnNlbGVjdCgpOw0KDQogICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB3cmFwcGVkIHNlbGVjdGlvbiBiYXNlZCBvbiB3aGF0J3Mgbm93IGluIHRoZSBuYXRpdmUgc2VsZWN0aW9uDQogICAgICAgICAgICAgICAgdXBkYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmVtb3ZlUmFuZ2VNYW51YWxseSh0aGlzLCByYW5nZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgc2VsUHJvdG8ucmVtb3ZlUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkgew0KICAgICAgICAgICAgcmVtb3ZlUmFuZ2VNYW51YWxseSh0aGlzLCByYW5nZSk7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgLy8gRGV0ZWN0aW5nIGlmIGEgc2VsZWN0aW9uIGlzIGJhY2t3YXJkcw0KICAgIHZhciBzZWxlY3Rpb25Jc0JhY2t3YXJkczsNCiAgICBpZiAoIXVzZURvY3VtZW50U2VsZWN0aW9uICYmIHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzICYmIGFwaS5mZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UpIHsNCiAgICAgICAgc2VsZWN0aW9uSXNCYWNrd2FyZHMgPSBmdW5jdGlvbihzZWwpIHsNCiAgICAgICAgICAgIHZhciBiYWNrd2FyZHMgPSBmYWxzZTsNCiAgICAgICAgICAgIGlmIChzZWwuYW5jaG9yTm9kZSkgew0KICAgICAgICAgICAgICAgIGJhY2t3YXJkcyA9IChkb20uY29tcGFyZVBvaW50cyhzZWwuYW5jaG9yTm9kZSwgc2VsLmFuY2hvck9mZnNldCwgc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KSA9PSAxKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBiYWNrd2FyZHM7DQogICAgICAgIH07DQoNCiAgICAgICAgc2VsUHJvdG8uaXNCYWNrd2FyZHMgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25Jc0JhY2t3YXJkcyh0aGlzKTsNCiAgICAgICAgfTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBzZWxlY3Rpb25Jc0JhY2t3YXJkcyA9IHNlbFByb3RvLmlzQmFja3dhcmRzID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgLy8gU2VsZWN0aW9uIHRleHQNCiAgICAvLyBUaGlzIGlzIGNvbmZvcm1hbnQgdG8gdGhlIG5ldyBXSEFUV0cgRE9NIFJhbmdlIGRyYWZ0IHNwZWMgYnV0IGRpZmZlcnMgZnJvbSBXZWJLaXQgYW5kIE1vemlsbGEncyBpbXBsZW1lbnRhdGlvbg0KICAgIHNlbFByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7DQoNCiAgICAgICAgdmFyIHJhbmdlVGV4dHMgPSBbXTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICByYW5nZVRleHRzW2ldID0gIiIgKyB0aGlzLl9yYW5nZXNbaV07DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHJhbmdlVGV4dHMuam9pbigiIik7DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVJblNhbWVEb2N1bWVudChzZWwsIG5vZGUpIHsNCiAgICAgICAgaWYgKHNlbC5hbmNob3JOb2RlICYmIChkb20uZ2V0RG9jdW1lbnQoc2VsLmFuY2hvck5vZGUpICE9PSBkb20uZ2V0RG9jdW1lbnQobm9kZSkpKSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJXUk9OR19ET0NVTUVOVF9FUlIiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIE5vIGN1cnJlbnQgYnJvd3NlcnMgY29uZm9ybSBmdWxseSB0byB0aGUgSFRNTCA1IGRyYWZ0IHNwZWMgZm9yIHRoaXMgbWV0aG9kLCBzbyBSYW5neSdzIG93biBtZXRob2QgaXMgYWx3YXlzIHVzZWQNCiAgICBzZWxQcm90by5jb2xsYXBzZSA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgew0KICAgICAgICBhc3NlcnROb2RlSW5TYW1lRG9jdW1lbnQodGhpcywgbm9kZSk7DQogICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb20uZ2V0RG9jdW1lbnQobm9kZSkpOw0KICAgICAgICByYW5nZS5jb2xsYXBzZVRvUG9pbnQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZSk7DQogICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0cnVlOw0KICAgIH07DQoNCiAgICBzZWxQcm90by5jb2xsYXBzZVRvU3RhcnQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCkgew0KICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5fcmFuZ2VzWzBdOw0KICAgICAgICAgICAgdGhpcy5jb2xsYXBzZShyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSU5WQUxJRF9TVEFURV9FUlIiKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBzZWxQcm90by5jb2xsYXBzZVRvRW5kID0gZnVuY3Rpb24oKSB7DQogICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuX3Jhbmdlc1t0aGlzLnJhbmdlQ291bnQgLSAxXTsNCiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSU5WQUxJRF9TVEFURV9FUlIiKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICAvLyBUaGUgSFRNTCA1IHNwZWMgaXMgdmVyeSBzcGVjaWZpYyBvbiBob3cgc2VsZWN0QWxsQ2hpbGRyZW4gc2hvdWxkIGJlIGltcGxlbWVudGVkIHNvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMNCiAgICAvLyBuZXZlciB1c2VkIGJ5IFJhbmd5Lg0KICAgIHNlbFByb3RvLnNlbGVjdEFsbENoaWxkcmVuID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICBhc3NlcnROb2RlSW5TYW1lRG9jdW1lbnQodGhpcywgbm9kZSk7DQogICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb20uZ2V0RG9jdW1lbnQobm9kZSkpOw0KICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7DQogICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2UpOw0KICAgIH07DQoNCiAgICBzZWxQcm90by5kZWxldGVGcm9tRG9jdW1lbnQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgLy8gU2VwY2lhbCBiZWhhdmlvdXIgcmVxdWlyZWQgZm9yIENvbnRyb2wgc2VsZWN0aW9ucw0KICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uICYmIHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICB2YXIgZWxlbWVudDsNCiAgICAgICAgICAgIHdoaWxlIChjb250cm9sUmFuZ2UubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgZWxlbWVudCA9IGNvbnRyb2xSYW5nZS5pdGVtKDApOw0KICAgICAgICAgICAgICAgIGNvbnRyb2xSYW5nZS5yZW1vdmUoZWxlbWVudCk7DQogICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7DQogICAgICAgIH0gZWxzZSBpZiAodGhpcy5yYW5nZUNvdW50KSB7DQogICAgICAgICAgICB2YXIgcmFuZ2VzID0gdGhpcy5nZXRBbGxSYW5nZXMoKTsNCiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmFuZ2VzLmxlbmd0aDsgaSA8IA==bGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICByYW5nZXNbaV0uZGVsZXRlQ29udGVudHMoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIC8vIFRoZSBIVE1MNSBzcGVjIHNheXMgbm90aGluZyBhYm91dCB3aGF0IHRoZSBzZWxlY3Rpb24gc2hvdWxkIGNvbnRhaW4gYWZ0ZXIgY2FsbGluZyBkZWxldGVDb250ZW50cyBvbiBlYWNoDQogICAgICAgICAgICAvLyByYW5nZS4gRmlyZWZveCBtb3ZlcyB0aGUgc2VsZWN0aW9uIHRvIHdoZXJlIHRoZSBmaW5hbCBzZWxlY3RlZCByYW5nZSB3YXMsIHNvIHdlIGVtdWxhdGUgdGhhdA0KICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbbGVuIC0gMV0pOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlIG5vbi1zdGFuZGFyZCBleHRlbnNpb25zDQogICAgc2VsUHJvdG8uZ2V0QWxsUmFuZ2VzID0gZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB0aGlzLl9yYW5nZXMuc2xpY2UoMCk7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLnNldFNpbmdsZVJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgICAgdGhpcy5zZXRSYW5nZXMoIFtyYW5nZV0gKTsNCiAgICB9Ow0KDQogICAgc2VsUHJvdG8uY29udGFpbnNOb2RlID0gZnVuY3Rpb24obm9kZSwgYWxsb3dQYXJ0aWFsKSB7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9yYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmICh0aGlzLl9yYW5nZXNbaV0uY29udGFpbnNOb2RlKG5vZGUsIGFsbG93UGFydGlhbCkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLnRvSHRtbCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICB2YXIgaHRtbCA9ICIiOw0KICAgICAgICBpZiAodGhpcy5yYW5nZUNvdW50KSB7DQogICAgICAgICAgICB2YXIgY29udGFpbmVyID0gRG9tUmFuZ2UuZ2V0UmFuZ2VEb2N1bWVudCh0aGlzLl9yYW5nZXNbMF0pLmNyZWF0ZUVsZW1lbnQoImRpdiIpOw0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX3Jhbmdlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9yYW5nZXNbaV0uY2xvbmVDb250ZW50cygpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGh0bWwgPSBjb250YWluZXIuaW5uZXJIVE1MOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBodG1sOw0KICAgIH07DQoNCiAgICBmdW5jdGlvbiBpbnNwZWN0KHNlbCkgew0KICAgICAgICB2YXIgcmFuZ2VJbnNwZWN0cyA9IFtdOw0KICAgICAgICB2YXIgYW5jaG9yID0gbmV3IERvbVBvc2l0aW9uKHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KTsNCiAgICAgICAgdmFyIGZvY3VzID0gbmV3IERvbVBvc2l0aW9uKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7DQogICAgICAgIHZhciBuYW1lID0gKHR5cGVvZiBzZWwuZ2V0TmFtZSA9PSAiZnVuY3Rpb24iKSA/IHNlbC5nZXROYW1lKCkgOiAiU2VsZWN0aW9uIjsNCg0KICAgICAgICBpZiAodHlwZW9mIHNlbC5yYW5nZUNvdW50ICE9ICJ1bmRlZmluZWQiKSB7DQogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VsLnJhbmdlQ291bnQ7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgICAgIHJhbmdlSW5zcGVjdHNbaV0gPSBEb21SYW5nZS5pbnNwZWN0KHNlbC5nZXRSYW5nZUF0KGkpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gIlsiICsgbmFtZSArICIoUmFuZ2VzOiAiICsgcmFuZ2VJbnNwZWN0cy5qb2luKCIsICIpICsNCiAgICAgICAgICAgICAgICAiKShhbmNob3I6ICIgKyBhbmNob3IuaW5zcGVjdCgpICsgIiwgZm9jdXM6ICIgKyBmb2N1cy5pbnNwZWN0KCkgKyAiXSI7DQoNCiAgICB9DQoNCiAgICBzZWxQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiAiV3JhcHBlZFNlbGVjdGlvbiI7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmluc3BlY3QgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmRldGFjaCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICB0aGlzLndpblt3aW5kb3dQcm9wZXJ0eU5hbWVdID0gbnVsbDsNCiAgICAgICAgdGhpcy53aW4gPSB0aGlzLmFuY2hvck5vZGUgPSB0aGlzLmZvY3VzTm9kZSA9IG51bGw7DQogICAgfTsNCg0KICAgIFdyYXBwZWRTZWxlY3Rpb24uaW5zcGVjdCA9IGluc3BlY3Q7DQoNCiAgICBhcGkuU2VsZWN0aW9uID0gV3JhcHBlZFNlbGVjdGlvbjsNCg0KICAgIGFwaS5zZWxlY3Rpb25Qcm90b3R5cGUgPSBzZWxQcm90bzsNCg0KICAgIGFwaS5hZGRDcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXIoZnVuY3Rpb24od2luKSB7DQogICAgICAgIGlmICh0eXBlb2Ygd2luLmdldFNlbGVjdGlvbiA9PSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgd2luLmdldFNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBhcGkuZ2V0U2VsZWN0aW9uKHRoaXMpOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KICAgICAgICB3aW4gPSBudWxsOw0KICAgIH0pOw0KfSk7DQo=</content>
    <filesize>125591</filesize>
  </attachment>
  <attachment>
    <filename>rangy-core-1.3.js</filename>
    <author>XWiki.Admin</author>
    <date>1372254752000</date>
    <version>1.1</version>
    <comment/>
    <content>LyoqDQogKiBSYW5neSwgYSBjcm9zcy1icm93c2VyIEphdmFTY3JpcHQgcmFuZ2UgYW5kIHNlbGVjdGlvbiBsaWJyYXJ5DQogKiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvcmFuZ3kvDQogKg0KICogQ29weXJpZ2h0IDIwMTMsIFRpbSBEb3duDQogKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuDQogKiBWZXJzaW9uOiAxLjNhbHBoYS43NzINCiAqIEJ1aWxkIGRhdGU6IDI2IEZlYnJ1YXJ5IDIwMTMNCiAqLw0KDQp2YXIgcmFuZ3k7DQpyYW5neSA9IHJhbmd5IHx8IChmdW5jdGlvbigpIHsNCg0KICAgIHZhciBPQkpFQ1QgPSAib2JqZWN0IiwgRlVOQ1RJT04gPSAiZnVuY3Rpb24iLCBVTkRFRklORUQgPSAidW5kZWZpbmVkIjsNCg0KICAgIC8vIE1pbmltYWwgc2V0IG9mIHByb3BlcnRpZXMgcmVxdWlyZWQgZm9yIERPTSBMZXZlbCAyIFJhbmdlIGNvbXBsaWFuY2UuIENvbXBhcmlzb24gY29uc3RhbnRzIHN1Y2ggYXMgU1RBUlRfVE9fU1RBUlQNCiAgICAvLyBhcmUgb21pdHRlZCBiZWNhdXNlIHJhbmdlcyBpbiBLSFRNTCBkbyBub3QgaGF2ZSB0aGVtIGJ1dCBvdGhlcndpc2Ugd29yayBwZXJmZWN0bHkgd2VsbC4gU2VlIGlzc3VlIDExMy4NCiAgICB2YXIgZG9tUmFuZ2VQcm9wZXJ0aWVzID0gWyJzdGFydENvbnRhaW5lciIsICJzdGFydE9mZnNldCIsICJlbmRDb250YWluZXIiLCAiZW5kT2Zmc2V0IiwgImNvbGxhcHNlZCIsDQogICAgICAgICJjb21tb25BbmNlc3RvckNvbnRhaW5lciJdOw0KDQogICAgLy8gTWluaW1hbCBzZXQgb2YgbWV0aG9kcyByZXF1aXJlZCBmb3IgRE9NIExldmVsIDIgUmFuZ2UgY29tcGxpYW5jZQ0KICAgIHZhciBkb21SYW5nZU1ldGhvZHMgPSBbInNldFN0YXJ0IiwgInNldFN0YXJ0QmVmb3JlIiwgInNldFN0YXJ0QWZ0ZXIiLCAic2V0RW5kIiwgInNldEVuZEJlZm9yZSIsDQogICAgICAgICJzZXRFbmRBZnRlciIsICJjb2xsYXBzZSIsICJzZWxlY3ROb2RlIiwgInNlbGVjdE5vZGVDb250ZW50cyIsICJjb21wYXJlQm91bmRhcnlQb2ludHMiLCAiZGVsZXRlQ29udGVudHMiLA0KICAgICAgICAiZXh0cmFjdENvbnRlbnRzIiwgImNsb25lQ29udGVudHMiLCAiaW5zZXJ0Tm9kZSIsICJzdXJyb3VuZENvbnRlbnRzIiwgImNsb25lUmFuZ2UiLCAidG9TdHJpbmciLCAiZGV0YWNoIl07DQoNCiAgICB2YXIgdGV4dFJhbmdlUHJvcGVydGllcyA9IFsiYm91bmRpbmdIZWlnaHQiLCAiYm91bmRpbmdMZWZ0IiwgImJvdW5kaW5nVG9wIiwgImJvdW5kaW5nV2lkdGgiLCAiaHRtbFRleHQiLCAidGV4dCJdOw0KDQogICAgLy8gU3Vic2V0IG9mIFRleHRSYW5nZSdzIGZ1bGwgc2V0IG9mIG1ldGhvZHMgdGhhdCB3ZSdyZSBpbnRlcmVzdGVkIGluDQogICAgdmFyIHRleHRSYW5nZU1ldGhvZHMgPSBbImNvbGxhcHNlIiwgImNvbXBhcmVFbmRQb2ludHMiLCAiZHVwbGljYXRlIiwgIm1vdmVUb0VsZW1lbnRUZXh0IiwgInBhcmVudEVsZW1lbnQiLCAic2VsZWN0IiwNCiAgICAgICAgInNldEVuZFBvaW50IiwgImdldEJvdW5kaW5nQ2xpZW50UmVjdCJdOw0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIC8vIFRyaW8gb2YgZnVuY3Rpb25zIHRha2VuIGZyb20gUGV0ZXIgTWljaGF1eCdzIGFydGljbGU6DQogICAgLy8gaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvZmVhdHVyZS1kZXRlY3Rpb24tc3RhdGUtb2YtdGhlLWFydC1icm93c2VyLXNjcmlwdGluZw0KICAgIGZ1bmN0aW9uIGlzSG9zdE1ldGhvZChvLCBwKSB7DQogICAgICAgIHZhciB0ID0gdHlwZW9mIG9bcF07DQogICAgICAgIHJldHVybiB0ID09IEZVTkNUSU9OIHx8ICghISh0ID09IE9CSkVDVCAmJiBvW3BdKSkgfHwgdCA9PSAidW5rbm93biI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaXNIb3N0T2JqZWN0KG8sIHApIHsNCiAgICAgICAgcmV0dXJuICEhKHR5cGVvZiBvW3BdID09IE9CSkVDVCAmJiBvW3BdKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc0hvc3RQcm9wZXJ0eShvLCBwKSB7DQogICAgICAgIHJldHVybiB0eXBlb2Ygb1twXSAhPSBVTkRFRklORUQ7DQogICAgfQ0KDQogICAgLy8gQ3JlYXRlcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHNhdmUgdmVyYm9zZSByZXBlYXRlZCBjYWxscyB0byB0ZXN0cyBmdW5jdGlvbnMNCiAgICBmdW5jdGlvbiBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdCh0ZXN0RnVuYykgew0KICAgICAgICByZXR1cm4gZnVuY3Rpb24obywgcHJvcHMpIHsNCiAgICAgICAgICAgIHZhciBpID0gcHJvcHMubGVuZ3RoOw0KICAgICAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgICAgIGlmICghdGVzdEZ1bmMobywgcHJvcHNbaV0pKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfTsNCiAgICB9DQoNCiAgICAvLyBOZXh0IHRyaW8gb2YgZnVuY3Rpb25zIGFyZSBhIGNvbnZlbmllbmNlIHRvIHNhdmUgdmVyYm9zZSByZXBlYXRlZCBjYWxscyB0byBwcmV2aW91cyB0d28gZnVuY3Rpb25zDQogICAgdmFyIGFyZUhvc3RNZXRob2RzID0gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QoaXNIb3N0TWV0aG9kKTsNCiAgICB2YXIgYXJlSG9zdE9iamVjdHMgPSBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdChpc0hvc3RPYmplY3QpOw0KICAgIHZhciBhcmVIb3N0UHJvcGVydGllcyA9IGNyZWF0ZU11bHRpcGxlUHJvcGVydHlUZXN0KGlzSG9zdFByb3BlcnR5KTsNCg0KICAgIGZ1bmN0aW9uIGlzVGV4dFJhbmdlKHJhbmdlKSB7DQogICAgICAgIHJldHVybiByYW5nZSAmJiBhcmVIb3N0TWV0aG9kcyhyYW5nZSwgdGV4dFJhbmdlTWV0aG9kcykgJiYgYXJlSG9zdFByb3BlcnRpZXMocmFuZ2UsIHRleHRSYW5nZVByb3BlcnRpZXMpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBnZXRCb2R5KGRvYykgew0KICAgICAgICByZXR1cm4gaXNIb3N0T2JqZWN0KGRvYywgImJvZHkiKSA/IGRvYy5ib2R5IDogZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07DQogICAgfQ0KDQogICAgdmFyIG1vZHVsZXMgPSB7fTsNCiAgICANCiAgICB2YXIgYXBpID0gew0KICAgICAgICB2ZXJzaW9uOiAiMS4zYWxwaGEuNzcyIiwNCiAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLA0KICAgICAgICBzdXBwb3J0ZWQ6IHRydWUsDQoNCiAgICAgICAgdXRpbDogew0KICAgICAgICAgICAgaXNIb3N0TWV0aG9kOiBpc0hvc3RNZXRob2QsDQogICAgICAgICAgICBpc0hvc3RPYmplY3Q6IGlzSG9zdE9iamVjdCwNCiAgICAgICAgICAgIGlzSG9zdFByb3BlcnR5OiBpc0hvc3RQcm9wZXJ0eSwNCiAgICAgICAgICAgIGFyZUhvc3RNZXRob2RzOiBhcmVIb3N0TWV0aG9kcywNCiAgICAgICAgICAgIGFyZUhvc3RPYmplY3RzOiBhcmVIb3N0T2JqZWN0cywNCiAgICAgICAgICAgIGFyZUhvc3RQcm9wZXJ0aWVzOiBhcmVIb3N0UHJvcGVydGllcywNCiAgICAgICAgICAgIGlzVGV4dFJhbmdlOiBpc1RleHRSYW5nZSwNCiAgICAgICAgICAgIGdldEJvZHk6IGdldEJvZHkNCiAgICAgICAgfSwNCg0KICAgICAgICBmZWF0dXJlczoge30sDQoNCiAgICAgICAgbW9kdWxlczogbW9kdWxlcywNCiAgICAgICAgY29uZmlnOiB7DQogICAgICAgICAgICBhbGVydE9uRmFpbDogdHJ1ZSwNCiAgICAgICAgICAgIGFsZXJ0T25XYXJuOiBmYWxzZSwNCiAgICAgICAgICAgIHByZWZlclRleHRSYW5nZTogZmFsc2UNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKG1zZykgew0KICAgICAgICBpZiAoaXNIb3N0T2JqZWN0KHdpbmRvdywgImNvbnNvbGUiKSAmJiBpc0hvc3RNZXRob2Qod2luZG93LmNvbnNvbGUsICJsb2ciKSkgew0KICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKG1zZyk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhbGVydE9yTG9nKG1zZywgc2hvdWxkQWxlcnQpIHsNCiAgICAgICAgaWYgKHNob3VsZEFsZXJ0KSB7DQ==CiAgICAgICAgICAgIHdpbmRvdy5hbGVydChtc2cpOw0KICAgICAgICB9IGVsc2UgIHsNCiAgICAgICAgICAgIGNvbnNvbGVMb2cobXNnKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGZhaWwocmVhc29uKSB7DQogICAgICAgIGFwaS5pbml0aWFsaXplZCA9IHRydWU7DQogICAgICAgIGFwaS5zdXBwb3J0ZWQgPSBmYWxzZTsNCiAgICAgICAgYWxlcnRPckxvZygiUmFuZ3kgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBhZ2UgaW4geW91ciBicm93c2VyLiBSZWFzb246ICIgKyByZWFzb24sIGFwaS5jb25maWcuYWxlcnRPbkZhaWwpOw0KICAgIH0NCg0KICAgIGFwaS5mYWlsID0gZmFpbDsNCg0KICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7DQogICAgICAgIGFsZXJ0T3JMb2coIlJhbmd5IHdhcm5pbmc6ICIgKyBtc2csIGFwaS5jb25maWcuYWxlcnRPbldhcm4pOw0KICAgIH0NCg0KICAgIGFwaS53YXJuID0gd2FybjsNCg0KICAgIC8vIEFkZCB1dGlsaXR5IGV4dGVuZCgpIG1ldGhvZA0KICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eSkgew0KICAgICAgICBhcGkudXRpbC5leHRlbmQgPSBmdW5jdGlvbihvYmosIHByb3BzLCBkZWVwKSB7DQogICAgICAgICAgICB2YXIgbywgcDsNCiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcHJvcHMpIHsNCiAgICAgICAgICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoaSkpIHsNCiAgICAgICAgICAgICAgICAgICAgbyA9IG9ialtpXTsNCiAgICAgICAgICAgICAgICAgICAgcCA9IHByb3BzW2ldOw0KICAgICAgICAgICAgICAgICAgICAvL2lmIChkZWVwKSBhbGVydChbbyAhPT0gbnVsbCwgdHlwZW9mIG8gPT0gIm9iamVjdCIsIHAgIT09IG51bGwsIHR5cGVvZiBwID09ICJvYmplY3QiXSkNCiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgbyAhPT0gbnVsbCAmJiB0eXBlb2YgbyA9PSAib2JqZWN0IiAmJiBwICE9PSBudWxsICYmIHR5cGVvZiBwID09ICJvYmplY3QiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBhcGkudXRpbC5leHRlbmQobywgcCwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgb2JqW2ldID0gcDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIGZhaWwoImhhc093blByb3BlcnR5IG5vdCBzdXBwb3J0ZWQiKTsNCiAgICB9DQoNCiAgICAvLyBUZXN0IHdoZXRoZXIgQXJyYXkucHJvdG90eXBlLnNsaWNlIGNhbiBiZSByZWxpZWQgb24gZm9yIE5vZGVMaXN0cyBhbmQgdXNlIGFuIGFsdGVybmF0aXZlIHRvQXJyYXkoKSBpZiBub3QNCiAgICAoZnVuY3Rpb24oKSB7DQogICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOw0KICAgICAgICBlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIikpOw0KICAgICAgICB2YXIgc2xpY2UgPSBbXS5zbGljZTsNCiAgICAgICAgdmFyIHRvQXJyYXk7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAoc2xpY2UuY2FsbChlbC5jaGlsZE5vZGVzLCAwKVswXS5ub2RlVHlwZSA9PSAxKSB7DQogICAgICAgICAgICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheUxpa2UsIDApOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKGUpIHt9DQoNCiAgICAgICAgaWYgKCF0b0FycmF5KSB7DQogICAgICAgICAgICB0b0FycmF5ID0gZnVuY3Rpb24oYXJyYXlMaWtlKSB7DQogICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheUxpa2UubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gYXJyYXlMaWtlW2ldOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gYXJyOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KDQogICAgICAgIGFwaS51dGlsLnRvQXJyYXkgPSB0b0FycmF5Ow0KICAgIH0pKCk7DQoNCg0KICAgIC8vIFZlcnkgc2ltcGxlIGV2ZW50IGhhbmRsZXIgd3JhcHBlciBmdW5jdGlvbiB0aGF0IGRvZXNuJ3QgYXR0ZW1wdCB0byBzb2x2ZSBpc3N1ZSBzdWNoIGFzICJ0aGlzIiBoYW5kbGluZyBvcg0KICAgIC8vIG5vcm1hbGl6YXRpb24gb2YgZXZlbnQgcHJvcGVydGllcw0KICAgIHZhciBhZGRMaXN0ZW5lcjsNCiAgICBpZiAoaXNIb3N0TWV0aG9kKGRvY3VtZW50LCAiYWRkRXZlbnRMaXN0ZW5lciIpKSB7DQogICAgICAgIGFkZExpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBldmVudFR5cGUsIGxpc3RlbmVyKSB7DQogICAgICAgICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7DQogICAgICAgIH07DQogICAgfSBlbHNlIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJhdHRhY2hFdmVudCIpKSB7DQogICAgICAgIGFkZExpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBldmVudFR5cGUsIGxpc3RlbmVyKSB7DQogICAgICAgICAgICBvYmouYXR0YWNoRXZlbnQoIm9uIiArIGV2ZW50VHlwZSwgbGlzdGVuZXIpOw0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIGZhaWwoIkRvY3VtZW50IGRvZXMgbm90IGhhdmUgcmVxdWlyZWQgYWRkRXZlbnRMaXN0ZW5lciBvciBhdHRhY2hFdmVudCBtZXRob2QiKTsNCiAgICB9DQogICAgDQogICAgYXBpLnV0aWwuYWRkTGlzdGVuZXIgPSBhZGRMaXN0ZW5lcjsNCg0KICAgIHZhciBpbml0TGlzdGVuZXJzID0gW107DQogICAgDQogICAgZnVuY3Rpb24gZ2V0RXJyb3JEZXNjKGV4KSB7DQogICAgICAgIHJldHVybiBleC5tZXNzYWdlIHx8IGV4LmRlc2NyaXB0aW9uIHx8IFN0cmluZyhleCk7DQogICAgfQ0KDQogICAgLy8gSW5pdGlhbGl6YXRpb24NCiAgICBmdW5jdGlvbiBpbml0KCkgew0KICAgICAgICBpZiAoYXBpLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdmFyIHRlc3RSYW5nZTsNCiAgICAgICAgdmFyIGltcGxlbWVudHNEb21SYW5nZSA9IGZhbHNlLCBpbXBsZW1lbnRzVGV4dFJhbmdlID0gZmFsc2U7DQoNCiAgICAgICAgLy8gRmlyc3QsIHBlcmZvcm0gYmFzaWMgZmVhdHVyZSB0ZXN0cw0KDQogICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJjcmVhdGVSYW5nZSIpKSB7DQogICAgICAgICAgICB0ZXN0UmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgaWYgKGFyZUhvc3RNZXRob2RzKHRlc3RSYW5nZSwgZG9tUmFuZ2VNZXRob2RzKSAmJiBhcmVIb3N0UHJvcGVydGllcyh0ZXN0UmFuZ2UsIGRvbVJhbmdlUHJvcGVydGllcykpIHsNCiAgICAgICAgICAgICAgICBpbXBsZW1lbnRzRG9tUmFuZ2UgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGVzdFJhbmdlLmRldGFjaCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTsNCiAgICAgICAgaWYgKCFib2R5IHx8IGJvZHkubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPSAiYm9keSIpIHsNCiAgICAgICAgICAgIGZhaWwoIk5vIGJvZHkgZWxlbWVudCBmb3VuZCIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGJvZHkgJiYgaXNIb3N0TWV0aG9kKGJvZHksICJjcmVhdGVUZXh0UmFuZ2UiKSkgew0KICAgICAgICAgICAgdGVzdFJhbmdlID0gYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTsNCiAgICAgICAgICAgIGlmIChpc1RleHRSYW5nZSh0ZXN0UmFuZ2UpKSB7DQogICAgICAgICAgICAgICAgaW1wbGVtZW50c1RleHRSYW5nZSA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWltcGxlbWVudHNEb21SYW5nZSAmJiAhaW1wbGVtZW50c1RleHRSYW5nZSkgew0KICAgICAgICAgICAgZmFpbCgiTmVpdGhlciBSYW5nZSBub3IgVGV4dFJhbmdlIGFyZSBhdmFpbGFibGUiKTsNCiAgICAgICAgIA==ICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgYXBpLmluaXRpYWxpemVkID0gdHJ1ZTsNCiAgICAgICAgYXBpLmZlYXR1cmVzID0gew0KICAgICAgICAgICAgaW1wbGVtZW50c0RvbVJhbmdlOiBpbXBsZW1lbnRzRG9tUmFuZ2UsDQogICAgICAgICAgICBpbXBsZW1lbnRzVGV4dFJhbmdlOiBpbXBsZW1lbnRzVGV4dFJhbmdlDQogICAgICAgIH07DQoNCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBtb2R1bGVzDQogICAgICAgIHZhciBtb2R1bGUsIGVycm9yTWVzc2FnZTsNCiAgICAgICAgZm9yICh2YXIgbW9kdWxlTmFtZSBpbiBtb2R1bGVzKSB7DQogICAgICAgICAgICBpZiAoIChtb2R1bGUgPSBtb2R1bGVzW21vZHVsZU5hbWVdKSBpbnN0YW5jZW9mIE1vZHVsZSApIHsNCiAgICAgICAgICAgICAgICBtb2R1bGUuaW5pdCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAvLyBDYWxsIGluaXQgbGlzdGVuZXJzDQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbml0TGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGluaXRMaXN0ZW5lcnNbaV0oYXBpKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gIlJhbmd5IGluaXQgbGlzdGVuZXIgdGhyZXcgYW4gZXhjZXB0aW9uLiBDb250aW51aW5nLiBEZXRhaWw6ICIgKyBnZXRFcnJvckRlc2MoZXgpOw0KICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coZXJyb3JNZXNzYWdlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIEFsbG93IGV4dGVybmFsIHNjcmlwdHMgdG8gaW5pdGlhbGl6ZSB0aGlzIGxpYnJhcnkgaW4gY2FzZSBpdCdzIGxvYWRlZCBhZnRlciB0aGUgZG9jdW1lbnQgaGFzIGxvYWRlZA0KICAgIGFwaS5pbml0ID0gaW5pdDsNCg0KICAgIC8vIEV4ZWN1dGUgbGlzdGVuZXIgaW1tZWRpYXRlbHkgaWYgYWxyZWFkeSBpbml0aWFsaXplZA0KICAgIGFwaS5hZGRJbml0TGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikgew0KICAgICAgICBpZiAoYXBpLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICBsaXN0ZW5lcihhcGkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaW5pdExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICB2YXIgY3JlYXRlTWlzc2luZ05hdGl2ZUFwaUxpc3RlbmVycyA9IFtdOw0KDQogICAgYXBpLmFkZENyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7DQogICAgICAgIGNyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGNyZWF0ZU1pc3NpbmdOYXRpdmVBcGkod2luKSB7DQogICAgICAgIHdpbiA9IHdpbiB8fCB3aW5kb3c7DQogICAgICAgIGluaXQoKTsNCg0KICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXJzDQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICBjcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXJzW2ldKHdpbik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBhcGkuY3JlYXRlTWlzc2luZ05hdGl2ZUFwaSA9IGNyZWF0ZU1pc3NpbmdOYXRpdmVBcGk7DQoNCiAgICBmdW5jdGlvbiBNb2R1bGUobmFtZSwgaW5pdGlhbGl6ZXIpIHsNCiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsNCiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlOw0KICAgICAgICB0aGlzLnN1cHBvcnRlZCA9IGZhbHNlOw0KICAgICAgICB0aGlzLmluaXQgPSBpbml0aWFsaXplcjsNCiAgICB9DQoNCiAgICBNb2R1bGUucHJvdG90eXBlID0gew0KICAgICAgICBmYWlsOiBmdW5jdGlvbihyZWFzb24pIHsNCiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlOw0KICAgICAgICAgICAgdGhpcy5zdXBwb3J0ZWQgPSBmYWxzZTsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTW9kdWxlICciICsgdGhpcy5uYW1lICsgIicgZmFpbGVkIHRvIGxvYWQ6ICIgKyByZWFzb24pOw0KICAgICAgICB9LA0KDQogICAgICAgIHdhcm46IGZ1bmN0aW9uKG1zZykgew0KICAgICAgICAgICAgYXBpLndhcm4oIk1vZHVsZSAiICsgdGhpcy5uYW1lICsgIjogIiArIG1zZyk7DQogICAgICAgIH0sDQoNCiAgICAgICAgZGVwcmVjYXRpb25Ob3RpY2U6IGZ1bmN0aW9uKGRlcHJlY2F0ZWQsIHJlcGxhY2VtZW50KSB7DQogICAgICAgICAgICBhcGkud2FybigiREVQUkVDQVRFRDogIiArIGRlcHJlY2F0ZWQgKyAiIGluIG1vZHVsZSAiICsgdGhpcy5uYW1lICsgImlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgIg0KICAgICAgICAgICAgICAgICsgcmVwbGFjZW1lbnQgKyAiIGluc3RlYWQiKTsNCiAgICAgICAgfSwNCg0KICAgICAgICBjcmVhdGVFcnJvcjogZnVuY3Rpb24obXNnKSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCJFcnJvciBpbiBSYW5neSAiICsgdGhpcy5uYW1lICsgIiBtb2R1bGU6ICIgKyBtc2cpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIGFwaS5jcmVhdGVNb2R1bGUgPSBmdW5jdGlvbihuYW1lLCBpbml0RnVuYykgew0KICAgICAgICB2YXIgbW9kdWxlID0gbmV3IE1vZHVsZShuYW1lLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIGlmICghbW9kdWxlLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICAgICAgbW9kdWxlLmluaXRpYWxpemVkID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBpbml0RnVuYyhhcGksIG1vZHVsZSk7DQogICAgICAgICAgICAgICAgICAgIG1vZHVsZS5zdXBwb3J0ZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAiTW9kdWxlICciICsgbmFtZSArICInIGZhaWxlZCB0byBsb2FkOiAiICsgZ2V0RXJyb3JEZXNjKGV4KTsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZUxvZyhlcnJvck1lc3NhZ2UpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICAgIG1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7DQogICAgfTsNCg0KICAgIGFwaS5yZXF1aXJlTW9kdWxlcyA9IGZ1bmN0aW9uKG1vZHVsZU5hbWVzKSB7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtb2R1bGVOYW1lcy5sZW5ndGgsIG1vZHVsZSwgbW9kdWxlTmFtZTsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICBtb2R1bGVOYW1lID0gbW9kdWxlTmFtZXNbaV07DQogICAgICAgICAgICANCiAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZXNbbW9kdWxlTmFtZV07DQogICAgICAgICAgICBpZiAoIW1vZHVsZSB8fCAhKG1vZHVsZSBpbnN0YW5jZW9mIE1vZHVsZSkpIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoInJlcXVpcmVkIG1vZHVsZSAnIiArIG1vZHVsZU5hbWUgKyAiJyBub3QgZm91bmQiKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgbW9kdWxlLmluaXQoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKCFtb2R1bGUuc3VwcG9ydGVkKSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJyZXF1aXJlZCBtb2R1bGUgJyIgKyBtb2R1bGVOYW1lICsgIicgbm90IHN1cHBvcnRlZCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAvLyBXYWl0IGZvciBkb2N1bWVudCB0byBsb2FkIGJlZm9yZSBydW5uaW5nIHRlc3RzDQoNCiAgICB2YXIgZG9jUmVhZHkgPSBmYWxzZTsNCg0KICAgIHZhciBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHsNCiAgICAgICAgaWYgKCFkb2NSZWFkeSkgew0KICAgICAgICAgICAgZG9jUmVhZA==eSA9IHRydWU7DQogICAgICAgICAgICBpZiAoIWFwaS5pbml0aWFsaXplZCkgew0KICAgICAgICAgICAgICAgIGluaXQoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICAvLyBUZXN0IHdoZXRoZXIgd2UgaGF2ZSB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgdGhhdCB3ZSB3aWxsIG5lZWQNCiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PSBVTkRFRklORUQpIHsNCiAgICAgICAgZmFpbCgiTm8gd2luZG93IGZvdW5kIik7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PSBVTkRFRklORUQpIHsNCiAgICAgICAgZmFpbCgiTm8gZG9jdW1lbnQgZm91bmQiKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJhZGRFdmVudExpc3RlbmVyIikpIHsNCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGxvYWRIYW5kbGVyLCBmYWxzZSk7DQogICAgfQ0KDQogICAgLy8gQWRkIGEgZmFsbGJhY2sgaW4gY2FzZSB0aGUgRE9NQ29udGVudExvYWRlZCBldmVudCBpc24ndCBzdXBwb3J0ZWQNCiAgICBhZGRMaXN0ZW5lcih3aW5kb3csICJsb2FkIiwgbG9hZEhhbmRsZXIpOw0KDQogICAgcmV0dXJuIGFwaTsNCn0pKCk7DQoKcmFuZ3kuY3JlYXRlTW9kdWxlKCJEb21VdGlsIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCiAgICB2YXIgVU5ERUYgPSAidW5kZWZpbmVkIjsNCiAgICB2YXIgdXRpbCA9IGFwaS51dGlsOw0KDQogICAgLy8gUGVyZm9ybSBmZWF0dXJlIHRlc3RzDQogICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKGRvY3VtZW50LCBbImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCAiY3JlYXRlRWxlbWVudCIsICJjcmVhdGVUZXh0Tm9kZSJdKSkgew0KICAgICAgICBtb2R1bGUuZmFpbCgiZG9jdW1lbnQgbWlzc2luZyBhIE5vZGUgY3JlYXRpb24gbWV0aG9kIik7DQogICAgfQ0KDQogICAgaWYgKCF1dGlsLmlzSG9zdE1ldGhvZChkb2N1bWVudCwgImdldEVsZW1lbnRzQnlUYWdOYW1lIikpIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoImRvY3VtZW50IG1pc3NpbmcgZ2V0RWxlbWVudHNCeVRhZ05hbWUgbWV0aG9kIik7DQogICAgfQ0KDQogICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7DQogICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKGVsLCBbImluc2VydEJlZm9yZSIsICJhcHBlbmRDaGlsZCIsICJjbG9uZU5vZGUiXSB8fA0KICAgICAgICAgICAgIXV0aWwuYXJlSG9zdE9iamVjdHMoZWwsIFsicHJldmlvdXNTaWJsaW5nIiwgIm5leHRTaWJsaW5nIiwgImNoaWxkTm9kZXMiLCAicGFyZW50Tm9kZSJdKSkpIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIkluY29tcGxldGUgRWxlbWVudCBpbXBsZW1lbnRhdGlvbiIpOw0KICAgIH0NCg0KICAgIC8vIGlubmVySFRNTCBpcyByZXF1aXJlZCBmb3IgUmFuZ2UncyBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgbWV0aG9kDQogICAgaWYgKCF1dGlsLmlzSG9zdFByb3BlcnR5KGVsLCAiaW5uZXJIVE1MIikpIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIkVsZW1lbnQgaXMgbWlzc2luZyBpbm5lckhUTUwgcHJvcGVydHkiKTsNCiAgICB9DQoNCiAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgidGVzdCIpOw0KICAgIGlmICghdXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXh0Tm9kZSwgWyJzcGxpdFRleHQiLCAiZGVsZXRlRGF0YSIsICJpbnNlcnREYXRhIiwgImFwcGVuZERhdGEiLCAiY2xvbmVOb2RlIl0gfHwNCiAgICAgICAgICAgICF1dGlsLmFyZUhvc3RPYmplY3RzKGVsLCBbInByZXZpb3VzU2libGluZyIsICJuZXh0U2libGluZyIsICJjaGlsZE5vZGVzIiwgInBhcmVudE5vZGUiXSkgfHwNCiAgICAgICAgICAgICF1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRleHROb2RlLCBbImRhdGEiXSkpKSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJJbmNvbXBsZXRlIFRleHQgTm9kZSBpbXBsZW1lbnRhdGlvbiIpOw0KICAgIH0NCg0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAvLyBSZW1vdmVkIHVzZSBvZiBpbmRleE9mIGJlY2F1c2Ugb2YgYSBiaXphcnJlIGJ1ZyBpbiBPcGVyYSB0aGF0IGlzIHRocm93biBpbiBvbmUgb2YgdGhlIEFjaWQzIHRlc3RzLiBJIGhhdmVuJ3QgYmVlbg0KICAgIC8vIGFibGUgdG8gcmVwbGljYXRlIGl0IG91dHNpZGUgb2YgdGhlIHRlc3QuIFRoZSBidWcgaXMgdGhhdCBpbmRleE9mIHJldHVybnMgLTEgd2hlbiBjYWxsZWQgb24gYW4gQXJyYXkgdGhhdA0KICAgIC8vIGNvbnRhaW5zIGp1c3QgdGhlIGRvY3VtZW50IGFzIGEgc2luZ2xlIGVsZW1lbnQgYW5kIHRoZSB2YWx1ZSBzZWFyY2hlZCBmb3IgaXMgdGhlIGRvY3VtZW50Lg0KICAgIHZhciBhcnJheUNvbnRhaW5zID0gLypBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/DQogICAgICAgIGZ1bmN0aW9uKGFyciwgdmFsKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YodmFsKSA+IC0xOw0KICAgICAgICB9OiovDQoNCiAgICAgICAgZnVuY3Rpb24oYXJyLCB2YWwpIHsNCiAgICAgICAgICAgIHZhciBpID0gYXJyLmxlbmd0aDsNCiAgICAgICAgICAgIHdoaWxlIChpLS0pIHsNCiAgICAgICAgICAgICAgICBpZiAoYXJyW2ldID09PSB2YWwpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9Ow0KDQogICAgLy8gT3BlcmEgMTEgcHV0cyBIVE1MIGVsZW1lbnRzIGluIHRoZSBudWxsIG5hbWVzcGFjZSwgaXQgc2VlbXMsIGFuZCBJRSA3IGhhcyB1bmRlZmluZWQgbmFtZXNwYWNlVVJJDQogICAgZnVuY3Rpb24gaXNIdG1sTmFtZXNwYWNlKG5vZGUpIHsNCiAgICAgICAgdmFyIG5zOw0KICAgICAgICByZXR1cm4gdHlwZW9mIG5vZGUubmFtZXNwYWNlVVJJID09IFVOREVGIHx8ICgobnMgPSBub2RlLm5hbWVzcGFjZVVSSSkgPT09IG51bGwgfHwgbnMgPT0gImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwYXJlbnRFbGVtZW50KG5vZGUpIHsNCiAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsNCiAgICAgICAgcmV0dXJuIChwYXJlbnQubm9kZVR5cGUgPT0gMSkgPyBwYXJlbnQgOiBudWxsOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldE5vZGVJbmRleChub2RlKSB7DQogICAgICAgIHZhciBpID0gMDsNCiAgICAgICAgd2hpbGUoIChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpICkgew0KICAgICAgICAgICAgKytpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldE5vZGVMZW5ndGgobm9kZSkgew0KICAgICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHsNCiAgICAgICAgICAgIGNhc2UgNzoNCiAgICAgICAgICAgIGNhc2UgMTA6DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICBjYXNlIDM6DQogICAgICAgICAgICBjYXNlIDg6DQogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUubGVuZ3RoOw0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldENvbW1vbkFuY2VzdG9yKG5vZGUxLCBub2RlMikgew0KICAgICAgICB2YXIgYW5jZXN0b3JzID0gW10sIG47DQogICAgICAgIGZvciAobiA9IG5vZGUxOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7DQogICAgICAgICAgICBhbmNlc3RvcnMucHVzaChuKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvciAobiA9IG5vZGUyOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7DQogICAgICAgICAgICBpZiAoYXJyYXlDb250YWlucyhhbmNlc3RvcnMsIG4pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG47DQogICAgICAgICAgICB9DQ==CiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBudWxsOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGlzQW5jZXN0b3JPZihhbmNlc3RvciwgZGVzY2VuZGFudCwgc2VsZklzQW5jZXN0b3IpIHsNCiAgICAgICAgdmFyIG4gPSBzZWxmSXNBbmNlc3RvciA/IGRlc2NlbmRhbnQgOiBkZXNjZW5kYW50LnBhcmVudE5vZGU7DQogICAgICAgIHdoaWxlIChuKSB7DQogICAgICAgICAgICBpZiAobiA9PT0gYW5jZXN0b3IpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaXNPcklzQW5jZXN0b3JPZihhbmNlc3RvciwgZGVzY2VuZGFudCkgew0KICAgICAgICByZXR1cm4gaXNBbmNlc3Rvck9mKGFuY2VzdG9yLCBkZXNjZW5kYW50LCB0cnVlKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlLCBhbmNlc3Rvciwgc2VsZklzQW5jZXN0b3IpIHsNCiAgICAgICAgdmFyIHAsIG4gPSBzZWxmSXNBbmNlc3RvciA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7DQogICAgICAgIHdoaWxlIChuKSB7DQogICAgICAgICAgICBwID0gbi5wYXJlbnROb2RlOw0KICAgICAgICAgICAgaWYgKHAgPT09IGFuY2VzdG9yKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBuID0gcDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpIHsNCiAgICAgICAgdmFyIHQgPSBub2RlLm5vZGVUeXBlOw0KICAgICAgICByZXR1cm4gdCA9PSAzIHx8IHQgPT0gNCB8fCB0ID09IDggOyAvLyBUZXh0LCBDRGF0YVNlY3Rpb24gb3IgQ29tbWVudA0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGlzVGV4dE9yQ29tbWVudE5vZGUobm9kZSkgew0KICAgICAgICBpZiAoIW5vZGUpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICB2YXIgdCA9IG5vZGUubm9kZVR5cGU7DQogICAgICAgIHJldHVybiB0ID09IDMgfHwgdCA9PSA4IDsgLy8gVGV4dCBvciBDb21tZW50DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIobm9kZSwgcHJlY2VkaW5nTm9kZSkgew0KICAgICAgICB2YXIgbmV4dE5vZGUgPSBwcmVjZWRpbmdOb2RlLm5leHRTaWJsaW5nLCBwYXJlbnQgPSBwcmVjZWRpbmdOb2RlLnBhcmVudE5vZGU7DQogICAgICAgIGlmIChuZXh0Tm9kZSkgew0KICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBuZXh0Tm9kZSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQobm9kZSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG5vZGU7DQogICAgfQ0KDQogICAgLy8gTm90ZSB0aGF0IHdlIGNhbm5vdCB1c2Ugc3BsaXRUZXh0KCkgYmVjYXVzZSBpdCBpcyBidWdyaWRkZW4gaW4gSUUgOS4NCiAgICBmdW5jdGlvbiBzcGxpdERhdGFOb2RlKG5vZGUsIGluZGV4LCBwb3NpdGlvbnNUb1ByZXNlcnZlKSB7DQogICAgICAgIHZhciBuZXdOb2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOw0KICAgICAgICBuZXdOb2RlLmRlbGV0ZURhdGEoMCwgaW5kZXgpOw0KICAgICAgICBub2RlLmRlbGV0ZURhdGEoaW5kZXgsIG5vZGUubGVuZ3RoIC0gaW5kZXgpOw0KICAgICAgICBpbnNlcnRBZnRlcihuZXdOb2RlLCBub2RlKTsNCg0KICAgICAgICAvLyBQcmVzZXJ2ZSBwb3NpdGlvbnMNCiAgICAgICAgaWYgKHBvc2l0aW9uc1RvUHJlc2VydmUpIHsNCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBwb3NpdGlvbjsgcG9zaXRpb24gPSBwb3NpdGlvbnNUb1ByZXNlcnZlW2krK107ICkgew0KICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBjYXNlIHdoZXJlIHBvc2l0aW9uIHdhcyBpbnNpZGUgdGhlIHBvcnRpb24gb2Ygbm9kZSBhZnRlciB0aGUgc3BsaXQgcG9pbnQNCiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24ubm9kZSA9PSBub2RlICYmIHBvc2l0aW9uLm9mZnNldCA+IGluZGV4KSB7DQogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLm5vZGUgPSBuZXdOb2RlOw0KICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi5vZmZzZXQgLT0gaW5kZXg7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgcG9zaXRpb24gaXMgYSBub2RlIG9mZnNldCB3aXRoaW4gbm9kZSdzIHBhcmVudA0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uLm5vZGUgPT0gbm9kZS5wYXJlbnROb2RlICYmIHBvc2l0aW9uLm9mZnNldCA+IGdldE5vZGVJbmRleChub2RlKSkgew0KICAgICAgICAgICAgICAgICAgICArK3Bvc2l0aW9uLm9mZnNldDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG5ld05vZGU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0RG9jdW1lbnQobm9kZSkgew0KICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSA5KSB7DQogICAgICAgICAgICByZXR1cm4gbm9kZTsNCiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZS5vd25lckRvY3VtZW50ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50Ow0KICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlLmRvY3VtZW50ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gbm9kZS5kb2N1bWVudDsNCiAgICAgICAgfSBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUpIHsNCiAgICAgICAgICAgIHJldHVybiBnZXREb2N1bWVudChub2RlLnBhcmVudE5vZGUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJnZXREb2N1bWVudDogbm8gZG9jdW1lbnQgZm91bmQgZm9yIG5vZGUiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7DQogICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudChub2RlKTsNCiAgICAgICAgaWYgKHR5cGVvZiBkb2MuZGVmYXVsdFZpZXcgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBkb2MuZGVmYXVsdFZpZXc7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvYy5wYXJlbnRXaW5kb3cgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBkb2MucGFyZW50V2luZG93Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJDYW5ub3QgZ2V0IGEgd2luZG93IG9iamVjdCBmb3Igbm9kZSIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0SWZyYW1lRG9jdW1lbnQoaWZyYW1lRWwpIHsNCiAgICAgICAgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQ7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3cgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50V2luZG93LmRvY3VtZW50Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJnZXRJZnJhbWVEb2N1bWVudDogTm8gRG9jdW1lbnQgb2JqZWN0IGZvdW5kIGZvciBpZnJhbWUgZWxlbWVudCIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0SWZyYW1lV2luZG93KGlmcmFtZUVsKSB7DQogICAgICAgIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudFdpbmRvdyAhPSBVTkRFRikgew0KICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3c7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudCAhPSBVTkRFRikgew0KICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsNCiAgICAgICAgfSBlbHNlIA==ew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJnZXRJZnJhbWVXaW5kb3c6IE5vIFdpbmRvdyBvYmplY3QgZm91bmQgZm9yIGlmcmFtZSBlbGVtZW50Iik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBUaGlzIGxvb2tzIGJhZC4gSXMgaXQgd29ydGggaXQ/DQogICAgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7DQogICAgICAgIHJldHVybiBvYmogJiYgdXRpbC5pc0hvc3RNZXRob2Qob2JqLCAic2V0VGltZW91dCIpICYmIHV0aWwuaXNIb3N0T2JqZWN0KG9iaiwgImRvY3VtZW50Iik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0Q29udGVudERvY3VtZW50KG9iaiwgbW9kdWxlLCBtZXRob2ROYW1lKSB7DQogICAgICAgIHZhciBkb2M7DQoNCiAgICAgICAgaWYgKCFvYmopIHsNCiAgICAgICAgICAgIGRvYyA9IGRvY3VtZW50Ow0KICAgICAgICB9DQoNCiAgICAgICAgLy8gVGVzdCBpZiBhIERPTSBub2RlIGhhcyBiZWVuIHBhc3NlZCBhbmQgb2J0YWluIGEgZG9jdW1lbnQgb2JqZWN0IGZvciBpdCBpZiBzbw0KICAgICAgICBlbHNlIGlmICh1dGlsLmlzSG9zdFByb3BlcnR5KG9iaiwgIm5vZGVUeXBlIikpIHsNCiAgICAgICAgICAgIGRvYyA9IChvYmoubm9kZVR5cGUgPT0gMSAmJiBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICJpZnJhbWUiKQ0KICAgICAgICAgICAgICAgID8gZ2V0SWZyYW1lRG9jdW1lbnQob2JqKSA6IGdldERvY3VtZW50KG9iaik7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBUZXN0IGlmIHRoZSBkb2MgcGFyYW1ldGVyIGFwcGVhcnMgdG8gYmUgYSBXaW5kb3cgb2JqZWN0DQogICAgICAgIGVsc2UgaWYgKGlzV2luZG93KG9iaikpIHsNCiAgICAgICAgICAgIGRvYyA9IG9iai5kb2N1bWVudDsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghZG9jKSB7DQogICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IobWV0aG9kTmFtZSArICIoKTogUGFyYW1ldGVyIG11c3QgYmUgYSBXaW5kb3cgb2JqZWN0IG9yIERPTSBub2RlIik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZG9jOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFJvb3RDb250YWluZXIobm9kZSkgew0KICAgICAgICB2YXIgcGFyZW50Ow0KICAgICAgICB3aGlsZSAoIChwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUpICkgew0KICAgICAgICAgICAgbm9kZSA9IHBhcmVudDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbm9kZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKG5vZGVBLCBvZmZzZXRBLCBub2RlQiwgb2Zmc2V0Qikgew0KICAgICAgICAvLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItVHJhdmVyc2FsLVJhbmdlL3Jhbmdlcy5odG1sI0xldmVsLTItUmFuZ2UtQ29tcGFyaW5nDQogICAgICAgIHZhciBub2RlQywgcm9vdCwgY2hpbGRBLCBjaGlsZEIsIG47DQogICAgICAgIGlmIChub2RlQSA9PSBub2RlQikgew0KICAgICAgICAgICAgLy8gQ2FzZSAxOiBub2RlcyBhcmUgdGhlIHNhbWUNCiAgICAgICAgICAgIHJldHVybiBvZmZzZXRBID09PSBvZmZzZXRCID8gMCA6IChvZmZzZXRBIDwgb2Zmc2V0QikgPyAtMSA6IDE7DQogICAgICAgIH0gZWxzZSBpZiAoIChub2RlQyA9IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVCLCBub2RlQSwgdHJ1ZSkpICkgew0KICAgICAgICAgICAgLy8gQ2FzZSAyOiBub2RlIEMgKGNvbnRhaW5lciBCIG9yIGFuIGFuY2VzdG9yKSBpcyBhIGNoaWxkIG5vZGUgb2YgQQ0KICAgICAgICAgICAgcmV0dXJuIG9mZnNldEEgPD0gZ2V0Tm9kZUluZGV4KG5vZGVDKSA/IC0xIDogMTsNCiAgICAgICAgfSBlbHNlIGlmICggKG5vZGVDID0gZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUEsIG5vZGVCLCB0cnVlKSkgKSB7DQogICAgICAgICAgICAvLyBDYXNlIDM6IG5vZGUgQyAoY29udGFpbmVyIEEgb3IgYW4gYW5jZXN0b3IpIGlzIGEgY2hpbGQgbm9kZSBvZiBCDQogICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZUluZGV4KG5vZGVDKSA8IG9mZnNldEIgID8gLTEgOiAxOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gQ2FzZSA0OiBjb250YWluZXJzIGFyZSBzaWJsaW5ncyBvciBkZXNjZW5kYW50cyBvZiBzaWJsaW5ncw0KICAgICAgICAgICAgcm9vdCA9IGdldENvbW1vbkFuY2VzdG9yKG5vZGVBLCBub2RlQik7DQogICAgICAgICAgICBjaGlsZEEgPSAobm9kZUEgPT09IHJvb3QpID8gcm9vdCA6IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVBLCByb290LCB0cnVlKTsNCiAgICAgICAgICAgIGNoaWxkQiA9IChub2RlQiA9PT0gcm9vdCkgPyByb290IDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUIsIHJvb3QsIHRydWUpOw0KDQogICAgICAgICAgICBpZiAoY2hpbGRBID09PSBjaGlsZEIpIHsNCiAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBwb3NzaWJsZQ0KICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcigiY29tcGFyZVBvaW50cyBnb3QgdG8gY2FzZSA0IGFuZCBjaGlsZEEgYW5kIGNoaWxkQiBhcmUgdGhlIHNhbWUhIik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIG4gPSByb290LmZpcnN0Q2hpbGQ7DQogICAgICAgICAgICAgICAgd2hpbGUgKG4pIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IGNoaWxkQSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4gPT09IGNoaWxkQikgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgbiA9IG4ubmV4dFNpYmxpbmc7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIC8vIFRlc3QgZm9yIElFJ3MgY3Jhc2ggKElFIDYvNykgb3IgZXhjZXB0aW9uIChJRSA+PSA4KSB3aGVuIGEgcmVmZXJlbmNlIHRvIGdhcmJhZ2UtY29sbGVjdGVkIHRleHQgbm9kZSBpcyBxdWVyaWVkDQogICAgdmFyIGNyYXNoeVRleHROb2RlcyA9IGZhbHNlOw0KDQogICAgZnVuY3Rpb24gaXNCcm9rZW5Ob2RlKG5vZGUpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAoZnVuY3Rpb24oKSB7DQogICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImIiKTsNCiAgICAgICAgZWwuaW5uZXJIVE1MID0gIjEiOw0KICAgICAgICB2YXIgdGV4dE5vZGUgPSBlbC5maXJzdENoaWxkOw0KICAgICAgICBlbC5pbm5lckhUTUwgPSAiPGJyPiI7DQogICAgICAgIGNyYXNoeVRleHROb2RlcyA9IGlzQnJva2VuTm9kZSh0ZXh0Tm9kZSk7DQoNCiAgICAgICAgYXBpLmZlYXR1cmVzLmNyYXNoeVRleHROb2RlcyA9IGNyYXNoeVRleHROb2RlczsNCiAgICB9KSgpOw0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIGZ1bmN0aW9uIGluc3BlY3ROb2RlKG5vZGUpIHsNCiAgICAgICAgaWYgKCFub2RlKSB7DQogICAgICAgICAgICByZXR1cm4gIltObyBub2RlXSI7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGNyYXNoeVRleHROb2RlcyAmJiBpc0Jyb2tlbk5vZGUobm9kZSkpIHsNCiAgICAgICAgICAgIHJldHVybiAiW0Jyb2tlbiBub2RlXSI7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkpIHsNCiAgICAgICAgICAgIHJldHVybiAnIicgKyBub2RlLmRhdGEgKyAnIic7DQogICAgICAgIH0NCiAgICAgIA==ICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7DQogICAgICAgICAgICB2YXIgaWRBdHRyID0gbm9kZS5pZCA/ICcgaWQ9IicgKyBub2RlLmlkICsgJyInIDogIiI7DQogICAgICAgICAgICByZXR1cm4gIjwiICsgbm9kZS5ub2RlTmFtZSArIGlkQXR0ciArICI+WyIgKyBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICsgIl1bIiArIG5vZGUuaW5uZXJIVE1MLnNsaWNlKDAsIDIwKSArICJdIjsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbm9kZS5ub2RlTmFtZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4obm9kZSkgew0KICAgICAgICB2YXIgZnJhZ21lbnQgPSBnZXREb2N1bWVudChub2RlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGNoaWxkOw0KICAgICAgICB3aGlsZSAoIChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCkgKSB7DQogICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZyYWdtZW50Ow0KICAgIH0NCg0KICAgIHZhciBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHk7DQogICAgaWYgKHR5cGVvZiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSAhPSBVTkRFRikgew0KICAgICAgICBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHkgPSBmdW5jdGlvbihlbCwgcHJvcE5hbWUpIHsNCiAgICAgICAgICAgIHJldHVybiBnZXRXaW5kb3coZWwpLmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpW3Byb3BOYW1lXTsNCiAgICAgICAgfTsNCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlICE9IFVOREVGKSB7DQogICAgICAgIGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eSA9IGZ1bmN0aW9uKGVsLCBwcm9wTmFtZSkgew0KICAgICAgICAgICAgcmV0dXJuIGVsLmN1cnJlbnRTdHlsZVtwcm9wTmFtZV07DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIk5vIG1lYW5zIG9mIG9idGFpbmluZyBjb21wdXRlZCBzdHlsZSBwcm9wZXJ0aWVzIGZvdW5kIik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gTm9kZUl0ZXJhdG9yKHJvb3QpIHsNCiAgICAgICAgdGhpcy5yb290ID0gcm9vdDsNCiAgICAgICAgdGhpcy5fbmV4dCA9IHJvb3Q7DQogICAgfQ0KDQogICAgTm9kZUl0ZXJhdG9yLnByb3RvdHlwZSA9IHsNCiAgICAgICAgX2N1cnJlbnQ6IG51bGwsDQoNCiAgICAgICAgaGFzTmV4dDogZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gISF0aGlzLl9uZXh0Ow0KICAgICAgICB9LA0KDQogICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dDsNCiAgICAgICAgICAgIHZhciBjaGlsZCwgbmV4dDsNCiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50KSB7DQogICAgICAgICAgICAgICAgY2hpbGQgPSBuLmZpcnN0Q2hpbGQ7DQogICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSBjaGlsZDsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbnVsbDsNCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuICE9PSB0aGlzLnJvb3QpICYmICEobmV4dCA9IG4ubmV4dFNpYmxpbmcpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBuID0gbi5wYXJlbnROb2RlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSBuZXh0Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50Ow0KICAgICAgICB9LA0KDQogICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dCA9IHRoaXMucm9vdCA9IG51bGw7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgZnVuY3Rpb24gY3JlYXRlSXRlcmF0b3Iocm9vdCkgew0KICAgICAgICByZXR1cm4gbmV3IE5vZGVJdGVyYXRvcihyb290KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBEb21Qb3NpdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTsNCiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7DQogICAgfQ0KDQogICAgRG9tUG9zaXRpb24ucHJvdG90eXBlID0gew0KICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHBvcykgew0KICAgICAgICAgICAgcmV0dXJuICEhcG9zICYmIHRoaXMubm9kZSA9PT0gcG9zLm5vZGUgJiYgdGhpcy5vZmZzZXQgPT0gcG9zLm9mZnNldDsNCiAgICAgICAgfSwNCg0KICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiAiW0RvbVBvc2l0aW9uKCIgKyBpbnNwZWN0Tm9kZSh0aGlzLm5vZGUpICsgIjoiICsgdGhpcy5vZmZzZXQgKyAiKV0iOw0KICAgICAgICB9LA0KDQogICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLmluc3BlY3QoKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBmdW5jdGlvbiBET01FeGNlcHRpb24oY29kZU5hbWUpIHsNCiAgICAgICAgdGhpcy5jb2RlID0gdGhpc1tjb2RlTmFtZV07DQogICAgICAgIHRoaXMuY29kZU5hbWUgPSBjb2RlTmFtZTsNCiAgICAgICAgdGhpcy5tZXNzYWdlID0gIkRPTUV4Y2VwdGlvbjogIiArIHRoaXMuY29kZU5hbWU7DQogICAgfQ0KDQogICAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IHsNCiAgICAgICAgSU5ERVhfU0laRV9FUlI6IDEsDQogICAgICAgIEhJRVJBUkNIWV9SRVFVRVNUX0VSUjogMywNCiAgICAgICAgV1JPTkdfRE9DVU1FTlRfRVJSOiA0LA0KICAgICAgICBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlI6IDcsDQogICAgICAgIE5PVF9GT1VORF9FUlI6IDgsDQogICAgICAgIE5PVF9TVVBQT1JURURfRVJSOiA5LA0KICAgICAgICBJTlZBTElEX1NUQVRFX0VSUjogMTENCiAgICB9Ow0KDQogICAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlOw0KICAgIH07DQoNCiAgICBhcGkuZG9tID0gew0KICAgICAgICBhcnJheUNvbnRhaW5zOiBhcnJheUNvbnRhaW5zLA0KICAgICAgICBpc0h0bWxOYW1lc3BhY2U6IGlzSHRtbE5hbWVzcGFjZSwNCiAgICAgICAgcGFyZW50RWxlbWVudDogcGFyZW50RWxlbWVudCwNCiAgICAgICAgZ2V0Tm9kZUluZGV4OiBnZXROb2RlSW5kZXgsDQogICAgICAgIGdldE5vZGVMZW5ndGg6IGdldE5vZGVMZW5ndGgsDQogICAgICAgIGdldENvbW1vbkFuY2VzdG9yOiBnZXRDb21tb25BbmNlc3RvciwNCiAgICAgICAgaXNBbmNlc3Rvck9mOiBpc0FuY2VzdG9yT2YsDQogICAgICAgIGlzT3JJc0FuY2VzdG9yT2Y6IGlzT3JJc0FuY2VzdG9yT2YsDQogICAgICAgIGdldENsb3Nlc3RBbmNlc3RvckluOiBnZXRDbG9zZXN0QW5jZXN0b3JJbiwNCiAgICAgICAgaXNDaGFyYWN0ZXJEYXRhTm9kZTogaXNDaGFyYWN0ZXJEYXRhTm9kZSwNCiAgICAgICAgaXNUZXh0T3JDb21tZW50Tm9kZTogaXNUZXh0T3JDb21tZW50Tm9kZSwNCiAgICAgICAgaW5zZXJ0QWZ0ZXI6IGluc2VydEFmdGVyLA0KICAgICAgICBzcGxpdERhdGFOb2RlOiBzcGxpdERhdGFOb2RlLA0KICAgICAgICBnZXREb2N1bWVudDogZ2V0RG9jdW1lbnQsDQogICAgICAgIGdldFdpbmRvdzogZ2V0V2luZG93LA0KICAgICAgICBnZXRJZnJhbWVXaW5kb3c6IGdldElmcmFtZVdpbmRvdywNCiAgICAgICAgZ2V0SWZyYW1lRG9jdW1lbnQ6IGdldElmcmFtZURvY3VtZW50LA0KICAgICAgICBnZXRCb2R5OiB1dGlsLmdldEJvZHksDQogICAgICAgIGlzV2luZG93OiBpc1dpbmRvdywNCiAgICAgICAgZ2V0Q29udGVudERvY3VtZW50OiBnZXRDb250ZW50RG9jdW1lbnQsDQogICAgICAgIGdldFJvb3RDb250YWluZXI6IGdldFJvb3RDb250YWluZXIsDQogICAgICAgIGNvbXBhcmVQb2ludHM6IGNvbXBhcmVQb2ludHMsDQogICAgICAgIGlzQnJva2VuTm9kZTogaXNCcm9rZW5Ob2RlLA0KICAgICAgICBpbnNwZWN0Tm9kZTogaW5zcGVjdE5vZGUsDQogICAgICAgIA==Z2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5OiBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHksDQogICAgICAgIGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbjogZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuLA0KICAgICAgICBjcmVhdGVJdGVyYXRvcjogY3JlYXRlSXRlcmF0b3IsDQogICAgICAgIERvbVBvc2l0aW9uOiBEb21Qb3NpdGlvbg0KICAgIH07DQoNCiAgICBhcGkuRE9NRXhjZXB0aW9uID0gRE9NRXhjZXB0aW9uOw0KfSk7CnJhbmd5LmNyZWF0ZU1vZHVsZSgiRG9tUmFuZ2UiLCBmdW5jdGlvbihhcGksIG1vZHVsZSkgewogICAgYXBpLnJlcXVpcmVNb2R1bGVzKCBbIkRvbVV0aWwiXSApOwoKICAgIHZhciBkb20gPSBhcGkuZG9tOwogICAgdmFyIHV0aWwgPSBhcGkudXRpbDsKICAgIHZhciBEb21Qb3NpdGlvbiA9IGRvbS5Eb21Qb3NpdGlvbjsKICAgIHZhciBET01FeGNlcHRpb24gPSBhcGkuRE9NRXhjZXB0aW9uOwoKICAgIHZhciBpc0NoYXJhY3RlckRhdGFOb2RlID0gZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGU7CiAgICB2YXIgZ2V0Tm9kZUluZGV4ID0gZG9tLmdldE5vZGVJbmRleDsKICAgIHZhciBpc09ySXNBbmNlc3Rvck9mID0gZG9tLmlzT3JJc0FuY2VzdG9yT2Y7CiAgICB2YXIgZ2V0RG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQ7CiAgICB2YXIgY29tcGFyZVBvaW50cyA9IGRvbS5jb21wYXJlUG9pbnRzOwogICAgdmFyIHNwbGl0RGF0YU5vZGUgPSBkb20uc3BsaXREYXRhTm9kZTsKICAgIHZhciBnZXRDbG9zZXN0QW5jZXN0b3JJbiA9IGRvbS5nZXRDbG9zZXN0QW5jZXN0b3JJbjsKICAgIHZhciBnZXROb2RlTGVuZ3RoID0gZG9tLmdldE5vZGVMZW5ndGg7CiAgICB2YXIgYXJyYXlDb250YWlucyA9IGRvbS5hcnJheUNvbnRhaW5zOwogICAgdmFyIGdldFJvb3RDb250YWluZXIgPSBkb20uZ2V0Um9vdENvbnRhaW5lcjsKICAgIHZhciBjcmFzaHlUZXh0Tm9kZXMgPSBhcGkuZmVhdHVyZXMuY3Jhc2h5VGV4dE5vZGVzOwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gVXRpbGl0eSBmdW5jdGlvbnMKCiAgICBmdW5jdGlvbiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChub2RlLCByYW5nZSkgewogICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSAhPSAzKSAmJgogICAgICAgICAgICAgICAoaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5zdGFydENvbnRhaW5lcikgfHwgaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5lbmRDb250YWluZXIpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSYW5nZURvY3VtZW50KHJhbmdlKSB7CiAgICAgICAgcmV0dXJuIHJhbmdlLmRvY3VtZW50IHx8IGdldERvY3VtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCb3VuZGFyeUJlZm9yZU5vZGUobm9kZSkgewogICAgICAgIHJldHVybiBuZXcgRG9tUG9zaXRpb24obm9kZS5wYXJlbnROb2RlLCBnZXROb2RlSW5kZXgobm9kZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpIHsKICAgICAgICByZXR1cm4gbmV3IERvbVBvc2l0aW9uKG5vZGUucGFyZW50Tm9kZSwgZ2V0Tm9kZUluZGV4KG5vZGUpICsgMSk7CiAgICB9CgogICAgZnVuY3Rpb24gaW5zZXJ0Tm9kZUF0UG9zaXRpb24obm9kZSwgbiwgbykgewogICAgICAgIHZhciBmaXJzdE5vZGVJbnNlcnRlZCA9IG5vZGUubm9kZVR5cGUgPT0gMTEgPyBub2RlLmZpcnN0Q2hpbGQgOiBub2RlOwogICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKG4pKSB7CiAgICAgICAgICAgIGlmIChvID09IG4ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBkb20uaW5zZXJ0QWZ0ZXIobm9kZSwgbik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG8gPT0gMCA/IG4gOiBzcGxpdERhdGFOb2RlKG4sIG8pKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobyA+PSBuLmNoaWxkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgICAgIG4uYXBwZW5kQ2hpbGQobm9kZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbi5pbnNlcnRCZWZvcmUobm9kZSwgbi5jaGlsZE5vZGVzW29dKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZpcnN0Tm9kZUluc2VydGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIHJhbmdlc0ludGVyc2VjdChyYW5nZUEsIHJhbmdlQiwgdG91Y2hpbmdJc0ludGVyc2VjdGluZykgewogICAgICAgIGFzc2VydFJhbmdlVmFsaWQocmFuZ2VBKTsKICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlQik7CgogICAgICAgIGlmIChnZXRSYW5nZURvY3VtZW50KHJhbmdlQikgIT0gZ2V0UmFuZ2VEb2N1bWVudChyYW5nZUEpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIldST05HX0RPQ1VNRU5UX0VSUiIpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHMocmFuZ2VBLnN0YXJ0Q29udGFpbmVyLCByYW5nZUEuc3RhcnRPZmZzZXQsIHJhbmdlQi5lbmRDb250YWluZXIsIHJhbmdlQi5lbmRPZmZzZXQpLAogICAgICAgICAgICBlbmRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhyYW5nZUEuZW5kQ29udGFpbmVyLCByYW5nZUEuZW5kT2Zmc2V0LCByYW5nZUIuc3RhcnRDb250YWluZXIsIHJhbmdlQi5zdGFydE9mZnNldCk7CgogICAgICAgIHJldHVybiB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nID8gc3RhcnRDb21wYXJpc29uIDw9IDAgJiYgZW5kQ29tcGFyaXNvbiA+PSAwIDogc3RhcnRDb21wYXJpc29uIDwgMCAmJiBlbmRDb21wYXJpc29uID4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9uZVN1YnRyZWUoaXRlcmF0b3IpIHsKICAgICAgICB2YXIgcGFydGlhbGx5U2VsZWN0ZWQ7CiAgICAgICAgZm9yICh2YXIgbm9kZSwgZnJhZyA9IGdldFJhbmdlRG9jdW1lbnQoaXRlcmF0b3IucmFuZ2UpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgc3ViSXRlcmF0b3I7IG5vZGUgPSBpdGVyYXRvci5uZXh0KCk7ICkgewogICAgICAgICAgICBwYXJ0aWFsbHlTZWxlY3RlZCA9IGl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCk7CiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSghcGFydGlhbGx5U2VsZWN0ZWQpOwogICAgICAgICAgICBpZiAocGFydGlhbGx5U2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yID0gaXRlcmF0b3IuZ2V0U3VidHJlZUl0ZXJhdG9yKCk7CiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNsb25lU3VidHJlZShzdWJJdGVyYXRvcikpOwogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IuZGV0YWNoKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxMCkgeyAvLyBEb2N1bWVudFR5cGUKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIkhJRVJBUkNIWV9SRVFVRVNUX0VSUiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQobm9kZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmcmFnOwogICAgfQoKICAgIGZ1bmN0aW9uIGl0ZXJhdGVTdWJ0cmVlKHJhbmdlSXRlcmF0b3IsIGZ1bmMsIGl0ZXJhdG9yU3RhdGUpIHsKICAgICAgICB2YXIgaXQsIG47CiAgICAgICAgaXRlcmF0b3JTdGF0ZSA9IGl0ZXJhdG9yU3RhdGUgfHwgeyBzdG9wOiBmYWxzZSB9OwogICAgICAgIGZvciAodmFyIG5vZGUsIHN1YlJhbmdlSXRlcmF0b3I7IG5vZGUgPSByYW5nZUl0ZXJhdG9yLm5leHQoKTsgKSB7CiAgICAgICAgICAgIGlmIChyYW5nZUl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCkpIHsKICAgICAgICAgICAgICAgIGlmIChmdW5jKG5vZGUpID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yU3RhdGUuc3RvcCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgIA==ICAgICAgICAgICAgIC8vIFRoZSBub2RlIGlzIHBhcnRpYWxseSBzZWxlY3RlZCBieSB0aGUgUmFuZ2UsIHNvIHdlIGNhbiB1c2UgYSBuZXcgUmFuZ2VJdGVyYXRvciBvbiB0aGUgcG9ydGlvbiBvZgogICAgICAgICAgICAgICAgICAgIC8vIHRoZSBub2RlIHNlbGVjdGVkIGJ5IHRoZSBSYW5nZS4KICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZUl0ZXJhdG9yID0gcmFuZ2VJdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTsKICAgICAgICAgICAgICAgICAgICBpdGVyYXRlU3VidHJlZShzdWJSYW5nZUl0ZXJhdG9yLCBmdW5jLCBpdGVyYXRvclN0YXRlKTsKICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZUl0ZXJhdG9yLmRldGFjaCh0cnVlKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3JTdGF0ZS5zdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBUaGUgd2hvbGUgbm9kZSBpcyBzZWxlY3RlZCwgc28gd2UgY2FuIHVzZSBlZmZpY2llbnQgRE9NIGl0ZXJhdGlvbiB0byBpdGVyYXRlIG92ZXIgdGhlIG5vZGUgYW5kIGl0cwogICAgICAgICAgICAgICAgLy8gZGVzY2VuZGFudHMKICAgICAgICAgICAgICAgIGl0ID0gZG9tLmNyZWF0ZUl0ZXJhdG9yKG5vZGUpOwogICAgICAgICAgICAgICAgd2hpbGUgKCAobiA9IGl0Lm5leHQoKSkgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmMobikgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yU3RhdGUuc3RvcCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZGVsZXRlU3VidHJlZShpdGVyYXRvcikgewogICAgICAgIHZhciBzdWJJdGVyYXRvcjsKICAgICAgICB3aGlsZSAoaXRlcmF0b3IubmV4dCgpKSB7CiAgICAgICAgICAgIGlmIChpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7CiAgICAgICAgICAgICAgICBzdWJJdGVyYXRvciA9IGl0ZXJhdG9yLmdldFN1YnRyZWVJdGVyYXRvcigpOwogICAgICAgICAgICAgICAgZGVsZXRlU3VidHJlZShzdWJJdGVyYXRvcik7CiAgICAgICAgICAgICAgICBzdWJJdGVyYXRvci5kZXRhY2godHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpdGVyYXRvci5yZW1vdmUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBleHRyYWN0U3VidHJlZShpdGVyYXRvcikgewogICAgICAgIGZvciAodmFyIG5vZGUsIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KGl0ZXJhdG9yLnJhbmdlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIHN1Ykl0ZXJhdG9yOyBub2RlID0gaXRlcmF0b3IubmV4dCgpOyApIHsKCiAgICAgICAgICAgIGlmIChpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7CiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOwogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IgPSBpdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTsKICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZXh0cmFjdFN1YnRyZWUoc3ViSXRlcmF0b3IpKTsKICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yLmRldGFjaCh0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEwKSB7IC8vIERvY3VtZW50VHlwZQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZyYWc7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Tm9kZXNJblJhbmdlKHJhbmdlLCBub2RlVHlwZXMsIGZpbHRlcikgewogICAgICAgIHZhciBmaWx0ZXJOb2RlVHlwZXMgPSAhIShub2RlVHlwZXMgJiYgbm9kZVR5cGVzLmxlbmd0aCksIHJlZ2V4OwogICAgICAgIHZhciBmaWx0ZXJFeGlzdHMgPSAhIWZpbHRlcjsKICAgICAgICBpZiAoZmlsdGVyTm9kZVR5cGVzKSB7CiAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgiXigiICsgbm9kZVR5cGVzLmpvaW4oInwiKSArICIpJCIpOwogICAgICAgIH0KCiAgICAgICAgdmFyIG5vZGVzID0gW107CiAgICAgICAgaXRlcmF0ZVN1YnRyZWUobmV3IFJhbmdlSXRlcmF0b3IocmFuZ2UsIGZhbHNlKSwgZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICBpZiAoKCFmaWx0ZXJOb2RlVHlwZXMgfHwgcmVnZXgudGVzdChub2RlLm5vZGVUeXBlKSkgJiYgKCFmaWx0ZXJFeGlzdHMgfHwgZmlsdGVyKG5vZGUpKSkgewogICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBub2RlczsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNwZWN0KHJhbmdlKSB7CiAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHJhbmdlLmdldE5hbWUgPT0gInVuZGVmaW5lZCIpID8gIlJhbmdlIiA6IHJhbmdlLmdldE5hbWUoKTsKICAgICAgICByZXR1cm4gIlsiICsgbmFtZSArICIoIiArIGRvbS5pbnNwZWN0Tm9kZShyYW5nZS5zdGFydENvbnRhaW5lcikgKyAiOiIgKyByYW5nZS5zdGFydE9mZnNldCArICIsICIgKwogICAgICAgICAgICAgICAgZG9tLmluc3BlY3ROb2RlKHJhbmdlLmVuZENvbnRhaW5lcikgKyAiOiIgKyByYW5nZS5lbmRPZmZzZXQgKyAiKV0iOwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gUmFuZ2VJdGVyYXRvciBjb2RlIHBhcnRpYWxseSBib3Jyb3dzIGZyb20gSUVSYW5nZSBieSBUaW0gUnlhbiAoaHR0cDovL2dpdGh1Yi5jb20vdGltY2FtZXJvbnJ5YW4vSUVSYW5nZSkKCiAgICBmdW5jdGlvbiBSYW5nZUl0ZXJhdG9yKHJhbmdlLCBjbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKSB7CiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlOwogICAgICAgIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcyA9IGNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXM7CgoKICAgICAgICBpZiAoIXJhbmdlLmNvbGxhcHNlZCkgewogICAgICAgICAgICB0aGlzLnNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7CiAgICAgICAgICAgIHRoaXMuc28gPSByYW5nZS5zdGFydE9mZnNldDsKICAgICAgICAgICAgdGhpcy5lYyA9IHJhbmdlLmVuZENvbnRhaW5lcjsKICAgICAgICAgICAgdGhpcy5lbyA9IHJhbmdlLmVuZE9mZnNldDsKICAgICAgICAgICAgdmFyIHJvb3QgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjsKCiAgICAgICAgICAgIGlmICh0aGlzLnNjID09PSB0aGlzLmVjICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5zYykpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLl9maXJzdCA9IHRoaXMuX2xhc3QgPSB0aGlzLl9uZXh0ID0gdGhpcy5zYzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gdGhpcy5fbmV4dCA9ICh0aGlzLnNjID09PSByb290ICYmICFpc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuc2MpKSA/CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYy5jaGlsZE5vZGVzW3RoaXMuc29dIDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4odGhpcy5zYywgcm9vdCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0ID0gKHRoaXMuZWMgPT09IHJvb3QgJiYgIWlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5lYykpID8KICAgICAgICAgICAgIA==ICAgICAgIHRoaXMuZWMuY2hpbGROb2Rlc1t0aGlzLmVvIC0gMV0gOiBnZXRDbG9zZXN0QW5jZXN0b3JJbih0aGlzLmVjLCByb290LCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBSYW5nZUl0ZXJhdG9yLnByb3RvdHlwZSA9IHsKICAgICAgICBfY3VycmVudDogbnVsbCwKICAgICAgICBfbmV4dDogbnVsbCwKICAgICAgICBfZmlyc3Q6IG51bGwsCiAgICAgICAgX2xhc3Q6IG51bGwsCiAgICAgICAgaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZTogZmFsc2UsCgogICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuX25leHQgPSB0aGlzLl9maXJzdDsKICAgICAgICB9LAoKICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fbmV4dDsKICAgICAgICB9LAoKICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gTW92ZSB0byBuZXh0IG5vZGUKICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dDsKICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHsKICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSAoY3VycmVudCAhPT0gdGhpcy5fbGFzdCkgPyBjdXJyZW50Lm5leHRTaWJsaW5nIDogbnVsbDsKCiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgcGFydGlhbGx5IHNlbGVjdGVkIHRleHQgbm9kZXMKICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGN1cnJlbnQpICYmIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcykgewogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmVjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5jbG9uZU5vZGUodHJ1ZSkpLmRlbGV0ZURhdGEodGhpcy5lbywgY3VycmVudC5sZW5ndGggLSB0aGlzLmVvKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQgPT09IHRoaXMuc2MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmNsb25lTm9kZSh0cnVlKSkuZGVsZXRlRGF0YSgwLCB0aGlzLnNvKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBjdXJyZW50OwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudCwgc3RhcnQsIGVuZDsKCiAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGN1cnJlbnQpICYmIChjdXJyZW50ID09PSB0aGlzLnNjIHx8IGN1cnJlbnQgPT09IHRoaXMuZWMpKSB7CiAgICAgICAgICAgICAgICBzdGFydCA9IChjdXJyZW50ID09PSB0aGlzLnNjKSA/IHRoaXMuc28gOiAwOwogICAgICAgICAgICAgICAgZW5kID0gKGN1cnJlbnQgPT09IHRoaXMuZWMpID8gdGhpcy5lbyA6IGN1cnJlbnQubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKHN0YXJ0ICE9IGVuZCkgewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZGVsZXRlRGF0YShzdGFydCwgZW5kIC0gc3RhcnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50Tm9kZSkgewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGN1cnJlbnQgbm9kZSBpcyBwYXJ0aWFsbHkgc2VsZWN0ZWQKICAgICAgICBpc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgICAgcmV0dXJuIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGN1cnJlbnQsIHRoaXMucmFuZ2UpOwogICAgICAgIH0sCgogICAgICAgIGdldFN1YnRyZWVJdGVyYXRvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBzdWJSYW5nZTsKICAgICAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSkgewogICAgICAgICAgICAgICAgc3ViUmFuZ2UgPSB0aGlzLnJhbmdlLmNsb25lUmFuZ2UoKTsKICAgICAgICAgICAgICAgIHN1YlJhbmdlLmNvbGxhcHNlKGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN1YlJhbmdlID0gbmV3IFJhbmdlKGdldFJhbmdlRG9jdW1lbnQodGhpcy5yYW5nZSkpOwogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50OwogICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29udGFpbmVyID0gY3VycmVudCwgc3RhcnRPZmZzZXQgPSAwLCBlbmRDb250YWluZXIgPSBjdXJyZW50LCBlbmRPZmZzZXQgPSBnZXROb2RlTGVuZ3RoKGN1cnJlbnQpOwoKICAgICAgICAgICAgICAgIGlmIChpc09ySXNBbmNlc3Rvck9mKGN1cnJlbnQsIHRoaXMuc2MpKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB0aGlzLnNjOwogICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gdGhpcy5zbzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpc09ySXNBbmNlc3Rvck9mKGN1cnJlbnQsIHRoaXMuZWMpKSB7CiAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGhpcy5lYzsKICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSB0aGlzLmVvOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHVwZGF0ZUJvdW5kYXJpZXMoc3ViUmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2VJdGVyYXRvcihzdWJSYW5nZSwgdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKTsKICAgICAgICB9LAoKICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uKGRldGFjaFJhbmdlKSB7CiAgICAgICAgICAgIGlmIChkZXRhY2hSYW5nZSkgewogICAgICAgICAgICAgICAgdGhpcy5yYW5nZS5kZXRhY2goKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnJhbmdlID0gdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQgPSB0aGlzLl9maXJzdCA9IHRoaXMuX2xhc3QgPSB0aGlzLnNjID0gdGhpcy5zbyA9IHRoaXMuZWMgPSB0aGlzLmVvID0gbnVsbDsKICAgICAgICB9CiAgICB9OwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gRXhjZXB0aW9ucwoKICAgIGZ1bmN0aW9uIFJhbmdlRXhjZXB0aW9uKGNvZGVOYW1lKSB7CiAgICAgICAgdGhpcy5jb2RlID0gdGhpc1tjb2RlTmFtZV07CiAgICAgICAgdGhpcy5jb2RlTmFtZSA9IGNvZGVOYW1lOwogICAgICAgIHRoaXMubWVzc2FnZSA9ICJSYW5nZUV4Y2VwdGlvbjogIiArIHRoaXMuY29kZU5hbWU7CiAgICB9CgogICAgUmFuZ2VFeGNlcHRpb24ucHJvdG90eXBlID0gewogICAgICAgIEJBRF9CT1VOREFSWVBPSU5UU19FUlI6IDEsCiAgICAgICAgSU5WQUxJRF9OT0RFX1RZUEVfRVJSOiAyCiAgICB9OwoKICAgIFJhbmdlRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7CiAgICB9OwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgdmFyIGJlZm9yZUFmdGVyTm9kZVR5cGVzID0gWzEsIDMsIDQsIDUsIDcsIDgsIDEwXTsKICAgIHZhciByb290Q29udGFpbmVyTm9kZVR5cGVzIA==PSBbMiwgOSwgMTFdOwogICAgdmFyIHJlYWRvbmx5Tm9kZVR5cGVzID0gWzUsIDYsIDEwLCAxMl07CiAgICB2YXIgaW5zZXJ0YWJsZU5vZGVUeXBlcyA9IFsxLCAzLCA0LCA1LCA3LCA4LCAxMCwgMTFdOwogICAgdmFyIHN1cnJvdW5kTm9kZVR5cGVzID0gWzEsIDMsIDQsIDUsIDcsIDhdOwoKICAgIGZ1bmN0aW9uIGNyZWF0ZUFuY2VzdG9yRmluZGVyKG5vZGVUeXBlcykgewogICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBzZWxmSXNBbmNlc3RvcikgewogICAgICAgICAgICB2YXIgdCwgbiA9IHNlbGZJc0FuY2VzdG9yID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgd2hpbGUgKG4pIHsKICAgICAgICAgICAgICAgIHQgPSBuLm5vZGVUeXBlOwogICAgICAgICAgICAgICAgaWYgKGFycmF5Q29udGFpbnMobm9kZVR5cGVzLCB0KSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9OwogICAgfQoKICAgIHZhciBnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIgPSBjcmVhdGVBbmNlc3RvckZpbmRlciggWzksIDExXSApOwogICAgdmFyIGdldFJlYWRvbmx5QW5jZXN0b3IgPSBjcmVhdGVBbmNlc3RvckZpbmRlcihyZWFkb25seU5vZGVUeXBlcyk7CiAgICB2YXIgZ2V0RG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3IgPSBjcmVhdGVBbmNlc3RvckZpbmRlciggWzYsIDEwLCAxMl0gKTsKCiAgICBmdW5jdGlvbiBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGFsbG93U2VsZikgewogICAgICAgIGlmIChnZXREb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCBhbGxvd1NlbGYpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUV4Y2VwdGlvbigiSU5WQUxJRF9OT0RFX1RZUEVfRVJSIik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydE5vdERldGFjaGVkKHJhbmdlKSB7CiAgICAgICAgaWYgKCFyYW5nZS5zdGFydENvbnRhaW5lcikgewogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTlZBTElEX1NUQVRFX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGludmFsaWRUeXBlcykgewogICAgICAgIGlmICghYXJyYXlDb250YWlucyhpbnZhbGlkVHlwZXMsIG5vZGUubm9kZVR5cGUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUV4Y2VwdGlvbigiSU5WQUxJRF9OT0RFX1RZUEVfRVJSIik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkgewogICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpID8gbm9kZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTkRFWF9TSVpFX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnRTYW1lRG9jdW1lbnRPckZyYWdtZW50KG5vZGUxLCBub2RlMikgewogICAgICAgIGlmIChnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTEsIHRydWUpICE9PSBnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTIsIHRydWUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIldST05HX0RPQ1VNRU5UX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnROb2RlTm90UmVhZE9ubHkobm9kZSkgewogICAgICAgIGlmIChnZXRSZWFkb25seUFuY2VzdG9yKG5vZGUsIHRydWUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUsIGNvZGVOYW1lKSB7CiAgICAgICAgaWYgKCFub2RlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oY29kZU5hbWUpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBpc09ycGhhbihub2RlKSB7CiAgICAgICAgcmV0dXJuIChjcmFzaHlUZXh0Tm9kZXMgJiYgZG9tLmlzQnJva2VuTm9kZShub2RlKSkgfHwKICAgICAgICAgICAgIWFycmF5Q29udGFpbnMocm9vdENvbnRhaW5lck5vZGVUeXBlcywgbm9kZS5ub2RlVHlwZSkgJiYgIWdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lcihub2RlLCB0cnVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1ZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkgewogICAgICAgIHJldHVybiBvZmZzZXQgPD0gKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkgPyBub2RlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzUmFuZ2VWYWxpZChyYW5nZSkgewogICAgICAgIHJldHVybiAoISFyYW5nZS5zdGFydENvbnRhaW5lciAmJiAhIXJhbmdlLmVuZENvbnRhaW5lcgogICAgICAgICAgICAgICAgJiYgIWlzT3JwaGFuKHJhbmdlLnN0YXJ0Q29udGFpbmVyKQogICAgICAgICAgICAgICAgJiYgIWlzT3JwaGFuKHJhbmdlLmVuZENvbnRhaW5lcikKICAgICAgICAgICAgICAgICYmIGlzVmFsaWRPZmZzZXQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KQogICAgICAgICAgICAgICAgJiYgaXNWYWxpZE9mZnNldChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydFJhbmdlVmFsaWQocmFuZ2UpIHsKICAgICAgICBhc3NlcnROb3REZXRhY2hlZChyYW5nZSk7CiAgICAgICAgaWYgKCFpc1JhbmdlVmFsaWQocmFuZ2UpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiUmFuZ2UgZXJyb3I6IFJhbmdlIGlzIG5vIGxvbmdlciB2YWxpZCBhZnRlciBET00gbXV0YXRpb24gKCIgKyByYW5nZS5pbnNwZWN0KCkgKyAiKSIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIFRlc3QgdGhlIGJyb3dzZXIncyBpbm5lckhUTUwgc3VwcG9ydCB0byBkZWNpZGUgaG93IHRvIGltcGxlbWVudCBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQKICAgIHZhciBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKICAgIHZhciBodG1sUGFyc2luZ0NvbmZvcm1zID0gZmFsc2U7CiAgICB0cnkgewogICAgICAgIHN0eWxlRWwuaW5uZXJIVE1MID0gIjxiPng8L2I+IjsKICAgICAgICBodG1sUGFyc2luZ0NvbmZvcm1zID0gKHN0eWxlRWwuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAzKTsgLy8gT3BlcmEgaW5jb3JyZWN0bHkgY3JlYXRlcyBhbiBlbGVtZW50IG5vZGUKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAvLyBJRSA2IGFuZCA3IHRocm93CiAgICB9CgogICAgYXBpLmZlYXR1cmVzLmh0bWxQYXJzaW5nQ29uZm9ybXMgPSBodG1sUGFyc2luZ0NvbmZvcm1zOwoKICAgIHZhciBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgPSBodG1sUGFyc2luZ0NvbmZvcm1zID8KCiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gYXMgcGVyIEhUTUwgcGFyc2luZyBzcGVjLCB0cnVzdGluZyBpbiB0aGUgYnJvd3NlcidzIGltcGxlbWVudGF0aW9uIG9mIGlubmVySFRNTC4gU2VlCiAgICAgICAgLy8gZGlzY3Vzc2lvbiBhbmQgYmFzZSBjb2RlIGZvciB0aGlzIGltcGxlbWVudGF0aW9uIGF0IGlzc3VlIDY3LgogICAgICAgIC8vIFNwZWM6IGh0dHA6Ly9odG1sNS5vcmcvc3BlY3MvZG9tLXBhcnNpbmcuaHRtbCNleHRlbnNpb25zLXRvLXRoZS1yYW5nZS1pbnRlcmZhY2UKICAgICAgICAvLyBUaGFua3MgdG8gQWxla3MgV2lsbGlhbXMuCiAgICAgICAgZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHsKICAgICAgICAgICAgLy8gIkxldCBub2RlIHRoZSBjb250ZXh0IG9iamVjdCdzIA==c3RhcnQncyBub2RlLiIKICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Q29udGFpbmVyOwogICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQobm9kZSk7CgogICAgICAgICAgICAvLyAiSWYgdGhlIGNvbnRleHQgb2JqZWN0J3Mgc3RhcnQncyBub2RlIGlzIG51bGwsIHJhaXNlIGFuIElOVkFMSURfU1RBVEVfRVJSCiAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBhbmQgYWJvcnQgdGhlc2Ugc3RlcHMuIgogICAgICAgICAgICBpZiAoIW5vZGUpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIklOVkFMSURfU1RBVEVfRVJSIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vICJMZXQgZWxlbWVudCBiZSBhcyBmb2xsb3dzLCBkZXBlbmRpbmcgb24gbm9kZSdzIGludGVyZmFjZToiCiAgICAgICAgICAgIC8vIERvY3VtZW50LCBEb2N1bWVudCBGcmFnbWVudDogbnVsbAogICAgICAgICAgICB2YXIgZWwgPSBudWxsOwoKICAgICAgICAgICAgLy8gIkVsZW1lbnQ6IG5vZGUiCiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHsKICAgICAgICAgICAgICAgIGVsID0gbm9kZTsKCiAgICAgICAgICAgIC8vICJUZXh0LCBDb21tZW50OiBub2RlJ3MgcGFyZW50RWxlbWVudCIKICAgICAgICAgICAgfSBlbHNlIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpKSB7CiAgICAgICAgICAgICAgICBlbCA9IGRvbS5wYXJlbnRFbGVtZW50KG5vZGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyAiSWYgZWl0aGVyIGVsZW1lbnQgaXMgbnVsbCBvciBlbGVtZW50J3Mgb3duZXJEb2N1bWVudCBpcyBhbiBIVE1MIGRvY3VtZW50CiAgICAgICAgICAgIC8vIGFuZCBlbGVtZW50J3MgbG9jYWwgbmFtZSBpcyAiaHRtbCIgYW5kIGVsZW1lbnQncyBuYW1lc3BhY2UgaXMgdGhlIEhUTUwKICAgICAgICAgICAgLy8gbmFtZXNwYWNlIgogICAgICAgICAgICBpZiAoZWwgPT09IG51bGwgfHwgKAogICAgICAgICAgICAgICAgZWwubm9kZU5hbWUgPT0gIkhUTUwiCiAgICAgICAgICAgICAgICAmJiBkb20uaXNIdG1sTmFtZXNwYWNlKGdldERvY3VtZW50KGVsKS5kb2N1bWVudEVsZW1lbnQpCiAgICAgICAgICAgICAgICAmJiBkb20uaXNIdG1sTmFtZXNwYWNlKGVsKQogICAgICAgICAgICApKSB7CgogICAgICAgICAgICAvLyAibGV0IGVsZW1lbnQgYmUgYSBuZXcgRWxlbWVudCB3aXRoICJib2R5IiBhcyBpdHMgbG9jYWwgbmFtZSBhbmQgdGhlIEhUTUwKICAgICAgICAgICAgLy8gbmFtZXNwYWNlIGFzIGl0cyBuYW1lc3BhY2UuIiIKICAgICAgICAgICAgICAgIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoImJvZHkiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGVsID0gZWwuY2xvbmVOb2RlKGZhbHNlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gIklmIHRoZSBub2RlJ3MgZG9jdW1lbnQgaXMgYW4gSFRNTCBkb2N1bWVudDogSW52b2tlIHRoZSBIVE1MIGZyYWdtZW50IHBhcnNpbmcgYWxnb3JpdGhtLiIKICAgICAgICAgICAgLy8gIklmIHRoZSBub2RlJ3MgZG9jdW1lbnQgaXMgYW4gWE1MIGRvY3VtZW50OiBJbnZva2UgdGhlIFhNTCBmcmFnbWVudCBwYXJzaW5nIGFsZ29yaXRobS4iCiAgICAgICAgICAgIC8vICJJbiBlaXRoZXIgY2FzZSwgdGhlIGFsZ29yaXRobSBtdXN0IGJlIGludm9rZWQgd2l0aCBmcmFnbWVudCBhcyB0aGUgaW5wdXQKICAgICAgICAgICAgLy8gYW5kIGVsZW1lbnQgYXMgdGhlIGNvbnRleHQgZWxlbWVudC4iCiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGZyYWdtZW50U3RyOwoKICAgICAgICAgICAgLy8gIklmIHRoaXMgcmFpc2VzIGFuIGV4Y2VwdGlvbiwgdGhlbiBhYm9ydCB0aGVzZSBzdGVwcy4gT3RoZXJ3aXNlLCBsZXQgbmV3CiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGJlIHRoZSBub2RlcyByZXR1cm5lZC4iCgogICAgICAgICAgICAvLyAiTGV0IGZyYWdtZW50IGJlIGEgbmV3IERvY3VtZW50RnJhZ21lbnQuIgogICAgICAgICAgICAvLyAiQXBwZW5kIGFsbCBuZXcgY2hpbGRyZW4gdG8gZnJhZ21lbnQuIgogICAgICAgICAgICAvLyAiUmV0dXJuIGZyYWdtZW50LiIKICAgICAgICAgICAgcmV0dXJuIGRvbS5mcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4oZWwpOwogICAgICAgIH0gOgoKICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGlubmVySFRNTCBjYW5ub3QgYmUgdHJ1c3RlZCwgc28gZmFsbCBiYWNrIHRvIGEgc2ltcGxlciwgbm9uLWNvbmZvcm1hbnQgaW1wbGVtZW50YXRpb24gdGhhdAogICAgICAgIC8vIHByZXZpb3VzIHZlcnNpb25zIG9mIFJhbmd5IHVzZWQgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB1c2luZyBhIGJvZHkgZWxlbWVudCByYXRoZXIgdGhhbiBhIGRpdikKICAgICAgICBmdW5jdGlvbihmcmFnbWVudFN0cikgewogICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgdmFyIGRvYyA9IGdldFJhbmdlRG9jdW1lbnQodGhpcyk7CiAgICAgICAgICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCJib2R5Iik7CiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGZyYWdtZW50U3RyOwoKICAgICAgICAgICAgcmV0dXJuIGRvbS5mcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4oZWwpOwogICAgICAgIH07CgogICAgZnVuY3Rpb24gc3BsaXRSYW5nZUJvdW5kYXJpZXMocmFuZ2UsIHBvc2l0aW9uc1RvUHJlc2VydmUpIHsKICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlKTsKCiAgICAgICAgdmFyIHNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXIsIHNvID0gcmFuZ2Uuc3RhcnRPZmZzZXQsIGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyLCBlbyA9IHJhbmdlLmVuZE9mZnNldDsKICAgICAgICB2YXIgc3RhcnRFbmRTYW1lID0gKHNjID09PSBlYyk7CgogICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGVjKSAmJiBlbyA+IDAgJiYgZW8gPCBlYy5sZW5ndGgpIHsKICAgICAgICAgICAgc3BsaXREYXRhTm9kZShlYywgZW8sIHBvc2l0aW9uc1RvUHJlc2VydmUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpICYmIHNvID4gMCAmJiBzbyA8IHNjLmxlbmd0aCkgewogICAgICAgICAgICBzYyA9IHNwbGl0RGF0YU5vZGUoc2MsIHNvLCBwb3NpdGlvbnNUb1ByZXNlcnZlKTsKICAgICAgICAgICAgaWYgKHN0YXJ0RW5kU2FtZSkgewogICAgICAgICAgICAgICAgZW8gLT0gc287CiAgICAgICAgICAgICAgICBlYyA9IHNjOwogICAgICAgICAgICB9IGVsc2UgaWYgKGVjID09IHNjLnBhcmVudE5vZGUgJiYgZW8gPj0gZ2V0Tm9kZUluZGV4KHNjKSkgewogICAgICAgICAgICAgICAgZW8rKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBzbyA9IDA7CiAgICAgICAgfQogICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKHNjLCBzbywgZWMsIGVvKTsKICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIHZhciByYW5nZVByb3BlcnRpZXMgPSBbInN0YXJ0Q29udGFpbmVyIiwgInN0YXJ0T2Zmc2V0IiwgImVuZENvbnRhaW5lciIsICJlbmRPZmZzZXQiLCAiY29sbGFwc2VkIiwKICAgICAgICAiY29tbW9uQW5jZXN0b3JDb250YWluZXIiXTsKCiAgICB2YXIgczJzID0gMCwgczJlID0gMSwgZTJlID0gMiwgZTJzID0gMzsKICAgIHZhciBuX2IgPSAwLCBuX2EgPSAxLCBuX2JfYSA9IDIsIG5faSA9IDM7CgogICAgZnVuY3Rpb24gUmFuZ2VQcm90b3R5cGUoKSB7fQoKICAgIFJhbmdlUHJvdG90eXBlLnByb3RvdHlwZSA9IHsKICAgICAgICBjb21wYXJlQm91bmRhcnlQb2ludHM6IGZ1bmN0aW9uKGhvdywgcmFuZ2UpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudCh0aGlzLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lcik7CgogICAgICAgICAgICB2YXIgbm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCOwogICAgICAgICAgICB2YXIgcHJlZg==aXhBID0gKGhvdyA9PSBlMnMgfHwgaG93ID09IHMycykgPyAic3RhcnQiIDogImVuZCI7CiAgICAgICAgICAgIHZhciBwcmVmaXhCID0gKGhvdyA9PSBzMmUgfHwgaG93ID09IHMycykgPyAic3RhcnQiIDogImVuZCI7CiAgICAgICAgICAgIG5vZGVBID0gdGhpc1twcmVmaXhBICsgIkNvbnRhaW5lciJdOwogICAgICAgICAgICBvZmZzZXRBID0gdGhpc1twcmVmaXhBICsgIk9mZnNldCJdOwogICAgICAgICAgICBub2RlQiA9IHJhbmdlW3ByZWZpeEIgKyAiQ29udGFpbmVyIl07CiAgICAgICAgICAgIG9mZnNldEIgPSByYW5nZVtwcmVmaXhCICsgIk9mZnNldCJdOwogICAgICAgICAgICByZXR1cm4gY29tcGFyZVBvaW50cyhub2RlQSwgb2Zmc2V0QSwgbm9kZUIsIG9mZnNldEIpOwogICAgICAgIH0sCgogICAgICAgIGluc2VydE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBpbnNlcnRhYmxlTm9kZVR5cGVzKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpOwoKICAgICAgICAgICAgaWYgKGlzT3JJc0FuY2VzdG9yT2Yobm9kZSwgdGhpcy5zdGFydENvbnRhaW5lcikpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIkhJRVJBUkNIWV9SRVFVRVNUX0VSUiIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBObyBjaGVjayBmb3Igd2hldGhlciB0aGUgY29udGFpbmVyIG9mIHRoZSBzdGFydCBvZiB0aGUgUmFuZ2UgaXMgb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWxsb3cKICAgICAgICAgICAgLy8gY2hpbGRyZW4gb2YgdGhlIHR5cGUgb2Ygbm9kZTogdGhlIGJyb3dzZXIncyBET00gaW1wbGVtZW50YXRpb24gc2hvdWxkIGRvIHRoaXMgZm9yIHVzIHdoZW4gd2UgYXR0ZW1wdAogICAgICAgICAgICAvLyB0byBhZGQgdGhlIG5vZGUKCiAgICAgICAgICAgIHZhciBmaXJzdE5vZGVJbnNlcnRlZCA9IGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpOwogICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKGZpcnN0Tm9kZUluc2VydGVkKTsKICAgICAgICB9LAoKICAgICAgICBjbG9uZUNvbnRlbnRzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKCiAgICAgICAgICAgIHZhciBjbG9uZSwgZnJhZzsKICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2VkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydENvbnRhaW5lciA9PT0gdGhpcy5lbmRDb250YWluZXIgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnN0YXJ0Q29udGFpbmVyKSkgewogICAgICAgICAgICAgICAgICAgIGNsb25lID0gdGhpcy5zdGFydENvbnRhaW5lci5jbG9uZU5vZGUodHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZGF0YSA9IGNsb25lLmRhdGEuc2xpY2UodGhpcy5zdGFydE9mZnNldCwgdGhpcy5lbmRPZmZzZXQpOwogICAgICAgICAgICAgICAgICAgIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGNsb25lKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJhZzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFJhbmdlSXRlcmF0b3IodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBjbG9uZVN1YnRyZWUoaXRlcmF0b3IpOwogICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY2FuU3Vycm91bmRDb250ZW50czogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLnN0YXJ0Q29udGFpbmVyKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuZW5kQ29udGFpbmVyKTsKCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZW50cyBjYW4gYmUgc3Vycm91bmRlZC4gU3BlY2lmaWNhbGx5LCB0aGlzIG1lYW5zIHdoZXRoZXIgdGhlIHJhbmdlIHBhcnRpYWxseSBzZWxlY3RzCiAgICAgICAgICAgIC8vIG5vIG5vbi10ZXh0IG5vZGVzLgogICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTsKICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXNJbnZhbGlkID0gKGl0ZXJhdG9yLl9maXJzdCAmJiAoaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2ZpcnN0LCB0aGlzKSkgfHwKICAgICAgICAgICAgICAgICAgICAoaXRlcmF0b3IuX2xhc3QgJiYgaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2xhc3QsIHRoaXMpKSk7CiAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICByZXR1cm4gIWJvdW5kYXJpZXNJbnZhbGlkOwogICAgICAgIH0sCgogICAgICAgIHN1cnJvdW5kQ29udGVudHM6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBzdXJyb3VuZE5vZGVUeXBlcyk7CgogICAgICAgICAgICBpZiAoIXRoaXMuY2FuU3Vycm91bmRDb250ZW50cygpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFeGNlcHRpb24oIkJBRF9CT1VOREFSWVBPSU5UU19FUlIiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgY29udGVudHMKICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmV4dHJhY3RDb250ZW50cygpOwoKICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGNoaWxkcmVuIG9mIHRoZSBub2RlCiAgICAgICAgICAgIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkgewogICAgICAgICAgICAgICAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSB7CiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEluc2VydCB0aGUgbmV3IG5vZGUgYW5kIGFkZCB0aGUgZXh0cmFjdGVkIGNvbnRlbnRzCiAgICAgICAgICAgIGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpOwogICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpOwoKICAgICAgICAgICAgdGhpcy5zZWxlY3ROb2RlKG5vZGUpOwogICAgICAgIH0sCgogICAgICAgIGNsb25lUmFuZ2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICB2YXIgcmFuZ2UgPSBuZXcgUmFuZ2UoZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKSk7CiAgICAgICAgICAgIHZhciBpID0gcmFuZ2VQcm9wZXJ0aWVzLmxlbmd0aCwgcHJvcDsKICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgcHJvcCA9IHJhbmdlUHJvcGVydGllc1tpXTsKICAgICAgICAgICAgICAgIHJhbmdlW3Byb3BdID0gdGhpc1twcm9wXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmFuZ2U7CiAgICAgICAgfSwKCiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICB2YXIgc2MgPSB0aGlzLnN0YXJ0Q29udGFpbmVyOwogICAgICAgICAgICBpZiAoc2MgPT09IHRoaXMuZW5kQ29udGFpbmVyICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKHNjLm5vZGVUeXBlID09IDMgfHwgc2Mubm9kZVR5cGUgPT0gNCkgPyBzYy5kYXRhLnNsaQ==Y2UodGhpcy5zdGFydE9mZnNldCwgdGhpcy5lbmRPZmZzZXQpIDogIiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgdGV4dEJpdHMgPSBbXSwgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKGl0ZXJhdG9yLCBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gQWNjZXB0IG9ubHkgdGV4dCBvciBDREFUQSBub2Rlcywgbm90IGNvbW1lbnRzCiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyB8fCBub2RlLm5vZGVUeXBlID09IDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEJpdHMucHVzaChub2RlLmRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dEJpdHMuam9pbigiIik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBUaGUgbWV0aG9kcyBiZWxvdyBhcmUgYWxsIG5vbi1zdGFuZGFyZC4gVGhlIGZvbGxvd2luZyBiYXRjaCB3ZXJlIGludHJvZHVjZWQgYnkgTW96aWxsYSBidXQgaGF2ZSBzaW5jZQogICAgICAgIC8vIGJlZW4gcmVtb3ZlZCBmcm9tIE1vemlsbGEuCgogICAgICAgIGNvbXBhcmVOb2RlOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CgogICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlOwogICAgICAgICAgICB2YXIgbm9kZUluZGV4ID0gZ2V0Tm9kZUluZGV4KG5vZGUpOwoKICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIk5PVF9GT1VORF9FUlIiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IHRoaXMuY29tcGFyZVBvaW50KHBhcmVudCwgbm9kZUluZGV4KSwKICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSB0aGlzLmNvbXBhcmVQb2ludChwYXJlbnQsIG5vZGVJbmRleCArIDEpOwoKICAgICAgICAgICAgaWYgKHN0YXJ0Q29tcGFyaXNvbiA8IDApIHsgLy8gTm9kZSBzdGFydHMgYmVmb3JlCiAgICAgICAgICAgICAgICByZXR1cm4gKGVuZENvbXBhcmlzb24gPiAwKSA/IG5fYl9hIDogbl9iOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIChlbmRDb21wYXJpc29uID4gMCkgPyBuX2EgOiBuX2k7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjb21wYXJlUG9pbnQ6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICBhc3NlcnROb2RlKG5vZGUsICJISUVSQVJDSFlfUkVRVUVTVF9FUlIiKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKTsKCiAgICAgICAgICAgIGlmIChjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCkgPCAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPiAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9LAoKICAgICAgICBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQ6IGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCwKCiAgICAgICAgdG9IdG1sOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpOwogICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jbG9uZUNvbnRlbnRzKCkpOwogICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTDsKICAgICAgICB9LAoKICAgICAgICAvLyB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nIGRldGVybWluZXMgd2hldGhlciB0aGlzIG1ldGhvZCBjb25zaWRlcnMgYSBub2RlIHRoYXQgYm9yZGVycyBhIHJhbmdlIGludGVyc2VjdHMKICAgICAgICAvLyB3aXRoIGl0IChhcyBpbiBXZWJLaXQpIG9yIG5vdCAoYXMgaW4gR2Vja28gcHJlLTEuOSwgYW5kIHRoZSBkZWZhdWx0KQogICAgICAgIGludGVyc2VjdHNOb2RlOiBmdW5jdGlvbihub2RlLCB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgIGFzc2VydE5vZGUobm9kZSwgIk5PVF9GT1VORF9FUlIiKTsKICAgICAgICAgICAgaWYgKGdldERvY3VtZW50KG5vZGUpICE9PSBnZXRSYW5nZURvY3VtZW50KHRoaXMpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUsIG9mZnNldCA9IGdldE5vZGVJbmRleChub2RlKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZShwYXJlbnQsICJOT1RfRk9VTkRfRVJSIik7CgogICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhwYXJlbnQsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSwKICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHBhcmVudCwgb2Zmc2V0ICsgMSwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7CgogICAgICAgICAgICByZXR1cm4gdG91Y2hpbmdJc0ludGVyc2VjdGluZyA/IHN0YXJ0Q29tcGFyaXNvbiA8PSAwICYmIGVuZENvbXBhcmlzb24gPj0gMCA6IHN0YXJ0Q29tcGFyaXNvbiA8IDAgJiYgZW5kQ29tcGFyaXNvbiA+IDA7CiAgICAgICAgfSwKCiAgICAgICAgaXNQb2ludEluUmFuZ2U6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICBhc3NlcnROb2RlKG5vZGUsICJISUVSQVJDSFlfUkVRVUVTVF9FUlIiKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKTsKCiAgICAgICAgICAgIHJldHVybiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpID49IDApICYmCiAgICAgICAgICAgICAgICAgICAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPD0gMCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gVGhlIG1ldGhvZHMgYmVsb3cgYXJlIG5vbi1zdGFuZGFyZCBhbmQgaW52ZW50ZWQgYnkgbWUuCgogICAgICAgIC8vIFNoYXJpbmcgYSBib3VuZGFyeSBzdGFydC10by1lbmQgb3IgZW5kLXRvLXN0YXJ0IGRvZXMgbm90IGNvdW50IGFzIGludGVyc2VjdGlvbi4KICAgICAgICBpbnRlcnNlY3RzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiByYW5nZXNJbnRlcnNlY3QodGhpcywgcmFuZ2UsIGZhbHNlKTsKICAgICAgICB9LAoKICAgICAgICAvLyBTaGFyaW5nIGEgYm91bmRhcnkgc3RhcnQtdG8tZW5kIG9yIGVuZC10by1zdGFydCBkb2VzIGNvdW50IGFzIGludGVyc2VjdGlvbi4KICAgICAgICBpbnRlcnNlY3RzT3JUb3VjaGVzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiByYW5nZXNJbnRlcnNlY3QodGhpcywgcmFuZ2UsIHRydWUpOwogICAgICAgIH0sCgogICAgICAgIGludGVyc2VjdGlvbjogZnVuY3Rpb24ocmFuZ2UpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c1JhbmdlKHJhbmdlKSkgewogICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHModGhpcy5zdGFydENvbnRhaW5lciwgdA==aGlzLnN0YXJ0T2Zmc2V0LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLAogICAgICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCwgcmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOwoKICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25SYW5nZSA9IHRoaXMuY2xvbmVSYW5nZSgpOwogICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29tcGFyaXNvbiA9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZW5kQ29tcGFyaXNvbiA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25SYW5nZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAoKICAgICAgICB1bmlvbjogZnVuY3Rpb24ocmFuZ2UpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c09yVG91Y2hlc1JhbmdlKHJhbmdlKSkgewogICAgICAgICAgICAgICAgdmFyIHVuaW9uUmFuZ2UgPSB0aGlzLmNsb25lUmFuZ2UoKTsKICAgICAgICAgICAgICAgIGlmIChjb21wYXJlUG9pbnRzKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCkgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICB1bmlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdW5pb25SYW5nZS5zZXRFbmQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHVuaW9uUmFuZ2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFeGNlcHRpb24oIlJhbmdlcyBkbyBub3QgaW50ZXJzZWN0Iik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjb250YWluc05vZGU6IGZ1bmN0aW9uKG5vZGUsIGFsbG93UGFydGlhbCkgewogICAgICAgICAgICBpZiAoYWxsb3dQYXJ0aWFsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3RzTm9kZShub2RlLCBmYWxzZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlTm9kZShub2RlKSA9PSBuX2k7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjb250YWluc05vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlUG9pbnQobm9kZSwgMCkgPj0gMCAmJiB0aGlzLmNvbXBhcmVQb2ludChub2RlLCBnZXROb2RlTGVuZ3RoKG5vZGUpKSA8PSAwOwogICAgICAgIH0sCgogICAgICAgIGNvbnRhaW5zUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSB0aGlzLmludGVyc2VjdGlvbihyYW5nZSk7CiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24gIT09IG51bGwgJiYgcmFuZ2UuZXF1YWxzKGludGVyc2VjdGlvbik7CiAgICAgICAgfSwKCiAgICAgICAgY29udGFpbnNOb2RlVGV4dDogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICB2YXIgbm9kZVJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCk7CiAgICAgICAgICAgIG5vZGVSYW5nZS5zZWxlY3ROb2RlKG5vZGUpOwogICAgICAgICAgICB2YXIgdGV4dE5vZGVzID0gbm9kZVJhbmdlLmdldE5vZGVzKFszXSk7CiAgICAgICAgICAgIGlmICh0ZXh0Tm9kZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNldFN0YXJ0KHRleHROb2Rlc1swXSwgMCk7CiAgICAgICAgICAgICAgICB2YXIgbGFzdFRleHROb2RlID0gdGV4dE5vZGVzLnBvcCgpOwogICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNldEVuZChsYXN0VGV4dE5vZGUsIGxhc3RUZXh0Tm9kZS5sZW5ndGgpOwogICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5zID0gdGhpcy5jb250YWluc1JhbmdlKG5vZGVSYW5nZSk7CiAgICAgICAgICAgICAgICBub2RlUmFuZ2UuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbnM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluc05vZGVDb250ZW50cyhub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdldE5vZGVzOiBmdW5jdGlvbihub2RlVHlwZXMsIGZpbHRlcikgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZXNJblJhbmdlKHRoaXMsIG5vZGVUeXBlcywgZmlsdGVyKTsKICAgICAgICB9LAoKICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRSYW5nZURvY3VtZW50KHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIGNvbGxhcHNlQmVmb3JlOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwoKICAgICAgICAgICAgdGhpcy5zZXRFbmRCZWZvcmUobm9kZSk7CiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UoZmFsc2UpOwogICAgICAgIH0sCgogICAgICAgIGNvbGxhcHNlQWZ0ZXI6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CgogICAgICAgICAgICB0aGlzLnNldFN0YXJ0QWZ0ZXIobm9kZSk7CiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodHJ1ZSk7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICBnZXRCb29rbWFyazogZnVuY3Rpb24oY29udGFpbmVyTm9kZSkgewogICAgICAgICAgICB2YXIgZG9jID0gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKTsKICAgICAgICAgICAgdmFyIHByZVNlbGVjdGlvblJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7CiAgICAgICAgICAgIGNvbnRhaW5lck5vZGUgPSBjb250YWluZXJOb2RlIHx8IGRvbS5nZXRCb2R5KGRvYyk7CiAgICAgICAgICAgIHByZVNlbGVjdGlvblJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhjb250YWluZXJOb2RlKTsKICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5pbnRlcnNlY3Rpb24ocHJlU2VsZWN0aW9uUmFuZ2UpOwogICAgICAgICAgICB2YXIgc3RhcnQgPSAwLCBlbmQgPSAwOwogICAgICAgICAgICBpZiAocmFuZ2UpIHsKICAgICAgICAgICAgICAgIHByZVNlbGVjdGlvblJhbmdlLnNldEVuZChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpOwogICAgICAgICAgICAgICAgc3RhcnQgPSBwcmVTZWxlY3Rpb25SYW5nZS50b1N0cmluZygpLmxlbmd0aDsKICAgICAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgcmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7CiAgICAgICAgICAgICAgICBwcmVTZWxlY3Rpb25SYW5nZS5kZXRhY2goKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCwKICAgICAgICAgICAgICAgIGVuZDogZW5kLAogICAgICAgICAgICAgICAgY29udGFpbmVyTm9kZTogY29udGFpbmVyTm9kZQogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgbW92ZVRvQm9va21hcms6IGZ1bmN0aW9uKGJvb2ttYXJrKSB7CiAgICAgICAgICAgIHZhciBjb250YWluZXJOb2RlID0gYm9va21hcmsuY29udGFpbmVyTm9kZTsKICAgICAgICAgICAgdmFyIGNoYXJJbmRleCA9IA==MDsKICAgICAgICAgICAgdGhpcy5zZXRTdGFydChjb250YWluZXJOb2RlLCAwKTsKICAgICAgICAgICAgdGhpcy5jb2xsYXBzZSh0cnVlKTsKICAgICAgICAgICAgdmFyIG5vZGVTdGFjayA9IFtjb250YWluZXJOb2RlXSwgbm9kZSwgZm91bmRTdGFydCA9IGZhbHNlLCBzdG9wID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBuZXh0Q2hhckluZGV4LCBpLCBjaGlsZE5vZGVzOwoKICAgICAgICAgICAgd2hpbGUgKCFzdG9wICYmIChub2RlID0gbm9kZVN0YWNrLnBvcCgpKSkgewogICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMykgewogICAgICAgICAgICAgICAgICAgIG5leHRDaGFySW5kZXggPSBjaGFySW5kZXggKyBub2RlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kU3RhcnQgJiYgYm9va21hcmsuc3RhcnQgPj0gY2hhckluZGV4ICYmIGJvb2ttYXJrLnN0YXJ0IDw9IG5leHRDaGFySW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydChub2RlLCBib29rbWFyay5zdGFydCAtIGNoYXJJbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kU3RhcnQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGFydCAmJiBib29rbWFyay5lbmQgPj0gY2hhckluZGV4ICYmIGJvb2ttYXJrLmVuZCA8PSBuZXh0Q2hhckluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kKG5vZGUsIGJvb2ttYXJrLmVuZCAtIGNoYXJJbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3AgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjaGFySW5kZXggPSBuZXh0Q2hhckluZGV4OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGVzID0gbm9kZS5jaGlsZE5vZGVzOwogICAgICAgICAgICAgICAgICAgIGkgPSBjaGlsZE5vZGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVTdGFjay5wdXNoKGNoaWxkTm9kZXNbaV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdldE5hbWU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gIkRvbVJhbmdlIjsKICAgICAgICB9LAoKICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiBSYW5nZS5yYW5nZXNFcXVhbCh0aGlzLCByYW5nZSk7CiAgICAgICAgfSwKCiAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBpc1JhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7CiAgICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiBjb3B5Q29tcGFyaXNvbkNvbnN0YW50c1RvT2JqZWN0KG9iaikgewogICAgICAgIG9iai5TVEFSVF9UT19TVEFSVCA9IHMyczsKICAgICAgICBvYmouU1RBUlRfVE9fRU5EID0gczJlOwogICAgICAgIG9iai5FTkRfVE9fRU5EID0gZTJlOwogICAgICAgIG9iai5FTkRfVE9fU1RBUlQgPSBlMnM7CgogICAgICAgIG9iai5OT0RFX0JFRk9SRSA9IG5fYjsKICAgICAgICBvYmouTk9ERV9BRlRFUiA9IG5fYTsKICAgICAgICBvYmouTk9ERV9CRUZPUkVfQU5EX0FGVEVSID0gbl9iX2E7CiAgICAgICAgb2JqLk5PREVfSU5TSURFID0gbl9pOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzKGNvbnN0cnVjdG9yKSB7CiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdChjb25zdHJ1Y3Rvcik7CiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdChjb25zdHJ1Y3Rvci5wcm90b3R5cGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIocmVtb3ZlciwgYm91bmRhcnlVcGRhdGVyKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwoKICAgICAgICAgICAgdmFyIHNjID0gdGhpcy5zdGFydENvbnRhaW5lciwgc28gPSB0aGlzLnN0YXJ0T2Zmc2V0LCByb290ID0gdGhpcy5jb21tb25BbmNlc3RvckNvbnRhaW5lcjsKCiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpOwoKICAgICAgICAgICAgLy8gV29yayBvdXQgd2hlcmUgdG8gcG9zaXRpb24gdGhlIHJhbmdlIGFmdGVyIGNvbnRlbnQgcmVtb3ZhbAogICAgICAgICAgICB2YXIgbm9kZSwgYm91bmRhcnk7CiAgICAgICAgICAgIGlmIChzYyAhPT0gcm9vdCkgewogICAgICAgICAgICAgICAgbm9kZSA9IGdldENsb3Nlc3RBbmNlc3RvckluKHNjLCByb290LCB0cnVlKTsKICAgICAgICAgICAgICAgIGJvdW5kYXJ5ID0gZ2V0Qm91bmRhcnlBZnRlck5vZGUobm9kZSk7CiAgICAgICAgICAgICAgICBzYyA9IGJvdW5kYXJ5Lm5vZGU7CiAgICAgICAgICAgICAgICBzbyA9IGJvdW5kYXJ5Lm9mZnNldDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2hlY2sgbm9uZSBvZiB0aGUgcmFuZ2UgaXMgcmVhZC1vbmx5CiAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKGl0ZXJhdG9yLCBhc3NlcnROb2RlTm90UmVhZE9ubHkpOwoKICAgICAgICAgICAgaXRlcmF0b3IucmVzZXQoKTsKCiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgY29udGVudAogICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSByZW1vdmVyKGl0ZXJhdG9yKTsKICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7CgogICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXcgcG9zaXRpb24KICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHNjLCBzbywgc2MsIHNvKTsKCiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTsKICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3RvdHlwZVJhbmdlKGNvbnN0cnVjdG9yLCBib3VuZGFyeVVwZGF0ZXIsIGRldGFjaGVyKSB7CiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKGlzQmVmb3JlLCBpc1N0YXJ0KSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShnZXRSb290Q29udGFpbmVyKG5vZGUpLCByb290Q29udGFpbmVyTm9kZVR5cGVzKTsKCiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSAoaXNCZWZvcmUgPyBnZXRCb3VuZGFyeUJlZm9yZU5vZGUgOiBnZXRCb3VuZGFyeUFmdGVyTm9kZSkobm9kZSk7CiAgICAgICAgICAgICAgICAoaXNTdGFydCA/IHNldFJhbmdlU3RhcnQgOiBzZXRSYW5nZUVuZCkodGhpcywgYm91bmRhcnkubm9kZSwgYm91bmRhcnkub2Zmc2V0KTsKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHNldFJhbmdlU3RhcnQocmFuZ2UsIG5vZGUsIG9mZnNldCkgewogICAgICAgICAgICB2YXIgZWMgPSByYW5nZS5lbmRDb250YWluZXIsIGVvID0gcmFuZ2UuZW5kT2Zmc2V0OwogICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2Uuc3RhcnRDb250YWluZXIgfHwgb2Zmc2V0ICE9PSByYW5nZS5zdGFydE9mZnNldCkgewogICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJvb3QgY29udGFpbmVycyBvZiB0aGUgcmFuZ2UgYW5kIHRoZSBuZXcgYm91bmRhcnksIGFuZCBhbHNvIGNoZWNrIHdoZXRoZXIgdGhlIG5ldyBib3VuZGFyeQogICAgICAgICAgICAgICAgLy8gaXMgYWZ0ZXIgdGhlIGN1cnJlbnQgZW5kLiBJbiBlaXRoZXIgY2FzZSwgY29sbGFwc2UgdGhlIHJhbmdlIHRvIHRoZSBuZXcgcG9zaXRpb24KICAgICAgICAgICAgICAgIGlmIChnZXRSb290Q29udGFpbmVyKG5vZGUpICE9IGdldA==Um9vdENvbnRhaW5lcihlYykgfHwgY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIGVjLCBlbykgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTsKICAgICAgICAgICAgICAgICAgICBlbyA9IG9mZnNldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcihyYW5nZSwgbm9kZSwgb2Zmc2V0LCBlYywgZW8pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXRSYW5nZUVuZChyYW5nZSwgbm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgIHZhciBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0OwogICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2UuZW5kQ29udGFpbmVyIHx8IG9mZnNldCAhPT0gcmFuZ2UuZW5kT2Zmc2V0KSB7CiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgcm9vdCBjb250YWluZXJzIG9mIHRoZSByYW5nZSBhbmQgdGhlIG5ldyBib3VuZGFyeSwgYW5kIGFsc28gY2hlY2sgd2hldGhlciB0aGUgbmV3IGJvdW5kYXJ5CiAgICAgICAgICAgICAgICAvLyBpcyBhZnRlciB0aGUgY3VycmVudCBlbmQuIEluIGVpdGhlciBjYXNlLCBjb2xsYXBzZSB0aGUgcmFuZ2UgdG8gdGhlIG5ldyBwb3NpdGlvbgogICAgICAgICAgICAgICAgaWYgKGdldFJvb3RDb250YWluZXIobm9kZSkgIT0gZ2V0Um9vdENvbnRhaW5lcihzYykgfHwgY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHNjLCBzbykgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBzYyA9IG5vZGU7CiAgICAgICAgICAgICAgICAgICAgc28gPSBvZmZzZXQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIocmFuZ2UsIHNjLCBzbywgbm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IFJhbmdlUHJvdG90eXBlKCk7CgogICAgICAgIHV0aWwuZXh0ZW5kKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgewogICAgICAgICAgICBzZXRTdGFydDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpOwoKICAgICAgICAgICAgICAgIHNldFJhbmdlU3RhcnQodGhpcywgbm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldEVuZDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpOwoKICAgICAgICAgICAgICAgIHNldFJhbmdlRW5kKHRoaXMsIG5vZGUsIG9mZnNldCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIHNldCBhIHJhbmdlJ3Mgc3RhcnQgYW5kIGVuZCBib3VuZGFyaWVzLiBPdmVybG9hZGVkIGFzIGZvbGxvd3M6CiAgICAgICAgICAgICAqIC0gVHdvIHBhcmFtZXRlcnMgKG5vZGUsIG9mZnNldCkgY3JlYXRlcyBhIGNvbGxhcHNlZCByYW5nZSBhdCB0aGF0IHBvc2l0aW9uCiAgICAgICAgICAgICAqIC0gVGhyZWUgcGFyYW1ldGVycyAobm9kZSwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCkgY3JlYXRlcyBhIHJhbmdlIGNvbnRhaW5lZCB3aXRoIG5vZGUgc3RhcnRpbmcgYXQKICAgICAgICAgICAgICogICBzdGFydE9mZnNldCBhbmQgZW5kaW5nIGF0IGVuZE9mZnNldAogICAgICAgICAgICAgKiAtIEZvdXIgcGFyYW1ldGVycyAoc3RhcnROb2RlLCBzdGFydE9mZnNldCwgZW5kTm9kZSwgZW5kT2Zmc2V0KSBjcmVhdGVzIGEgcmFuZ2Ugc3RhcnRpbmcgYXQgc3RhcnRPZmZzZXQgaW4KICAgICAgICAgICAgICogICBzdGFydE5vZGUgYW5kIGVuZGluZyBhdCBlbmRPZmZzZXQgaW4gZW5kTm9kZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgc2V0U3RhcnRBbmRFbmQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CgogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICB2YXIgc2MgPSBhcmdzWzBdLCBzbyA9IGFyZ3NbMV0sIGVjID0gc2MsIGVvID0gc287CgogICAgICAgICAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBhcmdzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gYXJnc1syXTsKICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBhcmdzWzNdOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pOwogICAgICAgICAgICB9LAogICAgICAgICAgICAKICAgICAgICAgICAgc2V0Qm91bmRhcnk6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCwgaXNTdGFydCkgewogICAgICAgICAgICAgICAgdGhpc1sic2V0IiArIChpc1N0YXJ0ID8gIlN0YXJ0IiA6ICJFbmQiKV0obm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldFN0YXJ0QmVmb3JlOiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIodHJ1ZSwgdHJ1ZSksCiAgICAgICAgICAgIHNldFN0YXJ0QWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgdHJ1ZSksCiAgICAgICAgICAgIHNldEVuZEJlZm9yZTogY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKHRydWUsIGZhbHNlKSwKICAgICAgICAgICAgc2V0RW5kQWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgZmFsc2UpLAoKICAgICAgICAgICAgY29sbGFwc2U6IGZ1bmN0aW9uKGlzU3RhcnQpIHsKICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAoaXNTdGFydCkgewogICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNlbGVjdE5vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CiAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIHRydWUpOwoKICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBub2RlLCAwLCBub2RlLCBnZXROb2RlTGVuZ3RoKG5vZGUpKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNlbGVjdE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGJlZm9yZUFmdGVyTm9kZVR5cGVzKTsKCiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBnZXRCb3VuZGFyeUJlZm9yZU5vZGUobm9kZSksIGVuZCA9IGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpOwogICAgIA==ICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc3RhcnQubm9kZSwgc3RhcnQub2Zmc2V0LCBlbmQubm9kZSwgZW5kLm9mZnNldCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBleHRyYWN0Q29udGVudHM6IGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIoZXh0cmFjdFN1YnRyZWUsIGJvdW5kYXJ5VXBkYXRlciksCgogICAgICAgICAgICBkZWxldGVDb250ZW50czogY3JlYXRlUmFuZ2VDb250ZW50UmVtb3ZlcihkZWxldGVTdWJ0cmVlLCBib3VuZGFyeVVwZGF0ZXIpLAoKICAgICAgICAgICAgY2FuU3Vycm91bmRDb250ZW50czogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuZW5kQ29udGFpbmVyKTsKCiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGVudHMgY2FuIGJlIHN1cnJvdW5kZWQuIFNwZWNpZmljYWxseSwgdGhpcyBtZWFucyB3aGV0aGVyIHRoZSByYW5nZSBwYXJ0aWFsbHkgc2VsZWN0cwogICAgICAgICAgICAgICAgLy8gbm8gbm9uLXRleHQgbm9kZXMuCiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICAgIHZhciBib3VuZGFyaWVzSW52YWxpZCA9IChpdGVyYXRvci5fZmlyc3QgJiYgKGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9maXJzdCwgdGhpcykpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgIChpdGVyYXRvci5fbGFzdCAmJiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChpdGVyYXRvci5fbGFzdCwgdGhpcykpKTsKICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICAgICAgcmV0dXJuICFib3VuZGFyaWVzSW52YWxpZDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBkZXRhY2hlcih0aGlzKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNwbGl0Qm91bmRhcmllczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzcGxpdFJhbmdlQm91bmRhcmllcyh0aGlzKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNwbGl0Qm91bmRhcmllc1ByZXNlcnZpbmdQb3NpdGlvbnM6IGZ1bmN0aW9uKHBvc2l0aW9uc1RvUHJlc2VydmUpIHsKICAgICAgICAgICAgICAgIHNwbGl0UmFuZ2VCb3VuZGFyaWVzKHRoaXMsIHBvc2l0aW9uc1RvUHJlc2VydmUpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbm9ybWFsaXplQm91bmRhcmllczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwoKICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXIsIHNvID0gdGhpcy5zdGFydE9mZnNldCwgZWMgPSB0aGlzLmVuZENvbnRhaW5lciwgZW8gPSB0aGlzLmVuZE9mZnNldDsKCiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VGb3J3YXJkID0gZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gbm9kZS5uZXh0U2libGluZzsKICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICBlbyA9IG5vZGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZERhdGEoc2libGluZy5kYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIG1lcmdlQmFja3dhcmQgPSBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBub2RlLnByZXZpb3VzU2libGluZzsKICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2MgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUxlbmd0aCA9IG5vZGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBzbyA9IHNpYmxpbmcubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmluc2VydERhdGEoMCwgc2libGluZy5kYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2MgPT0gZWMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvICs9IHNvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBzYzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlYyA9PSBub2RlLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBnZXROb2RlSW5kZXgobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW8gPT0gbm9kZUluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gbm9kZUxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW8gPiBub2RlSW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlby0tOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplU3RhcnQgPSB0cnVlOwoKICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGVjKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChlYy5sZW5ndGggPT0gZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VGb3J3YXJkKGVjKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChlbyA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBlYy5jaGlsZE5vZGVzW2VvIC0gMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmROb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoZW5kTm9kZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlRm9yd2FyZChlbmROb2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVTdGFydCA9ICF0aGlzLmNvbGxhcHNlZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQmFja3dhcmQoc2MpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvIDwgc2MuY2hpbGROb2Rlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydE5vZGUgPSBzYy5jaGlsZE5vZGVzW3NvXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydE5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShzdGFydE5vZGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VCYWNrd2FyZChzdGFydE5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIA==ICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNjID0gZWM7CiAgICAgICAgICAgICAgICAgICAgc28gPSBlbzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29sbGFwc2VUb1BvaW50OiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTsKICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCk7CiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QW5kRW5kKG5vZGUsIG9mZnNldCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHMoY29uc3RydWN0b3IpOwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gVXBkYXRlcyBjb21tb25BbmNlc3RvckNvbnRhaW5lciBhbmQgY29sbGFwc2VkIGFmdGVyIGJvdW5kYXJ5IGNoYW5nZQogICAgZnVuY3Rpb24gdXBkYXRlQ29sbGFwc2VkQW5kQ29tbW9uQW5jZXN0b3IocmFuZ2UpIHsKICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gcmFuZ2UuZW5kT2Zmc2V0KTsKICAgICAgICByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbGxhcHNlZCA/CiAgICAgICAgICAgIHJhbmdlLnN0YXJ0Q29udGFpbmVyIDogZG9tLmdldENvbW1vbkFuY2VzdG9yKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5lbmRDb250YWluZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUJvdW5kYXJpZXMocmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpIHsKICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IHN0YXJ0Q29udGFpbmVyOwogICAgICAgIHJhbmdlLnN0YXJ0T2Zmc2V0ID0gc3RhcnRPZmZzZXQ7CiAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gZW5kQ29udGFpbmVyOwogICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IGVuZE9mZnNldDsKICAgICAgICByYW5nZS5kb2N1bWVudCA9IGRvbS5nZXREb2N1bWVudChzdGFydENvbnRhaW5lcik7CgogICAgICAgIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHJhbmdlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZXRhY2gocmFuZ2UpIHsKICAgICAgICBhc3NlcnROb3REZXRhY2hlZChyYW5nZSk7CiAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgPSByYW5nZS5zdGFydE9mZnNldCA9IHJhbmdlLmVuZENvbnRhaW5lciA9IHJhbmdlLmVuZE9mZnNldCA9IHJhbmdlLmRvY3VtZW50ID0gbnVsbDsKICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IG51bGw7CiAgICB9CgogICAgZnVuY3Rpb24gUmFuZ2UoZG9jKSB7CiAgICAgICAgdGhpcy5zdGFydENvbnRhaW5lciA9IGRvYzsKICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gMDsKICAgICAgICB0aGlzLmVuZENvbnRhaW5lciA9IGRvYzsKICAgICAgICB0aGlzLmVuZE9mZnNldCA9IDA7CiAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvYzsKICAgICAgICB1cGRhdGVDb2xsYXBzZWRBbmRDb21tb25BbmNlc3Rvcih0aGlzKTsKICAgIH0KCiAgICBjcmVhdGVQcm90b3R5cGVSYW5nZShSYW5nZSwgdXBkYXRlQm91bmRhcmllcywgZGV0YWNoKTsKCiAgICBhcGkucmFuZ2VQcm90b3R5cGUgPSBSYW5nZVByb3RvdHlwZS5wcm90b3R5cGU7CgogICAgdXRpbC5leHRlbmQoUmFuZ2UsIHsKICAgICAgICByYW5nZVByb3BlcnRpZXM6IHJhbmdlUHJvcGVydGllcywKICAgICAgICBSYW5nZUl0ZXJhdG9yOiBSYW5nZUl0ZXJhdG9yLAogICAgICAgIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzOiBjb3B5Q29tcGFyaXNvbkNvbnN0YW50cywKICAgICAgICBjcmVhdGVQcm90b3R5cGVSYW5nZTogY3JlYXRlUHJvdG90eXBlUmFuZ2UsCiAgICAgICAgaW5zcGVjdDogaW5zcGVjdCwKICAgICAgICBnZXRSYW5nZURvY3VtZW50OiBnZXRSYW5nZURvY3VtZW50LAogICAgICAgIHJhbmdlc0VxdWFsOiBmdW5jdGlvbihyMSwgcjIpIHsKICAgICAgICAgICAgcmV0dXJuIHIxLnN0YXJ0Q29udGFpbmVyID09PSByMi5zdGFydENvbnRhaW5lciAmJgogICAgICAgICAgICAgICAgcjEuc3RhcnRPZmZzZXQgPT09IHIyLnN0YXJ0T2Zmc2V0ICYmCiAgICAgICAgICAgICAgICByMS5lbmRDb250YWluZXIgPT09IHIyLmVuZENvbnRhaW5lciAmJgogICAgICAgICAgICAgICAgcjEuZW5kT2Zmc2V0ID09PSByMi5lbmRPZmZzZXQ7CiAgICAgICAgfQogICAgfSk7CgogICAgYXBpLkRvbVJhbmdlID0gUmFuZ2U7CiAgICBhcGkuUmFuZ2VFeGNlcHRpb24gPSBSYW5nZUV4Y2VwdGlvbjsKfSk7CnJhbmd5LmNyZWF0ZU1vZHVsZSgiV3JhcHBlZFJhbmdlIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCiAgICBhcGkucmVxdWlyZU1vZHVsZXMoIFsiRG9tVXRpbCIsICJEb21SYW5nZSJdICk7DQoNCiAgICB2YXIgV3JhcHBlZFJhbmdlLCBXcmFwcGVkVGV4dFJhbmdlOw0KICAgIHZhciBkb20gPSBhcGkuZG9tOw0KICAgIHZhciB1dGlsID0gYXBpLnV0aWw7DQogICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uOw0KICAgIHZhciBEb21SYW5nZSA9IGFwaS5Eb21SYW5nZTsNCiAgICB2YXIgZ2V0Qm9keSA9IGRvbS5nZXRCb2R5Ow0KICAgIHZhciBnZXRDb250ZW50RG9jdW1lbnQgPSBkb20uZ2V0Q29udGVudERvY3VtZW50Ow0KICAgIHZhciBpc0NoYXJhY3RlckRhdGFOb2RlID0gZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGU7DQoNCg0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkgew0KICAgICAgICAvLyBUaGlzIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIGJyb3dzZXIncyBuYXRpdmUgRE9NIFJhbmdlLiBJdCBoYXMgdHdvIGFpbXM6DQogICAgICAgIC8vIC0gUHJvdmlkZSB3b3JrYXJvdW5kcyBmb3Igc3BlY2lmaWMgYnJvd3NlciBidWdzDQogICAgICAgIC8vIC0gcHJvdmlkZSBjb252ZW5pZW50IGV4dGVuc2lvbnMsIHdoaWNoIGFyZSBpbmhlcml0ZWQgZnJvbSBSYW5neSdzIERvbVJhbmdlDQoNCiAgICAgICAgKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIHJhbmdlUHJvdG87DQogICAgICAgICAgICB2YXIgcmFuZ2VQcm9wZXJ0aWVzID0gRG9tUmFuZ2UucmFuZ2VQcm9wZXJ0aWVzOw0KDQogICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVSYW5nZVByb3BlcnRpZXMocmFuZ2UpIHsNCiAgICAgICAgICAgICAgICB2YXIgaSA9IHJhbmdlUHJvcGVydGllcy5sZW5ndGgsIHByb3A7DQogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgICAgICAgICBwcm9wID0gcmFuZ2VQcm9wZXJ0aWVzW2ldOw0KICAgICAgICAgICAgICAgICAgICByYW5nZVtwcm9wXSA9IHJhbmdlLm5hdGl2ZVJhbmdlW3Byb3BdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyBGaXggZm9yIGJyb2tlbiBjb2xsYXBzZWQgcHJvcGVydHkgaW4gSUUgOS4NCiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gcmFuZ2UuZW5kT2Zmc2V0KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZnVuY3Rpb24gdXBkYQ==dGVOYXRpdmVSYW5nZShyYW5nZSwgc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRDb250YWluZXIsIGVuZE9mZnNldCkgew0KICAgICAgICAgICAgICAgIHZhciBzdGFydE1vdmVkID0gKHJhbmdlLnN0YXJ0Q29udGFpbmVyICE9PSBzdGFydENvbnRhaW5lciB8fCByYW5nZS5zdGFydE9mZnNldCAhPSBzdGFydE9mZnNldCk7DQogICAgICAgICAgICAgICAgdmFyIGVuZE1vdmVkID0gKHJhbmdlLmVuZENvbnRhaW5lciAhPT0gZW5kQ29udGFpbmVyIHx8IHJhbmdlLmVuZE9mZnNldCAhPSBlbmRPZmZzZXQpOw0KICAgICAgICAgICAgICAgIHZhciBuYXRpdmVSYW5nZURpZmZlcmVudCA9ICFyYW5nZS5lcXVhbHMocmFuZ2UubmF0aXZlUmFuZ2UpOw0KDQogICAgICAgICAgICAgICAgLy8gQWx3YXlzIHNldCBib3RoIGJvdW5kYXJpZXMgZm9yIHRoZSBiZW5lZml0IG9mIElFOSAoc2VlIGlzc3VlIDM1KQ0KICAgICAgICAgICAgICAgIGlmIChzdGFydE1vdmVkIHx8IGVuZE1vdmVkIHx8IG5hdGl2ZVJhbmdlRGlmZmVyZW50KSB7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChlbmRDb250YWluZXIsIGVuZE9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBkZXRhY2gocmFuZ2UpIHsNCiAgICAgICAgICAgICAgICByYW5nZS5uYXRpdmVSYW5nZS5kZXRhY2goKTsNCiAgICAgICAgICAgICAgICByYW5nZS5kZXRhY2hlZCA9IHRydWU7DQogICAgICAgICAgICAgICAgdmFyIGkgPSByYW5nZVByb3BlcnRpZXMubGVuZ3RoOw0KICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbIHJhbmdlUHJvcGVydGllc1tpXSBdID0gbnVsbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXI7DQoNCiAgICAgICAgICAgIFdyYXBwZWRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICAgICAgaWYgKCFyYW5nZSkgew0KICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoIldyYXBwZWRSYW5nZTogUmFuZ2UgbXVzdCBiZSBzcGVjaWZpZWQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZSA9IHJhbmdlOw0KICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIERvbVJhbmdlLmNyZWF0ZVByb3RvdHlwZVJhbmdlKFdyYXBwZWRSYW5nZSwgdXBkYXRlTmF0aXZlUmFuZ2UsIGRldGFjaCk7DQoNCiAgICAgICAgICAgIHJhbmdlUHJvdG8gPSBXcmFwcGVkUmFuZ2UucHJvdG90eXBlOw0KDQogICAgICAgICAgICByYW5nZVByb3RvLnNlbGVjdE5vZGUgPSBmdW5jdGlvbihub2RlKSB7DQogICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZWxlY3ROb2RlKG5vZGUpOw0KICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uY2xvbmVDb250ZW50cyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNsb25lQ29udGVudHMoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIC8vIER1ZSB0byBhIGxvbmctc3RhbmRpbmcgRmlyZWZveCBidWcgdGhhdCBJIGhhdmUgbm90IGJlZW4gYWJsZSB0byBmaW5kIGEgcmVsaWFibGUgd2F5IHRvIGRldGVjdCwNCiAgICAgICAgICAgIC8vIGluc2VydE5vZGUoKSBpcyBuZXZlciBkZWxlZ2F0ZWQgdG8gdGhlIG5hdGl2ZSByYW5nZS4NCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5zdXJyb3VuZENvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc3Vycm91bmRDb250ZW50cyhub2RlKTsNCiAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICByYW5nZVByb3RvLmNvbGxhcHNlID0gZnVuY3Rpb24oaXNTdGFydCkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7DQogICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5jbG9uZVJhbmdlID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXcmFwcGVkUmFuZ2UodGhpcy5uYXRpdmVSYW5nZS5jbG9uZVJhbmdlKCkpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5yZWZyZXNoID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLnRvU3RyaW5nKCk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAvLyBDcmVhdGUgdGVzdCByYW5nZSBhbmQgbm9kZSBmb3IgZmVhdHVyZSBkZXRlY3Rpb24NCg0KICAgICAgICAgICAgdmFyIHRlc3RUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJ0ZXN0Iik7DQogICAgICAgICAgICBnZXRCb2R5KGRvY3VtZW50KS5hcHBlbmRDaGlsZCh0ZXN0VGV4dE5vZGUpOw0KICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsNCg0KICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAgICAgICAgIC8vIFRlc3QgZm9yIEZpcmVmb3ggMiBidWcgdGhhdCBwcmV2ZW50cyBtb3ZpbmcgdGhlIHN0YXJ0IG9mIGEgUmFuZ2UgdG8gYSBwb2ludCBhZnRlciBpdHMgY3VycmVudCBlbmQgYW5kDQogICAgICAgICAgICAvLyBjb3JyZWN0IGZvciBpdA0KDQogICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXN0VGV4dE5vZGUsIDApOw0KICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgMCk7DQoNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGVzdFRleHROb2RlLCAxKTsNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnQgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpOw0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyID0gZnVuY3Rpb24obmFtZSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB9IGNhdGNoKGV4KSB7DQoNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0ID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KQ==IHsNCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZCA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgew0KICAgICAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIgPSBmdW5jdGlvbihuYW1lLCBvcHBvc2l0ZU5hbWUpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtvcHBvc2l0ZU5hbWVdKG5vZGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2VbbmFtZV0obm9kZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydEJlZm9yZSA9IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcigic2V0U3RhcnRCZWZvcmUiLCAic2V0RW5kQmVmb3JlIik7DQogICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0QWZ0ZXIgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoInNldFN0YXJ0QWZ0ZXIiLCAic2V0RW5kQWZ0ZXIiKTsNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kQmVmb3JlID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKCJzZXRFbmRCZWZvcmUiLCAic2V0U3RhcnRCZWZvcmUiKTsNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kQWZ0ZXIgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoInNldEVuZEFmdGVyIiwgInNldFN0YXJ0QWZ0ZXIiKTsNCg0KICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAgICAgICAgIC8vIFRlc3QgZm9yIGFuZCBjb3JyZWN0IEZpcmVmb3ggMiBiZWhhdmlvdXIgd2l0aCBzZWxlY3ROb2RlQ29udGVudHMgb24gdGV4dCBub2RlczogaXQgY29sbGFwc2VzIHRoZSByYW5nZSB0bw0KICAgICAgICAgICAgLy8gdGhlIDB0aCBjaGFyYWN0ZXIgb2YgdGhlIHRleHQgbm9kZQ0KICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT0gdGVzdFRleHROb2RlICYmIHJhbmdlLmVuZENvbnRhaW5lciA9PSB0ZXN0VGV4dE5vZGUgJiYNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPT0gMCAmJiByYW5nZS5lbmRPZmZzZXQgPT0gdGVzdFRleHROb2RlLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2VsZWN0Tm9kZUNvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2VsZWN0Tm9kZUNvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QW5kRW5kKG5vZGUsIDAsIGRvbS5nZXROb2RlTGVuZ3RoKG5vZGUpKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gVGVzdCBmb3IgYW5kIGNvcnJlY3QgV2ViS2l0IGJ1ZyB0aGF0IGhhcyB0aGUgYmVoYXZpb3VyIG9mIGNvbXBhcmVCb3VuZGFyeVBvaW50cyByb3VuZCB0aGUgd3Jvbmcgd2F5IGZvcg0KICAgICAgICAgICAgLy8gY29uc3RhbnRzIFNUQVJUX1RPX0VORCBhbmQgRU5EX1RPX1NUQVJUOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjA3MzgNCg0KICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZS5zZXRFbmQodGVzdFRleHROb2RlLCAzKTsNCg0KICAgICAgICAgICAgdmFyIHJhbmdlMiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICByYW5nZTIuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZTIuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgNCk7DQogICAgICAgICAgICByYW5nZTIuc2V0U3RhcnQodGVzdFRleHROb2RlLCAyKTsNCg0KICAgICAgICAgICAgaWYgKHJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhyYW5nZS5TVEFSVF9UT19FTkQsIHJhbmdlMikgPT0gLTEgJiYNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHJhbmdlLkVORF9UT19TVEFSVCwgcmFuZ2UyKSA9PSAxKSB7DQogICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgd3Jvbmcgd2F5IHJvdW5kLCBzbyBjb3JyZWN0IGZvciBpdA0KDQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jb21wYXJlQm91bmRhcnlQb2ludHMgPSBmdW5jdGlvbih0eXBlLCByYW5nZSkgew0KICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHJhbmdlLm5hdGl2ZVJhbmdlIHx8IHJhbmdlOw0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSByYW5nZS5TVEFSVF9UT19FTkQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSByYW5nZS5FTkRfVE9fU1RBUlQ7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSByYW5nZS5FTkRfVE9fU1RBUlQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSByYW5nZS5TVEFSVF9UT19FTkQ7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHR5cGUsIHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNvbXBhcmVCb3VuZGFyeVBvaW50cyA9IGZ1bmN0aW9uKHR5cGUsIHJhbmdlKSB7DQogIA==ICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHR5cGUsIHJhbmdlLm5hdGl2ZVJhbmdlIHx8IHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gVGVzdCBmb3IgSUUgOSBkZWxldGVDb250ZW50cygpIGFuZCBleHRyYWN0Q29udGVudHMoKSBidWcgYW5kIGNvcnJlY3QgaXQuIFNlZSBpc3N1ZSAxMDcuDQoNCiAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOw0KICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gIjEyMyI7DQogICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBlbC5maXJzdENoaWxkOw0KICAgICAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTsNCiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWwpOw0KDQogICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXh0Tm9kZSwgMSk7DQogICAgICAgICAgICByYW5nZS5zZXRFbmQodGV4dE5vZGUsIDIpOw0KICAgICAgICAgICAgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTsNCg0KICAgICAgICAgICAgaWYgKHRleHROb2RlLmRhdGEgPT0gIjEzIikgew0KICAgICAgICAgICAgICAgIC8vIEJlaGF2aW91ciBpcyBjb3JyZWN0IHBlciBET000IFJhbmdlIHNvIHdyYXAgdGhlIGJyb3dzZXIncyBpbXBsZW1lbnRhdGlvbiBvZiBkZWxldGVDb250ZW50cygpIGFuZA0KICAgICAgICAgICAgICAgIC8vIGV4dHJhY3RDb250ZW50cygpDQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5kZWxldGVDb250ZW50cyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5leHRyYWN0Q29udGVudHMgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZyYWcgPSB0aGlzLm5hdGl2ZVJhbmdlLmV4dHJhY3RDb250ZW50cygpOw0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFnOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGVsKTsNCiAgICAgICAgICAgIGJvZHkgPSBudWxsOw0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gVGVzdCBmb3IgZXhpc3RlbmNlIG9mIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBhbmQgZGVsZWdhdGUgdG8gaXQgaWYgaXQgZXhpc3RzDQogICAgICAgICAgICBpZiAodXRpbC5pc0hvc3RNZXRob2QocmFuZ2UsICJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiKSkgew0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50ID0gZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGZyYWdtZW50U3RyKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gQ2xlYW4gdXANCiAgICAgICAgICAgIGdldEJvZHkoZG9jdW1lbnQpLnJlbW92ZUNoaWxkKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZS5kZXRhY2goKTsNCiAgICAgICAgICAgIHJhbmdlMi5kZXRhY2goKTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICJXcmFwcGVkUmFuZ2UiOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgYXBpLldyYXBwZWRSYW5nZSA9IFdyYXBwZWRSYW5nZTsNCg0KICAgICAgICAgICAgYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgICAgICAgICAgZG9jID0gZ2V0Q29udGVudERvY3VtZW50KGRvYywgbW9kdWxlLCAiY3JlYXRlTmF0aXZlUmFuZ2UiKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gZG9jLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9KSgpOw0KICAgIH0NCiAgICANCiAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UpIHsNCiAgICAgICAgLyoNCiAgICAgICAgIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBhIGJ1ZyB3aGVyZSBJRSByZXR1cm5zIHRoZSB3cm9uZyBjb250YWluZXIgZWxlbWVudCBmcm9tIHRoZSBUZXh0UmFuZ2UncyBwYXJlbnRFbGVtZW50KCkNCiAgICAgICAgIG1ldGhvZC4gRm9yIGV4YW1wbGUsIGluIHRoZSBmb2xsb3dpbmcgKHdoZXJlIHBpcGVzIGRlbm90ZSB0aGUgc2VsZWN0aW9uIGJvdW5kYXJpZXMpOg0KDQogICAgICAgICA8dWwgaWQ9InVsIj48bGkgaWQ9ImEiPnwgYSA8L2xpPjxsaSBpZD0iYiI+IGIgfDwvbGk+PC91bD4NCg0KICAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICBhbGVydChyYW5nZS5wYXJlbnRFbGVtZW50KCkuaWQpOyAvLyBTaG91bGQgYWxlcnQgInVsIiBidXQgYWxlcnRzICJiIg0KDQogICAgICAgICBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjb21tb24gYW5jZXN0b3Igbm9kZSBvZiB0aGUgZm9sbG93aW5nOg0KICAgICAgICAgLSB0aGUgcGFyZW50RWxlbWVudCgpIG9mIHRoZSB0ZXh0UmFuZ2UNCiAgICAgICAgIC0gdGhlIHBhcmVudEVsZW1lbnQoKSBvZiB0aGUgdGV4dFJhbmdlIGFmdGVyIGNhbGxpbmcgY29sbGFwc2UodHJ1ZSkNCiAgICAgICAgIC0gdGhlIHBhcmVudEVsZW1lbnQoKSBvZiB0aGUgdGV4dFJhbmdlIGFmdGVyIGNhbGxpbmcgY29sbGFwc2UoZmFsc2UpDQogICAgICAgICAqLw0KICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQ29udGFpbmVyRWxlbWVudCA9IGZ1bmN0aW9uKHRleHRSYW5nZSkgew0KICAgICAgICAgICAgdmFyIHBhcmVudEVsID0gdGV4dFJhbmdlLnBhcmVudEVsZW1lbnQoKTsNCiAgICAgICAgICAgIHZhciByYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTsNCiAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpOw0KICAgICAgICAgICAgdmFyIHN0YXJ0RWwgPSByYW5nZS5wYXJlbnRFbGVtZW50KCk7DQogICAgICAgICAgICByYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTsNCiAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKTsNCiAgICAgICAgICAgIHZhciBlbmRFbCA9IHJhbmdlLnBhcmVudEVsZW1lbnQoKTsNCiAgICAgICAgICAgIHZhciBzdGFydEVuZENvbnRhaW5lciA9IChzdGFydEVsID09IGVuZEVsKSA/IHN0YXJ0RWwgOiBkb20uZ2V0Q29tbW9uQW5jZXN0b3Ioc3RhcnRFbCwgZW5kRWwpOw0KDQogICAgICAgICAgICByZXR1cm4gc3RhcnRFbmRDb250YWluZXIgPT0gcGFyZW50RWwgPyBzdGFydEVuZENvbnRhaW5lciA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihwYXJlbnRFbCwgc3RhcnRFbmRDb250YWluZXIpOw0KICAgICAgICB9Ow0KDQogICAgICAgIHZhciB0ZXh0UmFuZ2VJc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHRleHRSYW5nZSkgew0KICAgICAgICAgICAgcmV0dXJuIHRleHRSYW5nZS5jb21wYXJlRW5kUG9pbnRzKCJTdGFydFRvRW5kIiwgdGV4dFJhbmdlKSA9PSAwOw0KICAgICAgICB9Ow==DQoNCiAgICAgICAgLy8gR2V0cyB0aGUgYm91bmRhcnkgb2YgYSBUZXh0UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0IG5vZGUuIFRoaXMgZnVuY3Rpb24gc3RhcnRlZCBvdXQgYXMNCiAgICAgICAgLy8gYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBjb2RlIGZvdW5kIGluIFRpbSBDYW1lcm9uIFJ5YW4ncyBJRVJhbmdlIChodHRwOi8vY29kZS5nb29nbGUuY29tL3AvaWVyYW5nZS8pIGJ1dCBoYXMNCiAgICAgICAgLy8gZ3Jvd24sIGZpeGluZyBwcm9ibGVtcyB3aXRoIGxpbmUgYnJlYWtzIGluIHByZWZvcm1hdHRlZCB0ZXh0LCBhZGRpbmcgd29ya2Fyb3VuZCBmb3IgSUUgVGV4dFJhbmdlIGJ1Z3MsIGhhbmRsaW5nDQogICAgICAgIC8vIGZvciBpbnB1dHMgYW5kIGltYWdlcywgcGx1cyBvcHRpbWl6YXRpb25zLg0KICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQm91bmRhcnlQb3NpdGlvbiA9IGZ1bmN0aW9uKHRleHRSYW5nZSwgd2hvbGVSYW5nZUNvbnRhaW5lckVsZW1lbnQsIGlzU3RhcnQsIGlzQ29sbGFwc2VkLCBzdGFydEluZm8pIHsNCiAgICAgICAgICAgIHZhciB3b3JraW5nUmFuZ2UgPSB0ZXh0UmFuZ2UuZHVwbGljYXRlKCk7DQogICAgICAgICAgICB3b3JraW5nUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7DQogICAgICAgICAgICB2YXIgY29udGFpbmVyRWxlbWVudCA9IHdvcmtpbmdSYW5nZS5wYXJlbnRFbGVtZW50KCk7DQoNCiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyBjb2xsYXBzaW5nIGEgVGV4dFJhbmdlIHRoYXQncyBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0IG5vZGUgY2FuIG1vdmUgaXQgaW50byB0aGUgcHJldmlvdXMgbm9kZSwgc28NCiAgICAgICAgICAgIC8vIGNoZWNrIGZvciB0aGF0DQogICAgICAgICAgICBpZiAoIWRvbS5pc09ySXNBbmNlc3Rvck9mKHdob2xlUmFuZ2VDb250YWluZXJFbGVtZW50LCBjb250YWluZXJFbGVtZW50KSkgew0KICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSB3aG9sZVJhbmdlQ29udGFpbmVyRWxlbWVudDsNCiAgICAgICAgICAgIH0NCg0KDQogICAgICAgICAgICAvLyBEZWFsIHdpdGggbm9kZXMgdGhhdCBjYW5ub3QgImNvbnRhaW4gcmljaCBIVE1MIG1hcmt1cCIuIEluIHByYWN0aWNlLCB0aGlzIG1lYW5zIGZvcm0gaW5wdXRzLCBpbWFnZXMgYW5kDQogICAgICAgICAgICAvLyBzaW1pbGFyLiBTZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2FhNzAzOTUwJTI4VlMuODUlMjkuYXNweA0KICAgICAgICAgICAgaWYgKCFjb250YWluZXJFbGVtZW50LmNhbkhhdmVIVE1MKSB7DQogICAgICAgICAgICAgICAgdmFyIHBvcyA9IG5ldyBEb21Qb3NpdGlvbihjb250YWluZXJFbGVtZW50LnBhcmVudE5vZGUsIGRvbS5nZXROb2RlSW5kZXgoY29udGFpbmVyRWxlbWVudCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb246IHBvcywNCiAgICAgICAgICAgICAgICAgICAgbm9kZUluZm86IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleDogcG9zLm9mZnNldCwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IHBvcy5ub2RlDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgd29ya2luZ05vZGUgPSBkb20uZ2V0RG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkuY3JlYXRlRWxlbWVudCgic3BhbiIpOw0KDQogICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBIVE1MNSBTaGl2J3MgaW5zYW5lIHZpb2xhdGlvbiBvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCkuIFNlZSBSYW5neSBpc3N1ZSAxMDQgYW5kIEhUTUw1DQogICAgICAgICAgICAvLyBTaGl2IGlzc3VlIDY0OiBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9odG1sNXNoaXYvaXNzdWVzLzY0DQogICAgICAgICAgICBpZiAod29ya2luZ05vZGUucGFyZW50Tm9kZSkgew0KICAgICAgICAgICAgICAgIHdvcmtpbmdOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQod29ya2luZ05vZGUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgY29tcGFyaXNvbiwgd29ya2luZ0NvbXBhcmlzb25UeXBlID0gaXNTdGFydCA/ICJTdGFydFRvU3RhcnQiIDogIlN0YXJ0VG9FbmQiOw0KICAgICAgICAgICAgdmFyIHByZXZpb3VzTm9kZSwgbmV4dE5vZGUsIGJvdW5kYXJ5UG9zaXRpb24sIGJvdW5kYXJ5Tm9kZTsNCiAgICAgICAgICAgIHZhciBzdGFydCA9IChzdGFydEluZm8gJiYgc3RhcnRJbmZvLmNvbnRhaW5lckVsZW1lbnQgPT0gY29udGFpbmVyRWxlbWVudCkgPyBzdGFydEluZm8ubm9kZUluZGV4IDogMDsNCiAgICAgICAgICAgIHZhciBjaGlsZE5vZGVDb3VudCA9IGNvbnRhaW5lckVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7DQogICAgICAgICAgICB2YXIgZW5kID0gY2hpbGROb2RlQ291bnQ7DQoNCiAgICAgICAgICAgIC8vIENoZWNrIGVuZCBmaXJzdC4gQ29kZSB3aXRoaW4gdGhlIGxvb3AgYXNzdW1lcyB0aGF0IHRoZSBlbmR0aCBjaGlsZCBub2RlIG9mIHRoZSBjb250YWluZXIgaXMgZGVmaW5pdGVseQ0KICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIHJhbmdlIGJvdW5kYXJ5Lg0KICAgICAgICAgICAgdmFyIG5vZGVJbmRleCA9IGVuZDsNCg0KICAgICAgICAgICAgd2hpbGUgKHRydWUpIHsNCiAgICAgICAgICAgICAgICBpZiAobm9kZUluZGV4ID09IGNoaWxkTm9kZUNvdW50KSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQod29ya2luZ05vZGUpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5zZXJ0QmVmb3JlKHdvcmtpbmdOb2RlLCBjb250YWluZXJFbGVtZW50LmNoaWxkTm9kZXNbbm9kZUluZGV4XSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dCh3b3JraW5nTm9kZSk7DQogICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IHdvcmtpbmdSYW5nZS5jb21wYXJlRW5kUG9pbnRzKHdvcmtpbmdDb21wYXJpc29uVHlwZSwgdGV4dFJhbmdlKTsNCiAgICAgICAgICAgICAgICBpZiAoY29tcGFyaXNvbiA9PSAwIHx8IHN0YXJ0ID09IGVuZCkgew0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmlzb24gPT0gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA9PSBzdGFydCArIDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhlIGVuZHRoIGNoaWxkIG5vZGUgaXMgYWZ0ZXIgdGhlIHJhbmdlIGJvdW5kYXJ5LCBzbyB3ZSBtdXN0IGJlIGRvbmUuDQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gbm9kZUluZGV4Ow0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZW5kID0gKGVuZCA9PSBzdGFydCArIDEpID8gc3RhcnQgOiBub2RlSW5kZXg7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG5vZGVJbmRleCA9IE1hdGguZmxvb3IoKHN0YXJ0ICsgZW5kKSAvIDIpOw0KICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQucmVtb3ZlQ2hpbGQod29ya2luZ05vZGUpOw0KICAgICAgICAgICAgfQ0KDQoNCiAgICAgICAgICAgIC8vIFdlJ3ZlIG5vdyByZWFjaGVkIG9yIGdvbmUgcGFzdCB0aGUgYm91bmRhcnkgb2YgdGhlIHRleHQgcmFuZ2Ugd2UncmUgaW50ZXJlc3RlZCBpbg0KICAgICAgICAgICAgLy8gc28gaGF2ZSBpZGVudGlmaWVkIHRoZSBub2RlIHdlIHdhbnQNCiAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IHdvcmtpbmdOb2RlLm5leHRTaWJsaW5nOw0KDQogICAgICAgICAgICBpZiAoY29tcGFyaXNvbiA9PSAtMSAmJiBib3VuZGFyeU5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShib3VuZGFyeU5vZGUpKSB7DQ==CiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgY2hhcmFjdGVyIGRhdGEgbm9kZSAodGV4dCwgY29tbWVudCwgY2RhdGEpLiBUaGUgd29ya2luZyByYW5nZSBpcyBjb2xsYXBzZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZQ0KICAgICAgICAgICAgICAgIC8vIG5vZGUgY29udGFpbmluZyB0aGUgdGV4dCByYW5nZSdzIGJvdW5kYXJ5LCBzbyB3ZSBtb3ZlIHRoZSBlbmQgb2YgdGhlIHdvcmtpbmcgcmFuZ2UgdG8gdGhlIGJvdW5kYXJ5IHBvaW50DQogICAgICAgICAgICAgICAgLy8gYW5kIG1lYXN1cmUgdGhlIGxlbmd0aCBvZiBpdHMgdGV4dCB0byBnZXQgdGhlIGJvdW5kYXJ5J3Mgb2Zmc2V0IHdpdGhpbiB0aGUgbm9kZS4NCiAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2Uuc2V0RW5kUG9pbnQoaXNTdGFydCA/ICJFbmRUb1N0YXJ0IiA6ICJFbmRUb0VuZCIsIHRleHRSYW5nZSk7DQoNCiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0Ow0KDQogICAgICAgICAgICAgICAgaWYgKC9bXHJcbl0vLnRlc3QoYm91bmRhcnlOb2RlLmRhdGEpKSB7DQogICAgICAgICAgICAgICAgICAgIC8qDQogICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHBhcnRpY3VsYXIgY2FzZSBvZiBhIGJvdW5kYXJ5IHdpdGhpbiBhIHRleHQgbm9kZSBjb250YWluaW5nIHJlbmRlcmVkIGxpbmUgYnJlYWtzICh3aXRoaW4gYSA8cHJlPg0KICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCwgZm9yIGV4YW1wbGUpLCB3ZSBuZWVkIGEgc2xpZ2h0bHkgY29tcGxpY2F0ZWQgYXBwcm9hY2ggdG8gZ2V0IHRoZSBib3VuZGFyeSdzIG9mZnNldCBpbiBJRS4gVGhlDQogICAgICAgICAgICAgICAgICAgICBmYWN0czoNCg0KICAgICAgICAgICAgICAgICAgICAgLSBFYWNoIGxpbmUgYnJlYWsgaXMgcmVwcmVzZW50ZWQgYXMgXHIgaW4gdGhlIHRleHQgbm9kZSdzIGRhdGEvbm9kZVZhbHVlIHByb3BlcnRpZXMNCiAgICAgICAgICAgICAgICAgICAgIC0gRWFjaCBsaW5lIGJyZWFrIGlzIHJlcHJlc2VudGVkIGFzIFxyXG4gaW4gdGhlIFRleHRSYW5nZSdzICd0ZXh0JyBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgICAgICAgLSBUaGUgJ3RleHQnIHByb3BlcnR5IG9mIHRoZSBUZXh0UmFuZ2UgZG9lcyBub3QgY29udGFpbiB0cmFpbGluZyBsaW5lIGJyZWFrcw0KDQogICAgICAgICAgICAgICAgICAgICBUbyBnZXQgcm91bmQgdGhlIHByb2JsZW0gcHJlc2VudGVkIGJ5IHRoZSBmaW5hbCBmYWN0IGFib3ZlLCB3ZSBjYW4gdXNlIHRoZSBmYWN0IHRoYXQgVGV4dFJhbmdlJ3MNCiAgICAgICAgICAgICAgICAgICAgIG1vdmVTdGFydCgpIGFuZCBtb3ZlRW5kKCkgbWV0aG9kcyByZXR1cm4gdGhlIGFjdHVhbCBudW1iZXIgb2YgY2hhcmFjdGVycyBtb3ZlZCwgd2hpY2ggaXMgbm90IG5lY2Vzc2FyaWx5DQogICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaXQgd2FzIGluc3RydWN0ZWQgdG8gbW92ZS4gVGhlIHNpbXBsZXN0IGFwcHJvYWNoIGlzIHRvIHVzZSB0aGlzIHRvDQogICAgICAgICAgICAgICAgICAgICBzdG9yZSB0aGUgY2hhcmFjdGVycyBtb3ZlZCB3aGVuIG1vdmluZyBib3RoIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSByYW5nZSB0byB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50DQogICAgICAgICAgICAgICAgICAgICBib2R5IGFuZCBzdWJ0cmFjdGluZyB0aGUgc3RhcnQgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZmZzZXQgKHRoZSAibW92ZS1uZWdhdGl2ZS1nYXppbGxpb24iIG1ldGhvZCkuDQogICAgICAgICAgICAgICAgICAgICBIb3dldmVyLCB0aGlzIGlzIGV4dHJlbWVseSBzbG93IHdoZW4gdGhlIGRvY3VtZW50IGlzIGxhcmdlIGFuZCB0aGUgcmFuZ2UgaXMgbmVhciB0aGUgZW5kIG9mIGl0LiBDbGVhcmx5DQogICAgICAgICAgICAgICAgICAgICBkb2luZyB0aGUgbWlycm9yIGltYWdlIChpLmUuIG1vdmluZyB0aGUgcmFuZ2UgYm91bmRhcmllcyB0byB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCkgaGFzIHRoZSBzYW1lDQogICAgICAgICAgICAgICAgICAgICBwcm9ibGVtLg0KDQogICAgICAgICAgICAgICAgICAgICBBbm90aGVyIGFwcHJvYWNoIHRoYXQgd29ya3MgaXMgdG8gdXNlIG1vdmVTdGFydCgpIHRvIG1vdmUgdGhlIHN0YXJ0IGJvdW5kYXJ5IG9mIHRoZSByYW5nZSB1cCB0byB0aGUgZW5kDQogICAgICAgICAgICAgICAgICAgICBib3VuZGFyeSBvbmUgY2hhcmFjdGVyIGF0IGEgdGltZSBhbmQgaW5jcmVtZW50aW5nIGEgY291bnRlciB3aXRoIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgbW92ZVN0YXJ0KCkNCiAgICAgICAgICAgICAgICAgICAgIGNhbGwuIEhvd2V2ZXIsIHRoZSBjaGVjayBmb3Igd2hldGhlciB0aGUgc3RhcnQgYm91bmRhcnkgaGFzIHJlYWNoZWQgdGhlIGVuZCBib3VuZGFyeSBpcyBleHBlbnNpdmUsIHNvDQogICAgICAgICAgICAgICAgICAgICB0aGlzIG1ldGhvZCBpcyBzbG93IChhbHRob3VnaCB1bmxpa2UgIm1vdmUtbmVnYXRpdmUtZ2F6aWxsaW9uIiBpcyBsYXJnZWx5IHVuYWZmZWN0ZWQgYnkgdGhlIGxvY2F0aW9uIG9mDQogICAgICAgICAgICAgICAgICAgICB0aGUgcmFuZ2Ugd2l0aGluIHRoZSBkb2N1bWVudCkuDQoNCiAgICAgICAgICAgICAgICAgICAgIFRoZSBtZXRob2QgYmVsb3cgaXMgYSBoeWJyaWQgb2YgdGhlIHR3byBtZXRob2RzIGFib3ZlLiBJdCB1c2VzIHRoZSBmYWN0IHRoYXQgYSBzdHJpbmcgY29udGFpbmluZyB0aGUNCiAgICAgICAgICAgICAgICAgICAgIFRleHRSYW5nZSdzICd0ZXh0JyBwcm9wZXJ0eSB3aXRoIGVhY2ggXHJcbiBjb252ZXJ0ZWQgdG8gYSBzaW5nbGUgXHIgY2hhcmFjdGVyIGNhbm5vdCBiZSBsb25nZXIgdGhhbiB0aGUNCiAgICAgICAgICAgICAgICAgICAgIHRleHQgb2YgdGhlIFRleHRSYW5nZSwgc28gdGhlIHN0YXJ0IG9mIHRoZSByYW5nZSBpcyBtb3ZlZCB0aGF0IGxlbmd0aCBpbml0aWFsbHkgYW5kIHRoZW4gYSBjaGFyYWN0ZXIgYXQNCiAgICAgICAgICAgICAgICAgICAgIGEgdGltZSB0byBtYWtlIHVwIGZvciBhbnkgdHJhaWxpbmcgbGluZSBicmVha3Mgbm90IGNvbnRhaW5lZCBpbiB0aGUgJ3RleHQnIHByb3BlcnR5LiBUaGlzIGhhcyBnb29kDQogICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZSBpbiBtb3N0IHNpdHVhdGlvbnMgY29tcGFyZWQgdG8gdGhlIHByZXZpb3VzIHR3byBtZXRob2RzLg0KICAgICAgICAgICAgICAgICAgICAgKi8NCiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBSYW5nZSA9IHdvcmtpbmdSYW5nZS5kdXBsaWNhdGUoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlTGVuZ3RoID0gdGVtcFJhbmdlLnRleHQucmVwbGFjZSgvXHJcbi9nLCAiXHIiKS5sZW5ndGg7DQoNCiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGVtcFJhbmdlLm1vdmVTdGFydCgiY2hhcmFjdGVyIiwgcmFuZ2VMZW5ndGgpOw0KICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIChjb21wYXJpc29uID0gdGVtcFJhbmdlLmNvbXBhcmVFbmRQb2ludHMoIlN0YXJ0VG9FbmQiLCB0ZW1wUmFuZ2UpKSA9PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7DQogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wUmFuZ2UubW92ZVN0YXJ0KCJjaGFyYWN0ZXIiLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHdvcmtpbmdSYW5nZS50ZXh0Lmxlbmd0aDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihib3VuZGFyeU5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KDQogICAgICAgICAgICAgICAgLy8gSWYgdGhlIGJvdW5kYXJ5IGltbWVkaWF0ZWx5IGZvbGxvd3MgYSBjaGFyYWN0ZXIgZGF0YSBub2RlIGFuZCB0aGlzIGlzIHRoZSBlbmQgYm91bmRhcnksIHdlIHNob3VsZCBmYXZvdXINCiAgICAgICAgICAgICAgICAvLyBhIHBvc2l0aW9uIHdpdGhpbiB0aGF0LCBhbmQgbGlrZXdpc2UgZm9yIGEgc3RhcnQgYm91bmRhcnkgcHJlY2VkaW5nIGEgY2hhcmFjdGVyIGRhdGEgbm9kZQ==DQogICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gKGlzQ29sbGFwc2VkIHx8ICFpc1N0YXJ0KSAmJiB3b3JraW5nTm9kZS5wcmV2aW91c1NpYmxpbmc7DQogICAgICAgICAgICAgICAgbmV4dE5vZGUgPSAoaXNDb2xsYXBzZWQgfHwgaXNTdGFydCkgJiYgd29ya2luZ05vZGUubmV4dFNpYmxpbmc7DQogICAgICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUobmV4dE5vZGUpKSB7DQogICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb24gPSBuZXcgRG9tUG9zaXRpb24obmV4dE5vZGUsIDApOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNOb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUocHJldmlvdXNOb2RlKSkgew0KICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKHByZXZpb3VzTm9kZSwgcHJldmlvdXNOb2RlLmRhdGEubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKGNvbnRhaW5lckVsZW1lbnQsIGRvbS5nZXROb2RlSW5kZXgod29ya2luZ05vZGUpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIENsZWFuIHVwDQogICAgICAgICAgICB3b3JraW5nTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdvcmtpbmdOb2RlKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uOiBib3VuZGFyeVBvc2l0aW9uLA0KICAgICAgICAgICAgICAgIG5vZGVJbmZvOiB7DQogICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleDogbm9kZUluZGV4LA0KICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBjb250YWluZXJFbGVtZW50DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvLyBSZXR1cm5zIGEgVGV4dFJhbmdlIHJlcHJlc2VudGluZyB0aGUgYm91bmRhcnkgb2YgYSBUZXh0UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0IG5vZGUuDQogICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gc3RhcnRlZCBvdXQgYXMgYW4gb3B0aW1pemVkIHZlcnNpb24gb2YgY29kZSBmb3VuZCBpbiBUaW0gQ2FtZXJvbiBSeWFuJ3MgSUVSYW5nZQ0KICAgICAgICAvLyAoaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2llcmFuZ2UvKQ0KICAgICAgICB2YXIgY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UgPSBmdW5jdGlvbihib3VuZGFyeVBvc2l0aW9uLCBpc1N0YXJ0KSB7DQogICAgICAgICAgICB2YXIgYm91bmRhcnlOb2RlLCBib3VuZGFyeVBhcmVudCwgYm91bmRhcnlPZmZzZXQgPSBib3VuZGFyeVBvc2l0aW9uLm9mZnNldDsNCiAgICAgICAgICAgIHZhciBkb2MgPSBkb20uZ2V0RG9jdW1lbnQoYm91bmRhcnlQb3NpdGlvbi5ub2RlKTsNCiAgICAgICAgICAgIHZhciB3b3JraW5nTm9kZSwgY2hpbGROb2Rlcywgd29ya2luZ1JhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZVRleHRSYW5nZSgpOw0KICAgICAgICAgICAgdmFyIG5vZGVJc0RhdGFOb2RlID0gaXNDaGFyYWN0ZXJEYXRhTm9kZShib3VuZGFyeVBvc2l0aW9uLm5vZGUpOw0KDQogICAgICAgICAgICBpZiAobm9kZUlzRGF0YU5vZGUpIHsNCiAgICAgICAgICAgICAgICBib3VuZGFyeU5vZGUgPSBib3VuZGFyeVBvc2l0aW9uLm5vZGU7DQogICAgICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQgPSBib3VuZGFyeU5vZGUucGFyZW50Tm9kZTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgY2hpbGROb2RlcyA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZS5jaGlsZE5vZGVzOw0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IChib3VuZGFyeU9mZnNldCA8IGNoaWxkTm9kZXMubGVuZ3RoKSA/IGNoaWxkTm9kZXNbYm91bmRhcnlPZmZzZXRdIDogbnVsbDsNCiAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudCA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gUG9zaXRpb24gdGhlIHJhbmdlIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgbm9kZSBjb250YWluaW5nIHRoZSBib3VuZGFyeQ0KICAgICAgICAgICAgd29ya2luZ05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgic3BhbiIpOw0KDQogICAgICAgICAgICAvLyBNYWtpbmcgdGhlIHdvcmtpbmcgZWxlbWVudCBub24tZW1wdHkgZWxlbWVudCBwZXJzdWFkZXMgSUUgdG8gY29uc2lkZXIgdGhlIFRleHRSYW5nZSBib3VuZGFyeSB0byBiZSB3aXRoaW4gdGhlDQogICAgICAgICAgICAvLyBlbGVtZW50IHJhdGhlciB0aGFuIGltbWVkaWF0ZWx5IGJlZm9yZSBvciBhZnRlciBpdA0KICAgICAgICAgICAgd29ya2luZ05vZGUuaW5uZXJIVE1MID0gIiYjZmVmZjsiOw0KDQogICAgICAgICAgICAvLyBpbnNlcnRCZWZvcmUgaXMgc3VwcG9zZWQgdG8gd29yayBsaWtlIGFwcGVuZENoaWxkIGlmIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIG51bGwuIEhvd2V2ZXIsIGEgYnVnIHJlcG9ydA0KICAgICAgICAgICAgLy8gZm9yIElFUmFuZ2Ugc3VnZ2VzdHMgdGhhdCBpdCBjYW4gY3Jhc2ggdGhlIGJyb3dzZXI6IGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZXJhbmdlL2lzc3Vlcy9kZXRhaWw/aWQ9MTINCiAgICAgICAgICAgIGlmIChib3VuZGFyeU5vZGUpIHsNCiAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudC5pbnNlcnRCZWZvcmUod29ya2luZ05vZGUsIGJvdW5kYXJ5Tm9kZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5UGFyZW50LmFwcGVuZENoaWxkKHdvcmtpbmdOb2RlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgd29ya2luZ1JhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHdvcmtpbmdOb2RlKTsNCiAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5jb2xsYXBzZSghaXNTdGFydCk7DQoNCiAgICAgICAgICAgIC8vIENsZWFuIHVwDQogICAgICAgICAgICBib3VuZGFyeVBhcmVudC5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7DQoNCiAgICAgICAgICAgIC8vIE1vdmUgdGhlIHdvcmtpbmcgcmFuZ2UgdG8gdGhlIHRleHQgb2Zmc2V0LCBpZiByZXF1aXJlZA0KICAgICAgICAgICAgaWYgKG5vZGVJc0RhdGFOb2RlKSB7DQogICAgICAgICAgICAgICAgd29ya2luZ1JhbmdlW2lzU3RhcnQgPyAibW92ZVN0YXJ0IiA6ICJtb3ZlRW5kIl0oImNoYXJhY3RlciIsIGJvdW5kYXJ5T2Zmc2V0KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHdvcmtpbmdSYW5nZTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAgICAgLy8gVGhpcyBpcyBhIHdyYXBwZXIgYXJvdW5kIGEgVGV4dFJhbmdlLCBwcm92aWRpbmcgZnVsbCBET00gUmFuZ2UgZnVuY3Rpb25hbGl0eSB1c2luZyByYW5neSdzIERvbVJhbmdlIGFzIGENCiAgICAgICAgLy8gcHJvdG90eXBlDQoNCiAgICAgICAgV3JhcHBlZFRleHRSYW5nZSA9IGZ1bmN0aW9uKHRleHRSYW5nZSkgew0KICAgICAgICAgICAgdGhpcy50ZXh0UmFuZ2UgPSB0ZXh0UmFuZ2U7DQogICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBXcmFwcGVkVGV4dFJhbmdlLnByb3RvdHlwZSA9IG5ldyBEb21SYW5nZShkb2N1bWVudCk7DQoNCiAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIHN0YXJ0LCBlbmQsIHN0YXJ0Qm91bmRhcnk7DQoNCiAgICAgICAgICAgIC8vIFRleHRSYW5nZSdzIHBhcmVudEVsZW1lbnQoKSBtZXRob2QgY2Fubm90IGJlIHRydXN0ZWQuIGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQoKSB3b3JrcyBhcm91bmQgdGhhdC4NCiAgICAgICAgICAgIHZhciByYW5nZUNvbnRhaW5lckVsZW1lbg==dCA9IGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQodGhpcy50ZXh0UmFuZ2UpOw0KDQogICAgICAgICAgICBpZiAodGV4dFJhbmdlSXNDb2xsYXBzZWQodGhpcy50ZXh0UmFuZ2UpKSB7DQogICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIHRydWUsDQogICAgICAgICAgICAgICAgICAgIHRydWUpLmJvdW5kYXJ5UG9zaXRpb247DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHN0YXJ0Qm91bmRhcnkgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIHRydWUsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0Qm91bmRhcnkuYm91bmRhcnlQb3NpdGlvbjsNCg0KICAgICAgICAgICAgICAgIC8vIEFuIG9wdGltaXphdGlvbiB1c2VkIGhlcmUgaXMgdGhhdCBpZiB0aGUgc3RhcnQgYW5kIGVuZCBib3VuZGFyaWVzIGhhdmUgdGhlIHNhbWUgcGFyZW50IGVsZW1lbnQsIHRoZQ0KICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBzY29wZSBmb3IgdGhlIGVuZCBib3VuZGFyeSBjYW4gYmUgbGltaXRlZCB0byBleGNsdWRlIHRoZSBwb3J0aW9uIG9mIHRoZSBlbGVtZW50IHRoYXQgcHJlY2VkZXMNCiAgICAgICAgICAgICAgICAvLyB0aGUgc3RhcnQgYm91bmRhcnkNCiAgICAgICAgICAgICAgICBlbmQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIGZhbHNlLCBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgc3RhcnRCb3VuZGFyeS5ub2RlSW5mbykuYm91bmRhcnlQb3NpdGlvbjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdGhpcy5zZXRTdGFydChzdGFydC5ub2RlLCBzdGFydC5vZmZzZXQpOw0KICAgICAgICAgICAgdGhpcy5zZXRFbmQoZW5kLm5vZGUsIGVuZC5vZmZzZXQpOw0KICAgICAgICB9Ow0KDQogICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiAiV3JhcHBlZFRleHRSYW5nZSI7DQogICAgICAgIH07DQoNCiAgICAgICAgRG9tUmFuZ2UuY29weUNvbXBhcmlzb25Db25zdGFudHMoV3JhcHBlZFRleHRSYW5nZSk7DQoNCiAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UobmV3IERvbVBvc2l0aW9uKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCksIHRydWUpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB2YXIgc3RhcnRSYW5nZSA9IGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlKG5ldyBEb21Qb3NpdGlvbihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLCB0cnVlKTsNCiAgICAgICAgICAgICAgICB2YXIgZW5kUmFuZ2UgPSBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZShuZXcgRG9tUG9zaXRpb24ocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpLCBmYWxzZSk7DQogICAgICAgICAgICAgICAgdmFyIHRleHRSYW5nZSA9IGdldEJvZHkoIERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpICkuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgICAgICAgICAgdGV4dFJhbmdlLnNldEVuZFBvaW50KCJTdGFydFRvU3RhcnQiLCBzdGFydFJhbmdlKTsNCiAgICAgICAgICAgICAgICB0ZXh0UmFuZ2Uuc2V0RW5kUG9pbnQoIkVuZFRvRW5kIiwgZW5kUmFuZ2UpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0UmFuZ2U7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQoNCiAgICAgICAgYXBpLldyYXBwZWRUZXh0UmFuZ2UgPSBXcmFwcGVkVGV4dFJhbmdlOw0KDQogICAgICAgIC8vIElFIDkgYW5kIGFib3ZlIGhhdmUgYm90aCBpbXBsZW1lbnRhdGlvbnMgYW5kIFJhbmd5IG1ha2VzIGJvdGggYXZhaWxhYmxlLiBUaGUgbmV4dCBmZXcgbGluZXMgc2V0cyB3aGljaA0KICAgICAgICAvLyBpbXBsZW1lbnRhdGlvbiB0byB1c2UgYnkgZGVmYXVsdC4NCiAgICAgICAgaWYgKCFhcGkuZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlIHx8IGFwaS5jb25maWcucHJlZmVyVGV4dFJhbmdlKSB7DQogICAgICAgICAgICAvLyBBZGQgV3JhcHBlZFRleHRSYW5nZSBhcyB0aGUgUmFuZ2UgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3QgdG8gYWxsb3cgZXhwcmVzc2lvbiBsaWtlIFJhbmdlLkVORF9UT19FTkQgdG8gd29yaw0KICAgICAgICAgICAgdmFyIGdsb2JhbE9iaiA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pKCk7DQogICAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbE9iai5SYW5nZSA9PSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgICAgIGdsb2JhbE9iai5SYW5nZSA9IFdyYXBwZWRUZXh0UmFuZ2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGFwaS5jcmVhdGVOYXRpdmVSYW5nZSA9IGZ1bmN0aW9uKGRvYykgew0KICAgICAgICAgICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgImNyZWF0ZU5hdGl2ZVJhbmdlIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIGdldEJvZHkoZG9jKS5jcmVhdGVUZXh0UmFuZ2UoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIGFwaS5XcmFwcGVkUmFuZ2UgPSBXcmFwcGVkVGV4dFJhbmdlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgYXBpLmNyZWF0ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgImNyZWF0ZVJhbmdlIik7DQogICAgICAgIHJldHVybiBuZXcgYXBpLldyYXBwZWRSYW5nZShhcGkuY3JlYXRlTmF0aXZlUmFuZ2UoZG9jKSk7DQogICAgfTsNCg0KICAgIGFwaS5jcmVhdGVSYW5neVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgImNyZWF0ZVJhbmd5UmFuZ2UiKTsNCiAgICAgICAgcmV0dXJuIG5ldyBEb21SYW5nZShkb2MpOw0KICAgIH07DQoNCiAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ2UgPSBmdW5jdGlvbihpZnJhbWVFbCkgew0KICAgICAgICBtb2R1bGUuZGVwcmVjYXRpb25Ob3RpY2UoImNyZWF0ZUlmcmFtZVJhbmdlKCkiLCAiY3JlYXRlUmFuZ2UoaWZyYW1lRWwpIik7DQogICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ2UoaWZyYW1lRWwpOw0KICAgIH07DQoNCiAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZSA9IGZ1bmN0aW9uKGlmcmFtZUVsKSB7DQogICAgICAgIG1vZHVsZS5kZXByZWNhdGlvbk5vdGljZSgiY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZSgpIiwgImNyZWF0ZVJhbmd5UmFuZ2UoaWZyYW1lRWwpIik7DQogICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ3lSYW5nZShpZnJhbWVFbCk7DQogICAgfTsNCg0KICAgIGFwaS5hZGRDcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXIoZnVuY3Rpb24od2luKSB7DQogICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7DQogICAgICAgIGlmICh0eXBlb2YgZG9jLmNyZWF0ZVJhbmdlID09ICJ1bmRlZmluZWQiKSB7DQogICAgICAgICAgICBkb2MuY3JlYXRlUmFuZ2UgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQogICAgICAgIGRvYyA9IHdpbiA9IG51bGw7DQogICAgfSk7DQp9KTsKLy8gVGhpcyBtb2R1bGUgY3JlYXRlcyBhIHNlbGVjdGlvbiBvYmplY3Qgd3JhcHBlciB0aGF0IGNvbmZvcm1zIGFzIGNsb3NlbHkgYXMgcG9zc2libGUgdG8gdGhlIFNlbGVjdGlvbiBzcGVjaWZpY2F0aW9uDQovLyBpbiB0aGUgSFRNTCBFZGl0aW5nIHNwZWMgKGh0dHA6Ly9kdmNzLnczLm9yZy9oZy9lZGl0aW5nL3Jhdy1maWxlL3RpcC9lZGl0aW5nLmh0bQ==bCNzZWxlY3Rpb25zKQ0KcmFuZ3kuY3JlYXRlTW9kdWxlKCJXcmFwcGVkU2VsZWN0aW9uIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCiAgICBhcGkucmVxdWlyZU1vZHVsZXMoIFsiRG9tVXRpbCIsICJEb21SYW5nZSIsICJXcmFwcGVkUmFuZ2UiXSApOw0KDQogICAgYXBpLmNvbmZpZy5jaGVja1NlbGVjdGlvblJhbmdlcyA9IHRydWU7DQoNCiAgICB2YXIgQk9PTEVBTiA9ICJib29sZWFuIjsNCiAgICB2YXIgZG9tID0gYXBpLmRvbTsNCiAgICB2YXIgdXRpbCA9IGFwaS51dGlsOw0KICAgIHZhciBpc0hvc3RNZXRob2QgPSB1dGlsLmlzSG9zdE1ldGhvZDsNCiAgICB2YXIgRG9tUmFuZ2UgPSBhcGkuRG9tUmFuZ2U7DQogICAgdmFyIFdyYXBwZWRSYW5nZSA9IGFwaS5XcmFwcGVkUmFuZ2U7DQogICAgdmFyIERPTUV4Y2VwdGlvbiA9IGFwaS5ET01FeGNlcHRpb247DQogICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uOw0KICAgIHZhciBnZXROYXRpdmVTZWxlY3Rpb247DQogICAgdmFyIHNlbGVjdGlvbklzQ29sbGFwc2VkOw0KICAgIHZhciBmZWF0dXJlcyA9IGFwaS5mZWF0dXJlczsNCiAgICB2YXIgQ09OVFJPTCA9ICJDb250cm9sIjsNCiAgICB2YXIgZ2V0RG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQ7DQogICAgdmFyIGdldEJvZHkgPSBkb20uZ2V0Qm9keTsNCiAgICB2YXIgcmFuZ2VzRXF1YWwgPSBEb21SYW5nZS5yYW5nZXNFcXVhbDsNCg0KDQogICAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byBzdXBwb3J0IGRpcmVjdGlvbiBwYXJhbWV0ZXJzIGluIHRoZSBBUEkgdGhhdCBtYXkgYmUgYSBzdHJpbmcgKCJiYWNrd2FyZCIgb3IgImZvcndhcmQiKSBvciBhDQogICAgLy8gQm9vbGVhbiAodHJ1ZSBmb3IgYmFja3dhcmRzKS4NCiAgICBmdW5jdGlvbiBpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcikgew0KICAgICAgICByZXR1cm4gKHR5cGVvZiBkaXIgPT0gInN0cmluZyIpID8gKGRpciA9PSAiYmFja3dhcmQiKSA6ICEhZGlyOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFdpbmRvdyh3aW4sIG1ldGhvZE5hbWUpIHsNCiAgICAgICAgaWYgKCF3aW4pIHsNCiAgICAgICAgICAgIHJldHVybiB3aW5kb3c7DQogICAgICAgIH0gZWxzZSBpZiAoZG9tLmlzV2luZG93KHdpbikpIHsNCiAgICAgICAgICAgIHJldHVybiB3aW47DQogICAgICAgIH0gZWxzZSBpZiAod2luIGluc3RhbmNlb2YgV3JhcHBlZFNlbGVjdGlvbikgew0KICAgICAgICAgICAgcmV0dXJuIHdpbi53aW47DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB2YXIgZG9jID0gZG9tLmdldENvbnRlbnREb2N1bWVudCh3aW4sIG1vZHVsZSwgbWV0aG9kTmFtZSk7DQogICAgICAgICAgICByZXR1cm4gZG9tLmdldFdpbmRvdyhkb2MpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0V2luU2VsZWN0aW9uKHdpblBhcmFtKSB7DQogICAgICAgIHJldHVybiBnZXRXaW5kb3cod2luUGFyYW0sICJnZXRXaW5TZWxlY3Rpb24iKS5nZXRTZWxlY3Rpb24oKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXREb2NTZWxlY3Rpb24od2luUGFyYW0pIHsNCiAgICAgICAgcmV0dXJuIGdldFdpbmRvdyh3aW5QYXJhbSwgImdldERvY1NlbGVjdGlvbiIpLmRvY3VtZW50LnNlbGVjdGlvbjsNCiAgICB9DQoNCiAgICAvLyBUZXN0IGZvciB0aGUgUmFuZ2UvVGV4dFJhbmdlIGFuZCBTZWxlY3Rpb24gZmVhdHVyZXMgcmVxdWlyZWQNCiAgICAvLyBUZXN0IGZvciBhYmlsaXR5IHRvIHJldHJpZXZlIHNlbGVjdGlvbg0KICAgIHZhciBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uID0gaXNIb3N0TWV0aG9kKHdpbmRvdywgImdldFNlbGVjdGlvbiIpLA0KICAgICAgICBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uID0gdXRpbC5pc0hvc3RPYmplY3QoZG9jdW1lbnQsICJzZWxlY3Rpb24iKTsNCg0KICAgIGZlYXR1cmVzLmltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gPSBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uOw0KICAgIGZlYXR1cmVzLmltcGxlbWVudHNEb2NTZWxlY3Rpb24gPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uOw0KDQogICAgdmFyIHVzZURvY3VtZW50U2VsZWN0aW9uID0gaW1wbGVtZW50c0RvY1NlbGVjdGlvbiAmJiAoIWltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gfHwgYXBpLmNvbmZpZy5wcmVmZXJUZXh0UmFuZ2UpOw0KDQogICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7DQogICAgICAgIGdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldERvY1NlbGVjdGlvbjsNCiAgICAgICAgYXBpLmlzU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbih3aW5QYXJhbSkgew0KICAgICAgICAgICAgdmFyIGRvYyA9IGdldFdpbmRvdyh3aW5QYXJhbSwgImlzU2VsZWN0aW9uVmFsaWQiKS5kb2N1bWVudCwgbmF0aXZlU2VsID0gZG9jLnNlbGVjdGlvbjsNCg0KICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0aW9uIFRleHRSYW5nZSBpcyBhY3R1YWxseSBjb250YWluZWQgd2l0aGluIHRoZSBjb3JyZWN0IGRvY3VtZW50DQogICAgICAgICAgICByZXR1cm4gKG5hdGl2ZVNlbC50eXBlICE9ICJOb25lIiB8fCBnZXREb2N1bWVudChuYXRpdmVTZWwuY3JlYXRlUmFuZ2UoKS5wYXJlbnRFbGVtZW50KCkpID09IGRvYyk7DQogICAgICAgIH07DQogICAgfSBlbHNlIGlmIChpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uKSB7DQogICAgICAgIGdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldFdpblNlbGVjdGlvbjsNCiAgICAgICAgYXBpLmlzU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJOZWl0aGVyIGRvY3VtZW50LnNlbGVjdGlvbiBvciB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkgZGV0ZWN0ZWQuIik7DQogICAgfQ0KDQogICAgYXBpLmdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldE5hdGl2ZVNlbGVjdGlvbjsNCg0KICAgIHZhciB0ZXN0U2VsZWN0aW9uID0gZ2V0TmF0aXZlU2VsZWN0aW9uKCk7DQogICAgdmFyIHRlc3RSYW5nZSA9IGFwaS5jcmVhdGVOYXRpdmVSYW5nZShkb2N1bWVudCk7DQogICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTsNCg0KICAgIC8vIE9idGFpbmluZyBhIHJhbmdlIGZyb20gYSBzZWxlY3Rpb24NCiAgICB2YXIgc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgPSB1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RTZWxlY3Rpb24sDQogICAgICAgIFsiYW5jaG9yTm9kZSIsICJmb2N1c05vZGUiLCAiYW5jaG9yT2Zmc2V0IiwgImZvY3VzT2Zmc2V0Il0pOw0KDQogICAgZmVhdHVyZXMuc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgPSBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1czsNCg0KICAgIC8vIFRlc3QgZm9yIGV4aXN0ZW5jZSBvZiBuYXRpdmUgc2VsZWN0aW9uIGV4dGVuZCgpIG1ldGhvZA0KICAgIHZhciBzZWxlY3Rpb25IYXNFeHRlbmQgPSBpc0hvc3RNZXRob2QodGVzdFNlbGVjdGlvbiwgImV4dGVuZCIpOw0KICAgIGZlYXR1cmVzLnNlbGVjdGlvbkhhc0V4dGVuZCA9IHNlbGVjdGlvbkhhc0V4dGVuZDsNCg0KICAgIC8vIFRlc3QgaWYgcmFuZ2VDb3VudCBleGlzdHMNCiAgICB2YXIgc2VsZWN0aW9uSGFzUmFuZ2VDb3VudCA9ICh0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09ICJudW1iZXIiKTsNCiAgICBmZWF0dXJlcy5zZWxlY3Rpb25IYXNSYW5nZUNvdW50ID0gc2VsZWN0aW9uSGFzUmFuZ2VDb3VudDsNCg0KICAgIHZhciBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gZmFsc2U7DQogICAgdmFyIGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IHRydWU7DQoNCiAgICBpZiAodXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXN0U2VsZWN0aW9uLCBbImFkZFJhbmdlIiwgImdldFJhbmdlQXQiLCAicmVtb3ZlQWxsUmFuZ2VzIl0pICYmDQogICAgICAgICAgICB0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09ICJudW1iZXIiICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkgew0KDQogICAgICAgIChmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIC8vIFByZXZpb3VzbHkgYW4gaWZyYW1lIHdhcyB1cw==ZWQgYnV0IHRoaXMgY2F1c2VkIHByb2JsZW1zIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyBpbiBJRSwgc28gdGVzdHMgYXJlDQogICAgICAgICAgICAvLyBwZXJmb3JtZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnQncyBzZWxlY3Rpb24uIFNlZSBpc3N1ZSAxMDkuDQoNCiAgICAgICAgICAgIC8vIE5vdGUgYWxzbyB0aGF0IGlmIGEgc2VsZWN0aW9uIHByZXZpb3VzbHkgZXhpc3RlZCwgaXQgaXMgd2lwZWQgYnkgdGhlc2UgdGVzdHMuIFRoaXMgc2hvdWxkIHVzdWFsbHkgYmUgZmluZQ0KICAgICAgICAgICAgLy8gYmVjYXVzZSBpbml0aWFsaXphdGlvbiB1c3VhbGx5IGhhcHBlbnMgd2hlbiB0aGUgZG9jdW1lbnQgbG9hZHMsIGJ1dCBjb3VsZCBiZSBhIHByb2JsZW0gZm9yIGEgc2NyaXB0IHRoYXQNCiAgICAgICAgICAgIC8vIGxvYWRzIGFuZCBpbml0aWFsaXplcyBSYW5neSBsYXRlci4gSWYgYW55b25lIGNvbXBsYWlucywgY29kZSBjb3VsZCBiZSBhZGRlZCB0byBzYXZlIGFuZCByZXN0b3JlIHRoZQ0KICAgICAgICAgICAgLy8gc2VsZWN0aW9uLg0KICAgICAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTsNCiAgICAgICAgICAgIGlmIChzZWwpIHsNCiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGdldEJvZHkoZG9jdW1lbnQpOw0KICAgICAgICAgICAgICAgIHZhciB0ZXN0RWwgPSBib2R5LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSApOw0KICAgICAgICAgICAgICAgIHRlc3RFbC5jb250ZW50RWRpdGFibGUgPSAiZmFsc2UiOw0KICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IHRlc3RFbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIlx1MDBhMFx1MDBhMFx1MDBhMCIpICk7DQoNCiAgICAgICAgICAgICAgICAvLyBUZXN0IHdoZXRoZXIgdGhlIG5hdGl2ZSBzZWxlY3Rpb24gd2lsbCBhbGxvdyBhIGNvbGxhcHNlZCBzZWxlY3Rpb24gd2l0aGluIGEgbm9uLWVkaXRhYmxlIGVsZW1lbnQNCiAgICAgICAgICAgICAgICB2YXIgcjEgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOw0KDQogICAgICAgICAgICAgICAgcjEuc2V0U3RhcnQodGV4dE5vZGUsIDEpOw0KICAgICAgICAgICAgICAgIHIxLmNvbGxhcHNlKHRydWUpOw0KICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMSk7DQogICAgICAgICAgICAgICAgY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkID0gKHNlbC5yYW5nZUNvdW50ID09IDEpOw0KICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTsNCg0KICAgICAgICAgICAgICAgIC8vIFRlc3Qgd2hldGhlciB0aGUgbmF0aXZlIHNlbGVjdGlvbiBpcyBjYXBhYmxlIG9mIHN1cHBvcnRpbmcgbXVsdGlwbGUgcmFuZ2VzDQogICAgICAgICAgICAgICAgdmFyIHIyID0gcjEuY2xvbmVSYW5nZSgpOw0KICAgICAgICAgICAgICAgIHIxLnNldFN0YXJ0KHRleHROb2RlLCAwKTsNCiAgICAgICAgICAgICAgICByMi5zZXRFbmQodGV4dE5vZGUsIDMpOw0KICAgICAgICAgICAgICAgIHIyLnNldFN0YXJ0KHRleHROb2RlLCAyKTsNCiAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocjEpOw0KICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMik7DQoNCiAgICAgICAgICAgICAgICBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gKHNlbC5yYW5nZUNvdW50ID09IDIpOw0KDQogICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXANCiAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKHRlc3RFbCk7DQogICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgIHIxLmRldGFjaCgpOw0KICAgICAgICAgICAgICAgIHIyLmRldGFjaCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KSgpOw0KICAgIH0NCg0KICAgIGZlYXR1cmVzLnNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMgPSBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzOw0KICAgIGZlYXR1cmVzLmNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZDsNCg0KICAgIC8vIENvbnRyb2xSYW5nZXMNCiAgICB2YXIgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IGZhbHNlLCB0ZXN0Q29udHJvbFJhbmdlOw0KDQogICAgaWYgKGJvZHkgJiYgaXNIb3N0TWV0aG9kKGJvZHksICJjcmVhdGVDb250cm9sUmFuZ2UiKSkgew0KICAgICAgICB0ZXN0Q29udHJvbFJhbmdlID0gYm9keS5jcmVhdGVDb250cm9sUmFuZ2UoKTsNCiAgICAgICAgaWYgKHV0aWwuYXJlSG9zdFByb3BlcnRpZXModGVzdENvbnRyb2xSYW5nZSwgWyJpdGVtIiwgImFkZCJdKSkgew0KICAgICAgICAgICAgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IHRydWU7DQogICAgICAgIH0NCiAgICB9DQogICAgZmVhdHVyZXMuaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IGltcGxlbWVudHNDb250cm9sUmFuZ2U7DQoNCiAgICAvLyBTZWxlY3Rpb24gY29sbGFwc2VkbmVzcw0KICAgIGlmIChzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cykgew0KICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgcmV0dXJuIHNlbC5hbmNob3JOb2RlID09PSBzZWwuZm9jdXNOb2RlICYmIHNlbC5hbmNob3JPZmZzZXQgPT09IHNlbC5mb2N1c09mZnNldDsNCiAgICAgICAgfTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgcmV0dXJuIHNlbC5yYW5nZUNvdW50ID8gc2VsLmdldFJhbmdlQXQoc2VsLnJhbmdlQ291bnQgLSAxKS5jb2xsYXBzZWQgOiBmYWxzZTsNCiAgICAgICAgfTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZShzZWwsIHJhbmdlLCBiYWNrd2FyZCkgew0KICAgICAgICB2YXIgYW5jaG9yUHJlZml4ID0gYmFja3dhcmQgPyAiZW5kIiA6ICJzdGFydCIsIGZvY3VzUHJlZml4ID0gYmFja3dhcmQgPyAic3RhcnQiIDogImVuZCI7DQogICAgICAgIHNlbC5hbmNob3JOb2RlID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgIkNvbnRhaW5lciJdOw0KICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgIk9mZnNldCJdOw0KICAgICAgICBzZWwuZm9jdXNOb2RlID0gcmFuZ2VbZm9jdXNQcmVmaXggKyAiQ29udGFpbmVyIl07DQogICAgICAgIHNlbC5mb2N1c09mZnNldCA9IHJhbmdlW2ZvY3VzUHJlZml4ICsgIk9mZnNldCJdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbihzZWwpIHsNCiAgICAgICAgdmFyIG5hdGl2ZVNlbCA9IHNlbC5uYXRpdmVTZWxlY3Rpb247DQogICAgICAgIHNlbC5hbmNob3JOb2RlID0gbmF0aXZlU2VsLmFuY2hvck5vZGU7DQogICAgICAgIHNlbC5hbmNob3JPZmZzZXQgPSBuYXRpdmVTZWwuYW5jaG9yT2Zmc2V0Ow0KICAgICAgICBzZWwuZm9jdXNOb2RlID0gbmF0aXZlU2VsLmZvY3VzTm9kZTsNCiAgICAgICAgc2VsLmZvY3VzT2Zmc2V0ID0gbmF0aXZlU2VsLmZvY3VzT2Zmc2V0Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCkgew0KICAgICAgICBzZWwuYW5jaG9yTm9kZSA9IHNlbC5mb2N1c05vZGUgPSBudWxsOw0KICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gc2VsLmZvY3VzT2Zmc2V0ID0gMDsNCiAgICAgICAgc2VsLnJhbmdlQ291bnQgPSAwOw0KICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB0cnVlOw0KICAgICAgICBzZWwuX3Jhbmdlcy5sZW5ndGggPSAwOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldE5hdGl2ZVJhbmdlKHJhbmdlKSB7DQogICAgICAgIHZhciBuYXRpdmVSYW5nZTsNCiAgICAgICAgaWYgKHJhbmdlIGluc3RhbmNlb2YgRG9tUmFuZ2UpIHsNCiAgICAgICAgICAgIG5hdGl2ZVJhbmdlID0gYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlKHJhbmdlLmdldERvY3VtZW50KCkpOw0KICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcg==YW5nZS5lbmRPZmZzZXQpOw0KICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTsNCiAgICAgICAgfSBlbHNlIGlmIChyYW5nZSBpbnN0YW5jZW9mIFdyYXBwZWRSYW5nZSkgew0KICAgICAgICAgICAgbmF0aXZlUmFuZ2UgPSByYW5nZS5uYXRpdmVSYW5nZTsNCiAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UgJiYgKHJhbmdlIGluc3RhbmNlb2YgZG9tLmdldFdpbmRvdyhyYW5nZS5zdGFydENvbnRhaW5lcikuUmFuZ2UpKSB7DQogICAgICAgICAgICBuYXRpdmVSYW5nZSA9IHJhbmdlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBuYXRpdmVSYW5nZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByYW5nZUNvbnRhaW5zU2luZ2xlRWxlbWVudChyYW5nZU5vZGVzKSB7DQogICAgICAgIGlmICghcmFuZ2VOb2Rlcy5sZW5ndGggfHwgcmFuZ2VOb2Rlc1swXS5ub2RlVHlwZSAhPSAxKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHJhbmdlTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmICghZG9tLmlzQW5jZXN0b3JPZihyYW5nZU5vZGVzWzBdLCByYW5nZU5vZGVzW2ldKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKSB7DQogICAgICAgIHZhciBub2RlcyA9IHJhbmdlLmdldE5vZGVzKCk7DQogICAgICAgIGlmICghcmFuZ2VDb250YWluc1NpbmdsZUVsZW1lbnQobm9kZXMpKSB7DQogICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoImdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2U6IHJhbmdlICIgKyByYW5nZS5pbnNwZWN0KCkgKyAiIGRpZCBub3QgY29uc2lzdCBvZiBhIHNpbmdsZSBlbGVtZW50Iik7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG5vZGVzWzBdOw0KICAgIH0NCg0KICAgIC8vIFNpbXBsZSwgcXVpY2sgdGVzdCB3aGljaCBvbmx5IG5lZWRzIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gYSBUZXh0UmFuZ2UgYW5kIGEgQ29udHJvbFJhbmdlDQogICAgZnVuY3Rpb24gaXNUZXh0UmFuZ2UocmFuZ2UpIHsNCiAgICAgICAgcmV0dXJuICEhcmFuZ2UgJiYgdHlwZW9mIHJhbmdlLnRleHQgIT0gInVuZGVmaW5lZCI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKSB7DQogICAgICAgIC8vIENyZWF0ZSBhIFJhbmdlIGZyb20gdGhlIHNlbGVjdGVkIFRleHRSYW5nZQ0KICAgICAgICB2YXIgd3JhcHBlZFJhbmdlID0gbmV3IFdyYXBwZWRSYW5nZShyYW5nZSk7DQogICAgICAgIHNlbC5fcmFuZ2VzID0gW3dyYXBwZWRSYW5nZV07DQoNCiAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCB3cmFwcGVkUmFuZ2UsIGZhbHNlKTsNCiAgICAgICAgc2VsLnJhbmdlQ291bnQgPSAxOw0KICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB3cmFwcGVkUmFuZ2UuY29sbGFwc2VkOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKSB7DQogICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICBzZWwuX3Jhbmdlcy5sZW5ndGggPSAwOw0KICAgICAgICBpZiAoc2VsLmRvY1NlbGVjdGlvbi50eXBlID09ICJOb25lIikgew0KICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSBzZWwuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICBpZiAoaXNUZXh0UmFuZ2UoY29udHJvbFJhbmdlKSkgew0KICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FzZSAod2hlcmUgdGhlIHNlbGVjdGlvbiB0eXBlIGlzICJDb250cm9sIiBhbmQgY2FsbGluZyBjcmVhdGVSYW5nZSgpIG9uIHRoZSBzZWxlY3Rpb24gcmV0dXJucw0KICAgICAgICAgICAgICAgIC8vIGEgVGV4dFJhbmdlKSBjYW4gaGFwcGVuIGluIElFIDkuIEl0IGhhcHBlbnMsIGZvciBleGFtcGxlLCB3aGVuIGFsbCBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWQNCiAgICAgICAgICAgICAgICAvLyBDb250cm9sUmFuZ2UgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgQ29udHJvbFJhbmdlIGFuZCByZW1vdmVkIGZyb20gdGhlIGRvY3VtZW50Lg0KICAgICAgICAgICAgICAgIHVwZGF0ZUZyb21UZXh0UmFuZ2Uoc2VsLCBjb250cm9sUmFuZ2UpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7DQogICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBkb2MgPSBnZXREb2N1bWVudChjb250cm9sUmFuZ2UuaXRlbSgwKSk7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWwucmFuZ2VDb3VudDsgKytpKSB7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoY29udHJvbFJhbmdlLml0ZW0oaSkpOw0KICAgICAgICAgICAgICAgICAgICBzZWwuX3Jhbmdlcy5wdXNoKHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc2VsLmlzQ29sbGFwc2VkID0gc2VsLnJhbmdlQ291bnQgPT0gMSAmJiBzZWwuX3Jhbmdlc1swXS5jb2xsYXBzZWQ7DQogICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCBzZWwuX3Jhbmdlc1tzZWwucmFuZ2VDb3VudCAtIDFdLCBmYWxzZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbihzZWwsIHJhbmdlKSB7DQogICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSBzZWwuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgIHZhciByYW5nZUVsZW1lbnQgPSBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKTsNCg0KICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQ29udHJvbFJhbmdlIGNvbnRhaW5pbmcgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWQgQ29udHJvbFJhbmdlIHBsdXMgdGhlIGVsZW1lbnQNCiAgICAgICAgLy8gY29udGFpbmVkIGJ5IHRoZSBzdXBwbGllZCByYW5nZQ0KICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpOw0KICAgICAgICB2YXIgbmV3Q29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpOw0KICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY29udHJvbFJhbmdlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTsNCiAgICAgICAgfQ0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLmFkZChyYW5nZUVsZW1lbnQpOw0KICAgICAgICB9IGNhdGNoIChleCkgew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJhZGRSYW5nZSgpOiBFbGVtZW50IHdpdGhpbiB0aGUgc3BlY2lmaWVkIFJhbmdlIGNvdWxkIG5vdCBiZSBhZGRlZCB0byBjb250cm9sIHNlbGVjdGlvbiAoZG9lcyBpdCBoYXZlIGxheW91dD8pIik7DQogICAgICAgIH0NCiAgICAgICAgbmV3Q29udHJvbFJhbmdlLnNlbGVjdCgpOw0KDQogICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7DQogICAgfQ0KDQogICAgdmFyIGdldFNlbGVjdGlvblJhbmdlQXQ7DQoNCiAgICBpZiAoaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sICJnZXRSYQ==bmdlQXQiKSkgew0KICAgICAgICAvLyB0cnkvY2F0Y2ggaXMgcHJlc2VudCBiZWNhdXNlIGdldFJhbmdlQXQoKSBtdXN0IGhhdmUgdGhyb3duIGFuIGVycm9yIGluIHNvbWUgYnJvd3NlciBhbmQgc29tZSBzaXR1YXRpb24uDQogICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIEkgZGlkbid0IHdyaXRlIGEgY29tbWVudCBhYm91dCB0aGUgc3BlY2lmaWNzIGFuZCBhbSBub3cgc2NhcmVkIHRvIHRha2UgaXQgb3V0LiBMZXQgdGhhdCBiZSBhDQogICAgICAgIC8vIGxlc3NvbiB0byB1cyBhbGwsIGVzcGVjaWFsbHkgbWUuDQogICAgICAgIGdldFNlbGVjdGlvblJhbmdlQXQgPSBmdW5jdGlvbihzZWwsIGluZGV4KSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHJldHVybiBzZWwuZ2V0UmFuZ2VBdChpbmRleCk7DQogICAgICAgICAgICB9IGNhdGNoIChleCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMpIHsNCiAgICAgICAgZ2V0U2VsZWN0aW9uUmFuZ2VBdCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KHNlbC5hbmNob3JOb2RlKTsNCiAgICAgICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpOw0KICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBbmRFbmQoc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQsIHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7DQoNCiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3Rpb24gd2FzIHNlbGVjdGVkIGJhY2t3YXJkcyAoZnJvbSB0aGUgZW5kIHRvIHRoZSBzdGFydCBpbiB0aGUNCiAgICAgICAgICAgIC8vIGRvY3VtZW50KQ0KICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAhPT0gdGhpcy5pc0NvbGxhcHNlZCkgew0KICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCwgc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gcmFuZ2U7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gV3JhcHBlZFNlbGVjdGlvbihzZWxlY3Rpb24sIGRvY1NlbGVjdGlvbiwgd2luKSB7DQogICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uID0gc2VsZWN0aW9uOw0KICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbiA9IGRvY1NlbGVjdGlvbjsNCiAgICAgICAgdGhpcy5fcmFuZ2VzID0gW107DQogICAgICAgIHRoaXMud2luID0gd2luOw0KICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0aWVzKHNlbCkgew0KICAgICAgICBzZWwud2luID0gc2VsLmFuY2hvck5vZGUgPSBzZWwuZm9jdXNOb2RlID0gc2VsLl9yYW5nZXMgPSBudWxsOw0KICAgICAgICBzZWwucmFuZ2VDb3VudCA9IHNlbC5hbmNob3JPZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQgPSAwOw0KICAgICAgICBzZWwuZGV0YWNoZWQgPSB0cnVlOw0KICAgIH0NCg0KICAgIHZhciBjYWNoZWRSYW5neVNlbGVjdGlvbnMgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGZpbmRDYWNoZWRTZWxlY3Rpb24od2luLCBhY3Rpb24pIHsNCiAgICAgICAgdmFyIGkgPSBjYWNoZWRSYW5neVNlbGVjdGlvbnMubGVuZ3RoLCBjYWNoZWQsIHNlbDsNCiAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgY2FjaGVkID0gY2FjaGVkUmFuZ3lTZWxlY3Rpb25zW2ldOw0KICAgICAgICAgICAgc2VsID0gY2FjaGVkLnNlbGVjdGlvbjsNCiAgICAgICAgICAgIGlmIChhY3Rpb24gPT0gImRlbGV0ZUFsbCIpIHsNCiAgICAgICAgICAgICAgICBkZWxldGVQcm9wZXJ0aWVzKHNlbCk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGNhY2hlZC53aW4gPT0gd2luKSB7DQogICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSAiZGVsZXRlIikgew0KICAgICAgICAgICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMuc3BsaWNlKGksIDEpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoYWN0aW9uID09ICJkZWxldGVBbGwiKSB7DQogICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMubGVuZ3RoID0gMDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICB2YXIgZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24od2luKSB7DQogICAgICAgIC8vIENoZWNrIGlmIHRoZSBwYXJhbWV0ZXIgaXMgYSBSYW5neSBTZWxlY3Rpb24gb2JqZWN0DQogICAgICAgIGlmICh3aW4gJiYgd2luIGluc3RhbmNlb2YgV3JhcHBlZFNlbGVjdGlvbikgew0KICAgICAgICAgICAgd2luLnJlZnJlc2goKTsNCiAgICAgICAgICAgIHJldHVybiB3aW47DQogICAgICAgIH0NCg0KICAgICAgICB3aW4gPSBnZXRXaW5kb3cod2luLCAiZ2V0TmF0aXZlU2VsZWN0aW9uIik7DQoNCiAgICAgICAgdmFyIHNlbCA9IGZpbmRDYWNoZWRTZWxlY3Rpb24od2luKTsNCiAgICAgICAgdmFyIG5hdGl2ZVNlbCA9IGdldE5hdGl2ZVNlbGVjdGlvbih3aW4pLCBkb2NTZWwgPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uID8gZ2V0RG9jU2VsZWN0aW9uKHdpbikgOiBudWxsOw0KICAgICAgICBpZiAoc2VsKSB7DQogICAgICAgICAgICBzZWwubmF0aXZlU2VsZWN0aW9uID0gbmF0aXZlU2VsOw0KICAgICAgICAgICAgc2VsLmRvY1NlbGVjdGlvbiA9IGRvY1NlbDsNCiAgICAgICAgICAgIHNlbC5yZWZyZXNoKCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBzZWwgPSBuZXcgV3JhcHBlZFNlbGVjdGlvbihuYXRpdmVTZWwsIGRvY1NlbCwgd2luKTsNCiAgICAgICAgICAgIGNhY2hlZFJhbmd5U2VsZWN0aW9ucy5wdXNoKCB7IHdpbjogd2luLCBzZWxlY3Rpb246IHNlbCB9ICk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHNlbDsNCiAgICB9Ow0KDQogICAgYXBpLmdldFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbjsNCg0KICAgIGFwaS5nZXRJZnJhbWVTZWxlY3Rpb24gPSBmdW5jdGlvbihpZnJhbWVFbCkgew0KICAgICAgICBtb2R1bGUuZGVwcmVjYXRpb25Ob3RpY2UoImdldElmcmFtZVNlbGVjdGlvbigpIiwgImdldFNlbGVjdGlvbihpZnJhbWVFbCkiKTsNCiAgICAgICAgcmV0dXJuIGFwaS5nZXRTZWxlY3Rpb24oZG9tLmdldElmcmFtZVdpbmRvdyhpZnJhbWVFbCkpOw0KICAgIH07DQoNCiAgICB2YXIgc2VsUHJvdG8gPSBXcmFwcGVkU2VsZWN0aW9uLnByb3RvdHlwZTsNCg0KICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsLCByYW5nZXMpIHsNCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIHNlbGVjdGlvbiBiZWNvbWVzIG9mIHR5cGUgIkNvbnRyb2wiDQogICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudChyYW5nZXNbMF0uc3RhcnRDb250YWluZXIpOw0KICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpOw0KICAgICAgICBmb3IgKHZhciBpID0gMCwgZWw7IGkgPCByYW5nZUNvdW50OyArK2kpIHsNCiAgICAgICAgICAgIGVsID0gZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZShyYW5nZXNbaV0pOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBjb250cm9sUmFuZ2UuYWRkKGVsKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJzZXRSYW5nZXMoKTogRWxlbWVudCB3aXRoaW4gdGhlIG9uZSBvZiB0aGUgc3BlY2lmaWVkIFJhbmdlcyBjb3VsZCBub3QgYmUgYWRkZWQgdG8gY29udHJvbCBzZWxlY3Rpb24gKGRvZXMgaXQgaGF2ZSBsYXlvdXQ/KSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNvbnRyb2xSYW5nZS5zZWxlY3QoKTsNCg0KICAgICAgICAvLyBVcA==ZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7DQogICAgfQ0KDQogICAgLy8gU2VsZWN0aW5nIGEgcmFuZ2UNCiAgICBpZiAoIXVzZURvY3VtZW50U2VsZWN0aW9uICYmIHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzICYmIHV0aWwuYXJlSG9zdE1ldGhvZHModGVzdFNlbGVjdGlvbiwgWyJyZW1vdmVBbGxSYW5nZXMiLCAiYWRkUmFuZ2UiXSkpIHsNCiAgICAgICAgc2VsUHJvdG8ucmVtb3ZlQWxsUmFuZ2VzID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHRoaXMpOw0KICAgICAgICB9Ow0KDQogICAgICAgIHZhciBhZGRSYW5nZUJhY2t3YXJkID0gZnVuY3Rpb24oc2VsLCByYW5nZSkgew0KICAgICAgICAgICAgdmFyIGRvYyA9IERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpOw0KICAgICAgICAgICAgdmFyIGVuZFJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7DQogICAgICAgICAgICBlbmRSYW5nZS5jb2xsYXBzZVRvUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOw0KICAgICAgICAgICAgc2VsLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShlbmRSYW5nZSkpOw0KICAgICAgICAgICAgc2VsLm5hdGl2ZVNlbGVjdGlvbi5leHRlbmQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTsNCiAgICAgICAgICAgIHNlbC5yZWZyZXNoKCk7DQogICAgICAgIH07DQoNCiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc1JhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UsIGRpcmVjdGlvbikgew0KICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgdGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNEaXJlY3Rpb25CYWNrd2FyZChkaXJlY3Rpb24pICYmIHNlbGVjdGlvbkhhc0V4dGVuZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZCh0aGlzLCByYW5nZSk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNSYW5nZUNvdW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1JhbmdlQ291bnQgPSB0aGlzLnJhbmdlQ291bnQ7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSYW5nZUNvdW50ID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBuYXRpdmUgcmFuZ2Ugc28gdGhhdCBjaGFuZ2luZyB0aGUgc2VsZWN0ZWQgcmFuZ2UgZG9lcyBub3QgYWZmZWN0IHRoZSBzZWxlY3Rpb24uDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGNvbnRyYXJ5IHRvIHRoZSBzcGVjIGJ1dCBpcyB0aGUgb25seSB3YXkgdG8gYWNoaWV2ZSBjb25zaXN0ZW5jeSBiZXR3ZWVuIGJyb3dzZXJzLiBTZWUNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlIDgwLg0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVTZWxlY3Rpb24uYWRkUmFuZ2UoZ2V0TmF0aXZlUmFuZ2UocmFuZ2UpLmNsb25lUmFuZ2UoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgYWRkaW5nIHRoZSByYW5nZSB3YXMgc3VjY2Vzc2Z1bA0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZUNvdW50ID0gdGhpcy5uYXRpdmVTZWxlY3Rpb24ucmFuZ2VDb3VudDsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCA9PSBwcmV2aW91c1JhbmdlQ291bnQgKyAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJhbmdlIHdhcyBhZGRlZCBzdWNjZXNzZnVsbHkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIHJhbmdlIHRoYXQgd2UgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbiBpcyByZWZsZWN0ZWQgaW4gdGhlIGxhc3QgcmFuZ2UgZXh0cmFjdGVkIGZyb20NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VsZWN0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwaS5jb25maWcuY2hlY2tTZWxlY3Rpb25SYW5nZXMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVJhbmdlID0gZ2V0U2VsZWN0aW9uUmFuZ2VBdCh0aGlzLm5hdGl2ZVNlbGVjdGlvbiwgdGhpcy5yYW5nZUNvdW50IC0gMSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXRpdmVSYW5nZSAmJiAhcmFuZ2VzRXF1YWwobmF0aXZlUmFuZ2UsIHJhbmdlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFwcGVucyBpbiBXZWJLaXQgd2l0aCwgZm9yIGV4YW1wbGUsIGEgc2VsZWN0aW9uIHBsYWNlZCBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0IG5vZGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gbmV3IFdyYXBwZWRSYW5nZShuYXRpdmVSYW5nZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudCAtIDFdID0gcmFuZ2U7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2UodGhpcywgcmFuZ2UsIHNlbGVjdGlvbklzQmFja3dhcmQodGhpcy5uYXRpdmVTZWxlY3Rpb24pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29sbGFwc2VkID0gc2VsZWN0aW9uSXNDb2xsYXBzZWQodGhpcyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYW5nZSB3YXMgbm90IGFkZGVkIHN1Y2Nlc3NmdWxseS4gVGhlIHNpbXBsZXN0IHRoaW5nIGlzIHRvIHJlZnJlc2gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBzZWxQcm90by5hZGRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlLCBkaXJlY3Rpb24pIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNEaXJlY3Rpb25CYWNrd2FyZChkaXJlY3Rpb24pICYmIHNlbGVjdGlvbkhhc0V4dGVuZCkgew0KICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZUJhY2t3YXJkKHRoaXMsIHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShyYW5nZSkpOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQoNCiAgICAgICAgc2VsUHJvdG8uc2V0UmFuZ2VzID0gZnVuY3Rpb24ocmFuZ2VzKSB7DQogICAgICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiByYW5nZXMubGVuZ3RoID4gMQ==KSB7DQogICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbaV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICB9IGVsc2UgaWYgKGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCAiZW1wdHkiKSAmJiBpc0hvc3RNZXRob2QodGVzdFJhbmdlLCAic2VsZWN0IikgJiYNCiAgICAgICAgICAgICAgIGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgdXNlRG9jdW1lbnRTZWxlY3Rpb24pIHsNCg0KICAgICAgICBzZWxQcm90by5yZW1vdmVBbGxSYW5nZXMgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIC8vIEFkZGVkIHRyeS9jYXRjaCBhcyBmaXggZm9yIGlzc3VlICMyMQ0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpOw0KDQogICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGVtcHR5KCkgbm90IHdvcmtpbmcgKGlzc3VlICMyNCkNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2NTZWxlY3Rpb24udHlwZSAhPSAiTm9uZSIpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gV29yayBhcm91bmQgZmFpbHVyZSB0byBlbXB0eSBhIGNvbnRyb2wgc2VsZWN0aW9uIGJ5IGluc3RlYWQgc2VsZWN0aW5nIGEgVGV4dFJhbmdlIGFuZCB0aGVuDQogICAgICAgICAgICAgICAgICAgIC8vIGNhbGxpbmcgZW1wdHkoKQ0KICAgICAgICAgICAgICAgICAgICB2YXIgZG9jOw0KICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbmNob3JOb2RlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSBnZXREb2N1bWVudCh0aGlzLmFuY2hvck5vZGUpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJhbmdlLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldERvY3VtZW50KCBjb250cm9sUmFuZ2UuaXRlbSgwKSApOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChkb2MpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0UmFuZ2UgPSBnZXRCb2R5KGRvYykuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UmFuZ2Uuc2VsZWN0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaChleCkge30NCiAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHRoaXMpOw0KICAgICAgICB9Ow0KDQogICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgICAgICAgIGlmICh0aGlzLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHsNCiAgICAgICAgICAgICAgICBhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyYXBwZWRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlKHJhbmdlKS5zZWxlY3QoKTsNCiAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZXNbMF0gPSByYW5nZTsNCiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlQ291bnQgPSAxOw0KICAgICAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0aGlzLl9yYW5nZXNbMF0uY29sbGFwc2VkOw0KICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHRoaXMsIHJhbmdlLCBmYWxzZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQoNCiAgICAgICAgc2VsUHJvdG8uc2V0UmFuZ2VzID0gZnVuY3Rpb24ocmFuZ2VzKSB7DQogICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgdmFyIHJhbmdlQ291bnQgPSByYW5nZXMubGVuZ3RoOw0KICAgICAgICAgICAgaWYgKHJhbmdlQ291bnQgPiAxKSB7DQogICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5nZUNvdW50KSB7DQogICAgICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbMF0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJObyBtZWFucyBvZiBzZWxlY3RpbmcgYSBSYW5nZSBvciBUZXh0UmFuZ2Ugd2FzIGZvdW5kIik7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICBzZWxQcm90by5nZXRSYW5nZUF0ID0gZnVuY3Rpb24oaW5kZXgpIHsNCiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIklOREVYX1NJWkVfRVJSIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBDbG9uZSB0aGUgcmFuZ2UgdG8gcHJlc2VydmUgc2VsZWN0aW9uLXJhbmdlIGluZGVwZW5kZW5jZS4gU2VlIGlzc3VlIDgwLg0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbmdlc1tpbmRleF0uY2xvbmVSYW5nZSgpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHZhciByZWZyZXNoU2VsZWN0aW9uOw0KDQogICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7DQogICAgICAgIHJlZnJlc2hTZWxlY3Rpb24gPSBmdW5jdGlvbihzZWwpIHsNCiAgICAgICAgICAgIHZhciByYW5nZTsNCiAgICAgICAgICAgIGlmIChhcGkuaXNTZWxlY3Rpb25WYWxpZChzZWwud2luKSkgew0KICAgICAgICAgICAgICAgIHJhbmdlID0gc2VsLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByYW5nZSA9IGdldEJvZHkoc2VsLndpbi5kb2N1bWVudCkuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUZXh0UmFuZ2UocmFuZ2UpKSB7DQogICAgICAgICAgICAgICAgdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICB9IGVsc2UgaWYgKGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCAiZ2V0UmFuZ2VBdCIpICYmIHR5cGVvZiB0ZXN0U2VsZWN0aW9uLnJhbmdlQ291bnQgPT0gIm51bWJlciIpIHsNCiAgICAgICAgcmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgaWYgKGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgaW1wbGVtZW50c0RvY1NlbGVjdGlvbiAmJiBzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gc2VsLnJhbmdlQ291bnQgPSBzZWwubmF0aXZlU2VsZWN0aW9uLnJhbmdlQ291bnQ7DQogICAgICAgICAgICAgICAgaWYgKHNlbC5yYW5nZUNvdW50KSB7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIA==aSA9IDAsIGxlbiA9IHNlbC5yYW5nZUNvdW50OyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzW2ldID0gbmV3IGFwaS5XcmFwcGVkUmFuZ2Uoc2VsLm5hdGl2ZVNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZShzZWwsIHNlbC5fcmFuZ2VzW3NlbC5yYW5nZUNvdW50IC0gMV0sIHNlbGVjdGlvbklzQmFja3dhcmQoc2VsLm5hdGl2ZVNlbGVjdGlvbikpOw0KICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZChzZWwpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgJiYgdHlwZW9mIHRlc3RTZWxlY3Rpb24uaXNDb2xsYXBzZWQgPT0gQk9PTEVBTiAmJiB0eXBlb2YgdGVzdFJhbmdlLmNvbGxhcHNlZCA9PSBCT09MRUFOICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkgew0KICAgICAgICByZWZyZXNoU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsKSB7DQogICAgICAgICAgICB2YXIgcmFuZ2UsIG5hdGl2ZVNlbCA9IHNlbC5uYXRpdmVTZWxlY3Rpb247DQogICAgICAgICAgICBpZiAobmF0aXZlU2VsLmFuY2hvck5vZGUpIHsNCiAgICAgICAgICAgICAgICByYW5nZSA9IGdldFNlbGVjdGlvblJhbmdlQXQobmF0aXZlU2VsLCAwKTsNCiAgICAgICAgICAgICAgICBzZWwuX3JhbmdlcyA9IFtyYW5nZV07DQogICAgICAgICAgICAgICAgc2VsLnJhbmdlQ291bnQgPSAxOw0KICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbihzZWwpOw0KICAgICAgICAgICAgICAgIHNlbC5pc0NvbGxhcHNlZCA9IHNlbGVjdGlvbklzQ29sbGFwc2VkKHNlbCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIk5vIG1lYW5zIG9mIG9idGFpbmluZyBhIFJhbmdlIG9yIFRleHRSYW5nZSBmcm9tIHRoZSB1c2VyJ3Mgc2VsZWN0aW9uIHdhcyBmb3VuZCIpOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgc2VsUHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uKGNoZWNrRm9yQ2hhbmdlcykgew0KICAgICAgICB2YXIgb2xkUmFuZ2VzID0gY2hlY2tGb3JDaGFuZ2VzID8gdGhpcy5fcmFuZ2VzLnNsaWNlKDApIDogbnVsbDsNCiAgICAgICAgdmFyIG9sZEFuY2hvck5vZGUgPSB0aGlzLmFuY2hvck5vZGUsIG9sZEFuY2hvck9mZnNldCA9IHRoaXMuYW5jaG9yT2Zmc2V0Ow0KDQogICAgICAgIHJlZnJlc2hTZWxlY3Rpb24odGhpcyk7DQogICAgICAgIGlmIChjaGVja0ZvckNoYW5nZXMpIHsNCiAgICAgICAgICAgIC8vIENoZWNrIHRoZSByYW5nZSBjb3VudCBmaXJzdA0KICAgICAgICAgICAgdmFyIGkgPSBvbGRSYW5nZXMubGVuZ3RoOw0KICAgICAgICAgICAgaWYgKGkgIT0gdGhpcy5fcmFuZ2VzLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBOb3cgY2hlY2sgdGhlIGRpcmVjdGlvbi4gQ2hlY2tpbmcgdGhlIGFuY2hvciBwb3NpdGlvbiBpcyB0aGUgc2FtZSBpcyBlbm91Z2ggc2luY2Ugd2UncmUgY2hlY2tpbmcgYWxsIHRoZQ0KICAgICAgICAgICAgLy8gcmFuZ2VzIGFmdGVyIHRoaXMNCiAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvck5vZGUgIT0gb2xkQW5jaG9yTm9kZSB8fCB0aGlzLmFuY2hvck9mZnNldCAhPSBvbGRBbmNob3JPZmZzZXQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gRmluYWxseSwgY29tcGFyZSBlYWNoIHJhbmdlIGluIHR1cm4NCiAgICAgICAgICAgIHdoaWxlIChpLS0pIHsNCiAgICAgICAgICAgICAgICBpZiAoIXJhbmdlc0VxdWFsKG9sZFJhbmdlc1tpXSwgdGhpcy5fcmFuZ2VzW2ldKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgLy8gUmVtb3ZhbCBvZiBhIHNpbmdsZSByYW5nZQ0KICAgIHZhciByZW1vdmVSYW5nZU1hbnVhbGx5ID0gZnVuY3Rpb24oc2VsLCByYW5nZSkgew0KICAgICAgICB2YXIgcmFuZ2VzID0gc2VsLmdldEFsbFJhbmdlcygpOw0KICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmICghYXBpLnJhbmdlc0VxdWFsKHJhbmdlLCByYW5nZXNbaV0pKSB7DQogICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlc1tpXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFzZWwucmFuZ2VDb3VudCkgew0KICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSkgew0KICAgICAgICBzZWxQcm90by5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICBpZiAodGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICAgICAgdmFyIHJhbmdlRWxlbWVudCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2UpOw0KDQogICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IENvbnRyb2xSYW5nZSBjb250YWluaW5nIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIHNlbGVjdGVkIENvbnRyb2xSYW5nZSBtaW51cyB0aGUNCiAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGNvbnRhaW5lZCBieSB0aGUgc3VwcGxpZWQgcmFuZ2UNCiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpOw0KICAgICAgICAgICAgICAgIHZhciBuZXdDb250cm9sUmFuZ2UgPSBnZXRCb2R5KGRvYykuY3JlYXRlQ29udHJvbFJhbmdlKCk7DQogICAgICAgICAgICAgICAgdmFyIGVsLCByZW1vdmVkID0gZmFsc2U7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgICAgICAgICBlbCA9IGNvbnRyb2xSYW5nZS5pdGVtKGkpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZWwgIT09IHJhbmdlRWxlbWVudCB8fCByZW1vdmVkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xSYW5nZS5zZWxlY3QoKTsNCg0KICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24odGhpcyk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJlbW92ZVJhbmdlTWFudWFsbHkodGhpcywgcmFuZ2UpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIHNlbFByb3RvLnJlbW92ZVJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgIA==ICAgICAgcmVtb3ZlUmFuZ2VNYW51YWxseSh0aGlzLCByYW5nZSk7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgLy8gRGV0ZWN0aW5nIGlmIGEgc2VsZWN0aW9uIGlzIGJhY2t3YXJkDQogICAgdmFyIHNlbGVjdGlvbklzQmFja3dhcmQ7DQogICAgaWYgKCF1c2VEb2N1bWVudFNlbGVjdGlvbiAmJiBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyAmJiBmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UpIHsNCiAgICAgICAgc2VsZWN0aW9uSXNCYWNrd2FyZCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgdmFyIGJhY2t3YXJkID0gZmFsc2U7DQogICAgICAgICAgICBpZiAoc2VsLmFuY2hvck5vZGUpIHsNCiAgICAgICAgICAgICAgICBiYWNrd2FyZCA9IChkb20uY29tcGFyZVBvaW50cyhzZWwuYW5jaG9yTm9kZSwgc2VsLmFuY2hvck9mZnNldCwgc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KSA9PSAxKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBiYWNrd2FyZDsNCiAgICAgICAgfTsNCg0KICAgICAgICBzZWxQcm90by5pc0JhY2t3YXJkID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uSXNCYWNrd2FyZCh0aGlzKTsNCiAgICAgICAgfTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBzZWxlY3Rpb25Jc0JhY2t3YXJkID0gc2VsUHJvdG8uaXNCYWNrd2FyZCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9Ow0KICAgIH0NCg0KICAgIC8vIENyZWF0ZSBhbiBhbGlhcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEZyb20gMS4zLCBldmVyeXRoaW5nIGlzICJiYWNrd2FyZCIgcmF0aGVyIHRoYW4gImJhY2t3YXJkcyINCiAgICBzZWxQcm90by5pc0JhY2t3YXJkcyA9IHNlbFByb3RvLmlzQmFja3dhcmQ7DQoNCiAgICAvLyBTZWxlY3Rpb24gc3RyaW5naWZpZXINCiAgICAvLyBUaGlzIGlzIGNvbmZvcm1hbnQgdG8gdGhlIG9sZCBIVE1MNSBzZWxlY3Rpb25zIGRyYWZ0IHNwZWMgYnV0IGRpZmZlcnMgZnJvbSBXZWJLaXQgYW5kIE1vemlsbGEncyBpbXBsZW1lbnRhdGlvbi4NCiAgICAvLyBUaGUgY3VycmVudCBzcGVjIGRvZXMgbm90IHlldCBkZWZpbmUgdGhpcyBtZXRob2QuDQogICAgc2VsUHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgdmFyIHJhbmdlVGV4dHMgPSBbXTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICByYW5nZVRleHRzW2ldID0gIiIgKyB0aGlzLl9yYW5nZXNbaV07DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHJhbmdlVGV4dHMuam9pbigiIik7DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVJblNhbWVEb2N1bWVudChzZWwsIG5vZGUpIHsNCiAgICAgICAgaWYgKHNlbC53aW4uZG9jdW1lbnQgIT0gZ2V0RG9jdW1lbnQobm9kZSkpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIldST05HX0RPQ1VNRU5UX0VSUiIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gTm8gY3VycmVudCBicm93c2VyIGNvbmZvcm1zIGZ1bGx5IHRvIHRoZSBzcGVjIGZvciB0aGlzIG1ldGhvZCwgc28gUmFuZ3kncyBvd24gbWV0aG9kIGlzIGFsd2F5cyB1c2VkDQogICAgc2VsUHJvdG8uY29sbGFwc2UgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50KHRoaXMsIG5vZGUpOw0KICAgICAgICB2YXIgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2Uobm9kZSk7DQogICAgICAgIHJhbmdlLmNvbGxhcHNlVG9Qb2ludChub2RlLCBvZmZzZXQpOw0KICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlKTsNCiAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmNvbGxhcHNlVG9TdGFydCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICBpZiAodGhpcy5yYW5nZUNvdW50KSB7DQogICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLl9yYW5nZXNbMF07DQogICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTlZBTElEX1NUQVRFX0VSUiIpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmNvbGxhcHNlVG9FbmQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCkgew0KICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudCAtIDFdOw0KICAgICAgICAgICAgdGhpcy5jb2xsYXBzZShyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTlZBTElEX1NUQVRFX0VSUiIpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8vIFRoZSBzcGVjIGlzIHZlcnkgc3BlY2lmaWMgb24gaG93IHNlbGVjdEFsbENoaWxkcmVuIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBzbyB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzDQogICAgLy8gbmV2ZXIgdXNlZCBieSBSYW5neS4NCiAgICBzZWxQcm90by5zZWxlY3RBbGxDaGlsZHJlbiA9IGZ1bmN0aW9uKG5vZGUpIHsNCiAgICAgICAgYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50KHRoaXMsIG5vZGUpOw0KICAgICAgICB2YXIgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2Uobm9kZSk7DQogICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTsNCiAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZSk7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmRlbGV0ZUZyb21Eb2N1bWVudCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAvLyBTZXBjaWFsIGJlaGF2aW91ciByZXF1aXJlZCBmb3IgQ29udHJvbCBzZWxlY3Rpb25zDQogICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgdGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gdGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTsNCiAgICAgICAgICAgIHZhciBlbGVtZW50Ow0KICAgICAgICAgICAgd2hpbGUgKGNvbnRyb2xSYW5nZS5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICBlbGVtZW50ID0gY29udHJvbFJhbmdlLml0ZW0oMCk7DQogICAgICAgICAgICAgICAgY29udHJvbFJhbmdlLnJlbW92ZShlbGVtZW50KTsNCiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmdldEFsbFJhbmdlcygpOw0KICAgICAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzW2ldLmRlbGV0ZUNvbnRlbnRzKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vIFRoZSBzcGVjIHNheXMgbm90aGluZyBhYm91dCB3aGF0IHRoZSBzZWxlY3Rpb24gc2hvdWxkIGNvbnRhaW4gYWZ0ZXIgY2FsbGluZyBkZWxldGVDb250ZW50cyBvbiBlYWNoDQogICAgICAgICAgICAgICAgLy8gcmFuZ2UuIEZpcmVmb3ggbW92ZXMgdGhlIHNlbGVjdGlvbiB0byB3aGVyZSB0aGUgZmluYWwgc2VsZWN0ZWQgcmFuZ2Ugd2FzLCBzbyB3ZSBlbXVsYXRlIHRoYXQNCiAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1tsZW4gLSAxXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgLy8gVGhlIGZvbGxvd2luZyBhcg==ZSBub24tc3RhbmRhcmQgZXh0ZW5zaW9ucw0KICAgIHNlbFByb3RvLmVhY2hSYW5nZSA9IGZ1bmN0aW9uKGZ1bmMsIHJldHVyblZhbHVlKSB7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9yYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmICggZnVuYyggdGhpcy5nZXRSYW5nZUF0KGkpICkgKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmdldEFsbFJhbmdlcyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICB2YXIgcmFuZ2VzID0gW107DQogICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZSk7DQogICAgICAgIH0pOw0KICAgICAgICByZXR1cm4gcmFuZ2VzOw0KICAgIH07DQoNCiAgICBzZWxQcm90by5zZXRTaW5nbGVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlLCBkaXJlY3Rpb24pIHsNCiAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZSwgZGlyZWN0aW9uKTsNCiAgICB9Ow0KDQogICAgc2VsUHJvdG8uY2FsbE1ldGhvZE9uRWFjaFJhbmdlID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgcGFyYW1zKSB7DQogICAgICAgIHZhciByZXN1bHRzID0gW107DQogICAgICAgIHRoaXMuZWFjaFJhbmdlKCBmdW5jdGlvbihyYW5nZSkgew0KICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCByYW5nZVttZXRob2ROYW1lXS5hcHBseShyYW5nZSwgcGFyYW1zKSApOw0KICAgICAgICB9ICk7DQogICAgICAgIHJldHVybiByZXN1bHRzOw0KICAgIH07DQogICAgDQogICAgZnVuY3Rpb24gY3JlYXRlU3RhcnRPckVuZFNldHRlcihpc1N0YXJ0KSB7DQogICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgICAgIHZhciByYW5nZTsNCiAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VBdCgwKTsNCiAgICAgICAgICAgICAgICByYW5nZVsic2V0IiArIChpc1N0YXJ0ID8gIlN0YXJ0IiA6ICJFbmQiKV0obm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UodGhpcy53aW4uZG9jdW1lbnQpOw0KICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlLCB0aGlzLmlzQmFja3dhcmQoKSk7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgc2VsUHJvdG8uc2V0U3RhcnQgPSBjcmVhdGVTdGFydE9yRW5kU2V0dGVyKHRydWUpOw0KICAgIHNlbFByb3RvLnNldEVuZCA9IGNyZWF0ZVN0YXJ0T3JFbmRTZXR0ZXIoZmFsc2UpOw0KICAgIA0KICAgIC8vIEFkZCBjaGVla3kgc2VsZWN0KCkgbWV0aG9kIHRvIFJhbmdlIHByb3RvdHlwZQ0KICAgIGFwaS5yYW5nZVByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHsNCiAgICAgICAgZ2V0U2VsZWN0aW9uKCB0aGlzLmdldERvY3VtZW50KCkgKS5zZXRTaW5nbGVSYW5nZSh0aGlzLCBkaXJlY3Rpb24pOw0KICAgIH07DQoNCiAgICBzZWxQcm90by5jaGFuZ2VFYWNoUmFuZ2UgPSBmdW5jdGlvbihmdW5jKSB7DQogICAgICAgIHZhciByYW5nZXMgPSBbXTsNCiAgICAgICAgdmFyIGJhY2t3YXJkID0gdGhpcy5pc0JhY2t3YXJkKCk7DQoNCiAgICAgICAgdGhpcy5lYWNoUmFuZ2UoZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgICAgICAgIGZ1bmMocmFuZ2UpOw0KICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpOw0KICAgICAgICB9KTsNCg0KICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICBpZiAoYmFja3dhcmQgJiYgcmFuZ2VzLmxlbmd0aCA9PSAxKSB7DQogICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1swXSwgImJhY2t3YXJkIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aGlzLnNldFJhbmdlcyhyYW5nZXMpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmNvbnRhaW5zTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIGFsbG93UGFydGlhbCkgew0KICAgICAgICByZXR1cm4gdGhpcy5lYWNoUmFuZ2UoIGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICByZXR1cm4gcmFuZ2UuY29udGFpbnNOb2RlKG5vZGUsIGFsbG93UGFydGlhbCk7DQogICAgICAgIH0sIHRydWUgKTsNCiAgICB9Ow0KDQogICAgc2VsUHJvdG8uZ2V0Qm9va21hcmsgPSBmdW5jdGlvbihjb250YWluZXJOb2RlKSB7DQogICAgICAgIHJldHVybiB7DQogICAgICAgICAgICBiYWNrd2FyZDogdGhpcy5pc0JhY2t3YXJkKCksDQogICAgICAgICAgICByYW5nZUJvb2ttYXJrczogdGhpcy5jYWxsTWV0aG9kT25FYWNoUmFuZ2UoImdldEJvb2ttYXJrIiwgW2NvbnRhaW5lck5vZGVdKQ0KICAgICAgICB9Ow0KICAgIH07DQoNCiAgICBzZWxQcm90by5tb3ZlVG9Cb29rbWFyayA9IGZ1bmN0aW9uKGJvb2ttYXJrKSB7DQogICAgICAgIHZhciBzZWxSYW5nZXMgPSBbXTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHJhbmdlQm9va21hcmssIHJhbmdlOyByYW5nZUJvb2ttYXJrID0gYm9va21hcmsucmFuZ2VCb29rbWFya3NbaSsrXTsgKSB7DQogICAgICAgICAgICByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZSh0aGlzLndpbik7DQogICAgICAgICAgICByYW5nZS5tb3ZlVG9Cb29rbWFyayhyYW5nZUJvb2ttYXJrKTsNCiAgICAgICAgICAgIHNlbFJhbmdlcy5wdXNoKHJhbmdlKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoYm9va21hcmsuYmFja3dhcmQpIHsNCiAgICAgICAgICAgIHRoaXMuc2V0U2luZ2xlUmFuZ2Uoc2VsUmFuZ2VzWzBdLCAiYmFja3dhcmQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2VzKHNlbFJhbmdlcyk7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgc2VsUHJvdG8udG9IdG1sID0gZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2RPbkVhY2hSYW5nZSgidG9IdG1sIikuam9pbigiIik7DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGluc3BlY3Qoc2VsKSB7DQogICAgICAgIHZhciByYW5nZUluc3BlY3RzID0gW107DQogICAgICAgIHZhciBhbmNob3IgPSBuZXcgRG9tUG9zaXRpb24oc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpOw0KICAgICAgICB2YXIgZm9jdXMgPSBuZXcgRG9tUG9zaXRpb24oc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KTsNCiAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHNlbC5nZXROYW1lID09ICJmdW5jdGlvbiIpID8gc2VsLmdldE5hbWUoKSA6ICJTZWxlY3Rpb24iOw0KDQogICAgICAgIGlmICh0eXBlb2Ygc2VsLnJhbmdlQ291bnQgIT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWwucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICAgICAgcmFuZ2VJbnNwZWN0c1tpXSA9IERvbVJhbmdlLmluc3BlY3Qoc2VsLmdldFJhbmdlQXQoaSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiAiWyIgKyBuYW1lICsgIihSYW5nZXM6ICIgKyByYW5nZUluc3BlY3RzLmpvaW4oIiwgIikgKw0KICAgICAgICAgICAgICAgICIpKGFuY2hvcjogIiArIGFuY2hvci5pbnNwZWN0KCkgKyAiLCBmb2N1czogIiArIGZvY3VzLmluc3BlY3QoKSArICJdIjsNCiAgICB9DQoNCiAgICBzZWxQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiAiV3JhcHBlZFNlbGVjdGlvbiI7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmluc3BlY3QgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmRldGFjaCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICBmaW5kQ2FjaGVkU2VsZWN0aW9uKHRoaXMud2luLCAiZGVsZXRlIik7DQogICAgICAgIGRlbGV0ZVBybw==cGVydGllcyh0aGlzKTsNCiAgICB9Ow0KDQogICAgV3JhcHBlZFNlbGVjdGlvbi5kZXRhY2hBbGwgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgZmluZENhY2hlZFNlbGVjdGlvbihudWxsLCAiZGVsZXRlQWxsIik7DQogICAgfTsNCg0KICAgIFdyYXBwZWRTZWxlY3Rpb24uaW5zcGVjdCA9IGluc3BlY3Q7DQogICAgV3JhcHBlZFNlbGVjdGlvbi5pc0RpcmVjdGlvbkJhY2t3YXJkID0gaXNEaXJlY3Rpb25CYWNrd2FyZDsNCg0KICAgIGFwaS5TZWxlY3Rpb24gPSBXcmFwcGVkU2VsZWN0aW9uOw0KDQogICAgYXBpLnNlbGVjdGlvblByb3RvdHlwZSA9IHNlbFByb3RvOw0KDQogICAgYXBpLmFkZENyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcihmdW5jdGlvbih3aW4pIHsNCiAgICAgICAgaWYgKHR5cGVvZiB3aW4uZ2V0U2VsZWN0aW9uID09ICJ1bmRlZmluZWQiKSB7DQogICAgICAgICAgICB3aW4uZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGdldFNlbGVjdGlvbih3aW4pOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KICAgICAgICB3aW4gPSBudWxsOw0KICAgIH0pOw0KfSk7DQo=</content>
    <filesize>143947</filesize>
  </attachment>
  <attachment>
    <filename>rangy-core.js</filename>
    <author>XWiki.Admin</author>
    <date>1372256905000</date>
    <version>1.1</version>
    <comment/>
    <content>LyoqDQogKiBSYW5neSwgYSBjcm9zcy1icm93c2VyIEphdmFTY3JpcHQgcmFuZ2UgYW5kIHNlbGVjdGlvbiBsaWJyYXJ5DQogKiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvcmFuZ3kvDQogKg0KICogQ29weXJpZ2h0IDIwMTMsIFRpbSBEb3duDQogKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuDQogKiBWZXJzaW9uOiAxLjNhbHBoYS43NzINCiAqIEJ1aWxkIGRhdGU6IDI2IEZlYnJ1YXJ5IDIwMTMNCiAqLw0KDQp2YXIgcmFuZ3k7DQpyYW5neSA9IHJhbmd5IHx8IChmdW5jdGlvbigpIHsNCg0KICAgIHZhciBPQkpFQ1QgPSAib2JqZWN0IiwgRlVOQ1RJT04gPSAiZnVuY3Rpb24iLCBVTkRFRklORUQgPSAidW5kZWZpbmVkIjsNCg0KICAgIC8vIE1pbmltYWwgc2V0IG9mIHByb3BlcnRpZXMgcmVxdWlyZWQgZm9yIERPTSBMZXZlbCAyIFJhbmdlIGNvbXBsaWFuY2UuIENvbXBhcmlzb24gY29uc3RhbnRzIHN1Y2ggYXMgU1RBUlRfVE9fU1RBUlQNCiAgICAvLyBhcmUgb21pdHRlZCBiZWNhdXNlIHJhbmdlcyBpbiBLSFRNTCBkbyBub3QgaGF2ZSB0aGVtIGJ1dCBvdGhlcndpc2Ugd29yayBwZXJmZWN0bHkgd2VsbC4gU2VlIGlzc3VlIDExMy4NCiAgICB2YXIgZG9tUmFuZ2VQcm9wZXJ0aWVzID0gWyJzdGFydENvbnRhaW5lciIsICJzdGFydE9mZnNldCIsICJlbmRDb250YWluZXIiLCAiZW5kT2Zmc2V0IiwgImNvbGxhcHNlZCIsDQogICAgICAgICJjb21tb25BbmNlc3RvckNvbnRhaW5lciJdOw0KDQogICAgLy8gTWluaW1hbCBzZXQgb2YgbWV0aG9kcyByZXF1aXJlZCBmb3IgRE9NIExldmVsIDIgUmFuZ2UgY29tcGxpYW5jZQ0KICAgIHZhciBkb21SYW5nZU1ldGhvZHMgPSBbInNldFN0YXJ0IiwgInNldFN0YXJ0QmVmb3JlIiwgInNldFN0YXJ0QWZ0ZXIiLCAic2V0RW5kIiwgInNldEVuZEJlZm9yZSIsDQogICAgICAgICJzZXRFbmRBZnRlciIsICJjb2xsYXBzZSIsICJzZWxlY3ROb2RlIiwgInNlbGVjdE5vZGVDb250ZW50cyIsICJjb21wYXJlQm91bmRhcnlQb2ludHMiLCAiZGVsZXRlQ29udGVudHMiLA0KICAgICAgICAiZXh0cmFjdENvbnRlbnRzIiwgImNsb25lQ29udGVudHMiLCAiaW5zZXJ0Tm9kZSIsICJzdXJyb3VuZENvbnRlbnRzIiwgImNsb25lUmFuZ2UiLCAidG9TdHJpbmciLCAiZGV0YWNoIl07DQoNCiAgICB2YXIgdGV4dFJhbmdlUHJvcGVydGllcyA9IFsiYm91bmRpbmdIZWlnaHQiLCAiYm91bmRpbmdMZWZ0IiwgImJvdW5kaW5nVG9wIiwgImJvdW5kaW5nV2lkdGgiLCAiaHRtbFRleHQiLCAidGV4dCJdOw0KDQogICAgLy8gU3Vic2V0IG9mIFRleHRSYW5nZSdzIGZ1bGwgc2V0IG9mIG1ldGhvZHMgdGhhdCB3ZSdyZSBpbnRlcmVzdGVkIGluDQogICAgdmFyIHRleHRSYW5nZU1ldGhvZHMgPSBbImNvbGxhcHNlIiwgImNvbXBhcmVFbmRQb2ludHMiLCAiZHVwbGljYXRlIiwgIm1vdmVUb0VsZW1lbnRUZXh0IiwgInBhcmVudEVsZW1lbnQiLCAic2VsZWN0IiwNCiAgICAgICAgInNldEVuZFBvaW50IiwgImdldEJvdW5kaW5nQ2xpZW50UmVjdCJdOw0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIC8vIFRyaW8gb2YgZnVuY3Rpb25zIHRha2VuIGZyb20gUGV0ZXIgTWljaGF1eCdzIGFydGljbGU6DQogICAgLy8gaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvZmVhdHVyZS1kZXRlY3Rpb24tc3RhdGUtb2YtdGhlLWFydC1icm93c2VyLXNjcmlwdGluZw0KICAgIGZ1bmN0aW9uIGlzSG9zdE1ldGhvZChvLCBwKSB7DQogICAgICAgIHZhciB0ID0gdHlwZW9mIG9bcF07DQogICAgICAgIHJldHVybiB0ID09IEZVTkNUSU9OIHx8ICghISh0ID09IE9CSkVDVCAmJiBvW3BdKSkgfHwgdCA9PSAidW5rbm93biI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaXNIb3N0T2JqZWN0KG8sIHApIHsNCiAgICAgICAgcmV0dXJuICEhKHR5cGVvZiBvW3BdID09IE9CSkVDVCAmJiBvW3BdKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc0hvc3RQcm9wZXJ0eShvLCBwKSB7DQogICAgICAgIHJldHVybiB0eXBlb2Ygb1twXSAhPSBVTkRFRklORUQ7DQogICAgfQ0KDQogICAgLy8gQ3JlYXRlcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHNhdmUgdmVyYm9zZSByZXBlYXRlZCBjYWxscyB0byB0ZXN0cyBmdW5jdGlvbnMNCiAgICBmdW5jdGlvbiBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdCh0ZXN0RnVuYykgew0KICAgICAgICByZXR1cm4gZnVuY3Rpb24obywgcHJvcHMpIHsNCiAgICAgICAgICAgIHZhciBpID0gcHJvcHMubGVuZ3RoOw0KICAgICAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgICAgIGlmICghdGVzdEZ1bmMobywgcHJvcHNbaV0pKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfTsNCiAgICB9DQoNCiAgICAvLyBOZXh0IHRyaW8gb2YgZnVuY3Rpb25zIGFyZSBhIGNvbnZlbmllbmNlIHRvIHNhdmUgdmVyYm9zZSByZXBlYXRlZCBjYWxscyB0byBwcmV2aW91cyB0d28gZnVuY3Rpb25zDQogICAgdmFyIGFyZUhvc3RNZXRob2RzID0gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QoaXNIb3N0TWV0aG9kKTsNCiAgICB2YXIgYXJlSG9zdE9iamVjdHMgPSBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdChpc0hvc3RPYmplY3QpOw0KICAgIHZhciBhcmVIb3N0UHJvcGVydGllcyA9IGNyZWF0ZU11bHRpcGxlUHJvcGVydHlUZXN0KGlzSG9zdFByb3BlcnR5KTsNCg0KICAgIGZ1bmN0aW9uIGlzVGV4dFJhbmdlKHJhbmdlKSB7DQogICAgICAgIHJldHVybiByYW5nZSAmJiBhcmVIb3N0TWV0aG9kcyhyYW5nZSwgdGV4dFJhbmdlTWV0aG9kcykgJiYgYXJlSG9zdFByb3BlcnRpZXMocmFuZ2UsIHRleHRSYW5nZVByb3BlcnRpZXMpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBnZXRCb2R5KGRvYykgew0KICAgICAgICByZXR1cm4gaXNIb3N0T2JqZWN0KGRvYywgImJvZHkiKSA/IGRvYy5ib2R5IDogZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07DQogICAgfQ0KDQogICAgdmFyIG1vZHVsZXMgPSB7fTsNCiAgICANCiAgICB2YXIgYXBpID0gew0KICAgICAgICB2ZXJzaW9uOiAiMS4zYWxwaGEuNzcyIiwNCiAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLA0KICAgICAgICBzdXBwb3J0ZWQ6IHRydWUsDQoNCiAgICAgICAgdXRpbDogew0KICAgICAgICAgICAgaXNIb3N0TWV0aG9kOiBpc0hvc3RNZXRob2QsDQogICAgICAgICAgICBpc0hvc3RPYmplY3Q6IGlzSG9zdE9iamVjdCwNCiAgICAgICAgICAgIGlzSG9zdFByb3BlcnR5OiBpc0hvc3RQcm9wZXJ0eSwNCiAgICAgICAgICAgIGFyZUhvc3RNZXRob2RzOiBhcmVIb3N0TWV0aG9kcywNCiAgICAgICAgICAgIGFyZUhvc3RPYmplY3RzOiBhcmVIb3N0T2JqZWN0cywNCiAgICAgICAgICAgIGFyZUhvc3RQcm9wZXJ0aWVzOiBhcmVIb3N0UHJvcGVydGllcywNCiAgICAgICAgICAgIGlzVGV4dFJhbmdlOiBpc1RleHRSYW5nZSwNCiAgICAgICAgICAgIGdldEJvZHk6IGdldEJvZHkNCiAgICAgICAgfSwNCg0KICAgICAgICBmZWF0dXJlczoge30sDQoNCiAgICAgICAgbW9kdWxlczogbW9kdWxlcywNCiAgICAgICAgY29uZmlnOiB7DQogICAgICAgICAgICBhbGVydE9uRmFpbDogdHJ1ZSwNCiAgICAgICAgICAgIGFsZXJ0T25XYXJuOiBmYWxzZSwNCiAgICAgICAgICAgIHByZWZlclRleHRSYW5nZTogZmFsc2UNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKG1zZykgew0KICAgICAgICBpZiAoaXNIb3N0T2JqZWN0KHdpbmRvdywgImNvbnNvbGUiKSAmJiBpc0hvc3RNZXRob2Qod2luZG93LmNvbnNvbGUsICJsb2ciKSkgew0KICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKG1zZyk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhbGVydE9yTG9nKG1zZywgc2hvdWxkQWxlcnQpIHsNCiAgICAgICAgaWYgKHNob3VsZEFsZXJ0KSB7DQ==CiAgICAgICAgICAgIHdpbmRvdy5hbGVydChtc2cpOw0KICAgICAgICB9IGVsc2UgIHsNCiAgICAgICAgICAgIGNvbnNvbGVMb2cobXNnKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGZhaWwocmVhc29uKSB7DQogICAgICAgIGFwaS5pbml0aWFsaXplZCA9IHRydWU7DQogICAgICAgIGFwaS5zdXBwb3J0ZWQgPSBmYWxzZTsNCiAgICAgICAgYWxlcnRPckxvZygiUmFuZ3kgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBhZ2UgaW4geW91ciBicm93c2VyLiBSZWFzb246ICIgKyByZWFzb24sIGFwaS5jb25maWcuYWxlcnRPbkZhaWwpOw0KICAgIH0NCg0KICAgIGFwaS5mYWlsID0gZmFpbDsNCg0KICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7DQogICAgICAgIGFsZXJ0T3JMb2coIlJhbmd5IHdhcm5pbmc6ICIgKyBtc2csIGFwaS5jb25maWcuYWxlcnRPbldhcm4pOw0KICAgIH0NCg0KICAgIGFwaS53YXJuID0gd2FybjsNCg0KICAgIC8vIEFkZCB1dGlsaXR5IGV4dGVuZCgpIG1ldGhvZA0KICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eSkgew0KICAgICAgICBhcGkudXRpbC5leHRlbmQgPSBmdW5jdGlvbihvYmosIHByb3BzLCBkZWVwKSB7DQogICAgICAgICAgICB2YXIgbywgcDsNCiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcHJvcHMpIHsNCiAgICAgICAgICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoaSkpIHsNCiAgICAgICAgICAgICAgICAgICAgbyA9IG9ialtpXTsNCiAgICAgICAgICAgICAgICAgICAgcCA9IHByb3BzW2ldOw0KICAgICAgICAgICAgICAgICAgICAvL2lmIChkZWVwKSBhbGVydChbbyAhPT0gbnVsbCwgdHlwZW9mIG8gPT0gIm9iamVjdCIsIHAgIT09IG51bGwsIHR5cGVvZiBwID09ICJvYmplY3QiXSkNCiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgbyAhPT0gbnVsbCAmJiB0eXBlb2YgbyA9PSAib2JqZWN0IiAmJiBwICE9PSBudWxsICYmIHR5cGVvZiBwID09ICJvYmplY3QiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBhcGkudXRpbC5leHRlbmQobywgcCwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgb2JqW2ldID0gcDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIGZhaWwoImhhc093blByb3BlcnR5IG5vdCBzdXBwb3J0ZWQiKTsNCiAgICB9DQoNCiAgICAvLyBUZXN0IHdoZXRoZXIgQXJyYXkucHJvdG90eXBlLnNsaWNlIGNhbiBiZSByZWxpZWQgb24gZm9yIE5vZGVMaXN0cyBhbmQgdXNlIGFuIGFsdGVybmF0aXZlIHRvQXJyYXkoKSBpZiBub3QNCiAgICAoZnVuY3Rpb24oKSB7DQogICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOw0KICAgICAgICBlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIikpOw0KICAgICAgICB2YXIgc2xpY2UgPSBbXS5zbGljZTsNCiAgICAgICAgdmFyIHRvQXJyYXk7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAoc2xpY2UuY2FsbChlbC5jaGlsZE5vZGVzLCAwKVswXS5ub2RlVHlwZSA9PSAxKSB7DQogICAgICAgICAgICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheUxpa2UsIDApOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKGUpIHt9DQoNCiAgICAgICAgaWYgKCF0b0FycmF5KSB7DQogICAgICAgICAgICB0b0FycmF5ID0gZnVuY3Rpb24oYXJyYXlMaWtlKSB7DQogICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheUxpa2UubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gYXJyYXlMaWtlW2ldOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gYXJyOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KDQogICAgICAgIGFwaS51dGlsLnRvQXJyYXkgPSB0b0FycmF5Ow0KICAgIH0pKCk7DQoNCg0KICAgIC8vIFZlcnkgc2ltcGxlIGV2ZW50IGhhbmRsZXIgd3JhcHBlciBmdW5jdGlvbiB0aGF0IGRvZXNuJ3QgYXR0ZW1wdCB0byBzb2x2ZSBpc3N1ZSBzdWNoIGFzICJ0aGlzIiBoYW5kbGluZyBvcg0KICAgIC8vIG5vcm1hbGl6YXRpb24gb2YgZXZlbnQgcHJvcGVydGllcw0KICAgIHZhciBhZGRMaXN0ZW5lcjsNCiAgICBpZiAoaXNIb3N0TWV0aG9kKGRvY3VtZW50LCAiYWRkRXZlbnRMaXN0ZW5lciIpKSB7DQogICAgICAgIGFkZExpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBldmVudFR5cGUsIGxpc3RlbmVyKSB7DQogICAgICAgICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7DQogICAgICAgIH07DQogICAgfSBlbHNlIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJhdHRhY2hFdmVudCIpKSB7DQogICAgICAgIGFkZExpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBldmVudFR5cGUsIGxpc3RlbmVyKSB7DQogICAgICAgICAgICBvYmouYXR0YWNoRXZlbnQoIm9uIiArIGV2ZW50VHlwZSwgbGlzdGVuZXIpOw0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIGZhaWwoIkRvY3VtZW50IGRvZXMgbm90IGhhdmUgcmVxdWlyZWQgYWRkRXZlbnRMaXN0ZW5lciBvciBhdHRhY2hFdmVudCBtZXRob2QiKTsNCiAgICB9DQogICAgDQogICAgYXBpLnV0aWwuYWRkTGlzdGVuZXIgPSBhZGRMaXN0ZW5lcjsNCg0KICAgIHZhciBpbml0TGlzdGVuZXJzID0gW107DQogICAgDQogICAgZnVuY3Rpb24gZ2V0RXJyb3JEZXNjKGV4KSB7DQogICAgICAgIHJldHVybiBleC5tZXNzYWdlIHx8IGV4LmRlc2NyaXB0aW9uIHx8IFN0cmluZyhleCk7DQogICAgfQ0KDQogICAgLy8gSW5pdGlhbGl6YXRpb24NCiAgICBmdW5jdGlvbiBpbml0KCkgew0KICAgICAgICBpZiAoYXBpLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgdmFyIHRlc3RSYW5nZTsNCiAgICAgICAgdmFyIGltcGxlbWVudHNEb21SYW5nZSA9IGZhbHNlLCBpbXBsZW1lbnRzVGV4dFJhbmdlID0gZmFsc2U7DQoNCiAgICAgICAgLy8gRmlyc3QsIHBlcmZvcm0gYmFzaWMgZmVhdHVyZSB0ZXN0cw0KDQogICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJjcmVhdGVSYW5nZSIpKSB7DQogICAgICAgICAgICB0ZXN0UmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgaWYgKGFyZUhvc3RNZXRob2RzKHRlc3RSYW5nZSwgZG9tUmFuZ2VNZXRob2RzKSAmJiBhcmVIb3N0UHJvcGVydGllcyh0ZXN0UmFuZ2UsIGRvbVJhbmdlUHJvcGVydGllcykpIHsNCiAgICAgICAgICAgICAgICBpbXBsZW1lbnRzRG9tUmFuZ2UgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGVzdFJhbmdlLmRldGFjaCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTsNCiAgICAgICAgaWYgKCFib2R5IHx8IGJvZHkubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPSAiYm9keSIpIHsNCiAgICAgICAgICAgIGZhaWwoIk5vIGJvZHkgZWxlbWVudCBmb3VuZCIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGJvZHkgJiYgaXNIb3N0TWV0aG9kKGJvZHksICJjcmVhdGVUZXh0UmFuZ2UiKSkgew0KICAgICAgICAgICAgdGVzdFJhbmdlID0gYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTsNCiAgICAgICAgICAgIGlmIChpc1RleHRSYW5nZSh0ZXN0UmFuZ2UpKSB7DQogICAgICAgICAgICAgICAgaW1wbGVtZW50c1RleHRSYW5nZSA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWltcGxlbWVudHNEb21SYW5nZSAmJiAhaW1wbGVtZW50c1RleHRSYW5nZSkgew0KICAgICAgICAgICAgZmFpbCgiTmVpdGhlciBSYW5nZSBub3IgVGV4dFJhbmdlIGFyZSBhdmFpbGFibGUiKTsNCiAgICAgICAgIA==ICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgYXBpLmluaXRpYWxpemVkID0gdHJ1ZTsNCiAgICAgICAgYXBpLmZlYXR1cmVzID0gew0KICAgICAgICAgICAgaW1wbGVtZW50c0RvbVJhbmdlOiBpbXBsZW1lbnRzRG9tUmFuZ2UsDQogICAgICAgICAgICBpbXBsZW1lbnRzVGV4dFJhbmdlOiBpbXBsZW1lbnRzVGV4dFJhbmdlDQogICAgICAgIH07DQoNCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBtb2R1bGVzDQogICAgICAgIHZhciBtb2R1bGUsIGVycm9yTWVzc2FnZTsNCiAgICAgICAgZm9yICh2YXIgbW9kdWxlTmFtZSBpbiBtb2R1bGVzKSB7DQogICAgICAgICAgICBpZiAoIChtb2R1bGUgPSBtb2R1bGVzW21vZHVsZU5hbWVdKSBpbnN0YW5jZW9mIE1vZHVsZSApIHsNCiAgICAgICAgICAgICAgICBtb2R1bGUuaW5pdCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAvLyBDYWxsIGluaXQgbGlzdGVuZXJzDQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbml0TGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGluaXRMaXN0ZW5lcnNbaV0oYXBpKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gIlJhbmd5IGluaXQgbGlzdGVuZXIgdGhyZXcgYW4gZXhjZXB0aW9uLiBDb250aW51aW5nLiBEZXRhaWw6ICIgKyBnZXRFcnJvckRlc2MoZXgpOw0KICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coZXJyb3JNZXNzYWdlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIEFsbG93IGV4dGVybmFsIHNjcmlwdHMgdG8gaW5pdGlhbGl6ZSB0aGlzIGxpYnJhcnkgaW4gY2FzZSBpdCdzIGxvYWRlZCBhZnRlciB0aGUgZG9jdW1lbnQgaGFzIGxvYWRlZA0KICAgIGFwaS5pbml0ID0gaW5pdDsNCg0KICAgIC8vIEV4ZWN1dGUgbGlzdGVuZXIgaW1tZWRpYXRlbHkgaWYgYWxyZWFkeSBpbml0aWFsaXplZA0KICAgIGFwaS5hZGRJbml0TGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikgew0KICAgICAgICBpZiAoYXBpLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICBsaXN0ZW5lcihhcGkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaW5pdExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICB2YXIgY3JlYXRlTWlzc2luZ05hdGl2ZUFwaUxpc3RlbmVycyA9IFtdOw0KDQogICAgYXBpLmFkZENyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7DQogICAgICAgIGNyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGNyZWF0ZU1pc3NpbmdOYXRpdmVBcGkod2luKSB7DQogICAgICAgIHdpbiA9IHdpbiB8fCB3aW5kb3c7DQogICAgICAgIGluaXQoKTsNCg0KICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXJzDQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICBjcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXJzW2ldKHdpbik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBhcGkuY3JlYXRlTWlzc2luZ05hdGl2ZUFwaSA9IGNyZWF0ZU1pc3NpbmdOYXRpdmVBcGk7DQoNCiAgICBmdW5jdGlvbiBNb2R1bGUobmFtZSwgaW5pdGlhbGl6ZXIpIHsNCiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsNCiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlOw0KICAgICAgICB0aGlzLnN1cHBvcnRlZCA9IGZhbHNlOw0KICAgICAgICB0aGlzLmluaXQgPSBpbml0aWFsaXplcjsNCiAgICB9DQoNCiAgICBNb2R1bGUucHJvdG90eXBlID0gew0KICAgICAgICBmYWlsOiBmdW5jdGlvbihyZWFzb24pIHsNCiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlOw0KICAgICAgICAgICAgdGhpcy5zdXBwb3J0ZWQgPSBmYWxzZTsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTW9kdWxlICciICsgdGhpcy5uYW1lICsgIicgZmFpbGVkIHRvIGxvYWQ6ICIgKyByZWFzb24pOw0KICAgICAgICB9LA0KDQogICAgICAgIHdhcm46IGZ1bmN0aW9uKG1zZykgew0KICAgICAgICAgICAgYXBpLndhcm4oIk1vZHVsZSAiICsgdGhpcy5uYW1lICsgIjogIiArIG1zZyk7DQogICAgICAgIH0sDQoNCiAgICAgICAgZGVwcmVjYXRpb25Ob3RpY2U6IGZ1bmN0aW9uKGRlcHJlY2F0ZWQsIHJlcGxhY2VtZW50KSB7DQogICAgICAgICAgICBhcGkud2FybigiREVQUkVDQVRFRDogIiArIGRlcHJlY2F0ZWQgKyAiIGluIG1vZHVsZSAiICsgdGhpcy5uYW1lICsgImlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgIg0KICAgICAgICAgICAgICAgICsgcmVwbGFjZW1lbnQgKyAiIGluc3RlYWQiKTsNCiAgICAgICAgfSwNCg0KICAgICAgICBjcmVhdGVFcnJvcjogZnVuY3Rpb24obXNnKSB7DQogICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCJFcnJvciBpbiBSYW5neSAiICsgdGhpcy5uYW1lICsgIiBtb2R1bGU6ICIgKyBtc2cpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIGFwaS5jcmVhdGVNb2R1bGUgPSBmdW5jdGlvbihuYW1lLCBpbml0RnVuYykgew0KICAgICAgICB2YXIgbW9kdWxlID0gbmV3IE1vZHVsZShuYW1lLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIGlmICghbW9kdWxlLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICAgICAgbW9kdWxlLmluaXRpYWxpemVkID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBpbml0RnVuYyhhcGksIG1vZHVsZSk7DQogICAgICAgICAgICAgICAgICAgIG1vZHVsZS5zdXBwb3J0ZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAiTW9kdWxlICciICsgbmFtZSArICInIGZhaWxlZCB0byBsb2FkOiAiICsgZ2V0RXJyb3JEZXNjKGV4KTsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZUxvZyhlcnJvck1lc3NhZ2UpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICAgIG1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7DQogICAgfTsNCg0KICAgIGFwaS5yZXF1aXJlTW9kdWxlcyA9IGZ1bmN0aW9uKG1vZHVsZU5hbWVzKSB7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtb2R1bGVOYW1lcy5sZW5ndGgsIG1vZHVsZSwgbW9kdWxlTmFtZTsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICBtb2R1bGVOYW1lID0gbW9kdWxlTmFtZXNbaV07DQogICAgICAgICAgICANCiAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZXNbbW9kdWxlTmFtZV07DQogICAgICAgICAgICBpZiAoIW1vZHVsZSB8fCAhKG1vZHVsZSBpbnN0YW5jZW9mIE1vZHVsZSkpIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoInJlcXVpcmVkIG1vZHVsZSAnIiArIG1vZHVsZU5hbWUgKyAiJyBub3QgZm91bmQiKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgbW9kdWxlLmluaXQoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKCFtb2R1bGUuc3VwcG9ydGVkKSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJyZXF1aXJlZCBtb2R1bGUgJyIgKyBtb2R1bGVOYW1lICsgIicgbm90IHN1cHBvcnRlZCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAvLyBXYWl0IGZvciBkb2N1bWVudCB0byBsb2FkIGJlZm9yZSBydW5uaW5nIHRlc3RzDQoNCiAgICB2YXIgZG9jUmVhZHkgPSBmYWxzZTsNCg0KICAgIHZhciBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHsNCiAgICAgICAgaWYgKCFkb2NSZWFkeSkgew0KICAgICAgICAgICAgZG9jUmVhZA==eSA9IHRydWU7DQogICAgICAgICAgICBpZiAoIWFwaS5pbml0aWFsaXplZCkgew0KICAgICAgICAgICAgICAgIGluaXQoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICAvLyBUZXN0IHdoZXRoZXIgd2UgaGF2ZSB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgdGhhdCB3ZSB3aWxsIG5lZWQNCiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PSBVTkRFRklORUQpIHsNCiAgICAgICAgZmFpbCgiTm8gd2luZG93IGZvdW5kIik7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PSBVTkRFRklORUQpIHsNCiAgICAgICAgZmFpbCgiTm8gZG9jdW1lbnQgZm91bmQiKTsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsICJhZGRFdmVudExpc3RlbmVyIikpIHsNCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGxvYWRIYW5kbGVyLCBmYWxzZSk7DQogICAgfQ0KDQogICAgLy8gQWRkIGEgZmFsbGJhY2sgaW4gY2FzZSB0aGUgRE9NQ29udGVudExvYWRlZCBldmVudCBpc24ndCBzdXBwb3J0ZWQNCiAgICBhZGRMaXN0ZW5lcih3aW5kb3csICJsb2FkIiwgbG9hZEhhbmRsZXIpOw0KDQogICAgcmV0dXJuIGFwaTsNCn0pKCk7DQoKcmFuZ3kuY3JlYXRlTW9kdWxlKCJEb21VdGlsIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCiAgICB2YXIgVU5ERUYgPSAidW5kZWZpbmVkIjsNCiAgICB2YXIgdXRpbCA9IGFwaS51dGlsOw0KDQogICAgLy8gUGVyZm9ybSBmZWF0dXJlIHRlc3RzDQogICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKGRvY3VtZW50LCBbImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCAiY3JlYXRlRWxlbWVudCIsICJjcmVhdGVUZXh0Tm9kZSJdKSkgew0KICAgICAgICBtb2R1bGUuZmFpbCgiZG9jdW1lbnQgbWlzc2luZyBhIE5vZGUgY3JlYXRpb24gbWV0aG9kIik7DQogICAgfQ0KDQogICAgaWYgKCF1dGlsLmlzSG9zdE1ldGhvZChkb2N1bWVudCwgImdldEVsZW1lbnRzQnlUYWdOYW1lIikpIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoImRvY3VtZW50IG1pc3NpbmcgZ2V0RWxlbWVudHNCeVRhZ05hbWUgbWV0aG9kIik7DQogICAgfQ0KDQogICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7DQogICAgaWYgKCF1dGlsLmFyZUhvc3RNZXRob2RzKGVsLCBbImluc2VydEJlZm9yZSIsICJhcHBlbmRDaGlsZCIsICJjbG9uZU5vZGUiXSB8fA0KICAgICAgICAgICAgIXV0aWwuYXJlSG9zdE9iamVjdHMoZWwsIFsicHJldmlvdXNTaWJsaW5nIiwgIm5leHRTaWJsaW5nIiwgImNoaWxkTm9kZXMiLCAicGFyZW50Tm9kZSJdKSkpIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIkluY29tcGxldGUgRWxlbWVudCBpbXBsZW1lbnRhdGlvbiIpOw0KICAgIH0NCg0KICAgIC8vIGlubmVySFRNTCBpcyByZXF1aXJlZCBmb3IgUmFuZ2UncyBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgbWV0aG9kDQogICAgaWYgKCF1dGlsLmlzSG9zdFByb3BlcnR5KGVsLCAiaW5uZXJIVE1MIikpIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIkVsZW1lbnQgaXMgbWlzc2luZyBpbm5lckhUTUwgcHJvcGVydHkiKTsNCiAgICB9DQoNCiAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgidGVzdCIpOw0KICAgIGlmICghdXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXh0Tm9kZSwgWyJzcGxpdFRleHQiLCAiZGVsZXRlRGF0YSIsICJpbnNlcnREYXRhIiwgImFwcGVuZERhdGEiLCAiY2xvbmVOb2RlIl0gfHwNCiAgICAgICAgICAgICF1dGlsLmFyZUhvc3RPYmplY3RzKGVsLCBbInByZXZpb3VzU2libGluZyIsICJuZXh0U2libGluZyIsICJjaGlsZE5vZGVzIiwgInBhcmVudE5vZGUiXSkgfHwNCiAgICAgICAgICAgICF1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRleHROb2RlLCBbImRhdGEiXSkpKSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJJbmNvbXBsZXRlIFRleHQgTm9kZSBpbXBsZW1lbnRhdGlvbiIpOw0KICAgIH0NCg0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAvLyBSZW1vdmVkIHVzZSBvZiBpbmRleE9mIGJlY2F1c2Ugb2YgYSBiaXphcnJlIGJ1ZyBpbiBPcGVyYSB0aGF0IGlzIHRocm93biBpbiBvbmUgb2YgdGhlIEFjaWQzIHRlc3RzLiBJIGhhdmVuJ3QgYmVlbg0KICAgIC8vIGFibGUgdG8gcmVwbGljYXRlIGl0IG91dHNpZGUgb2YgdGhlIHRlc3QuIFRoZSBidWcgaXMgdGhhdCBpbmRleE9mIHJldHVybnMgLTEgd2hlbiBjYWxsZWQgb24gYW4gQXJyYXkgdGhhdA0KICAgIC8vIGNvbnRhaW5zIGp1c3QgdGhlIGRvY3VtZW50IGFzIGEgc2luZ2xlIGVsZW1lbnQgYW5kIHRoZSB2YWx1ZSBzZWFyY2hlZCBmb3IgaXMgdGhlIGRvY3VtZW50Lg0KICAgIHZhciBhcnJheUNvbnRhaW5zID0gLypBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/DQogICAgICAgIGZ1bmN0aW9uKGFyciwgdmFsKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YodmFsKSA+IC0xOw0KICAgICAgICB9OiovDQoNCiAgICAgICAgZnVuY3Rpb24oYXJyLCB2YWwpIHsNCiAgICAgICAgICAgIHZhciBpID0gYXJyLmxlbmd0aDsNCiAgICAgICAgICAgIHdoaWxlIChpLS0pIHsNCiAgICAgICAgICAgICAgICBpZiAoYXJyW2ldID09PSB2YWwpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9Ow0KDQogICAgLy8gT3BlcmEgMTEgcHV0cyBIVE1MIGVsZW1lbnRzIGluIHRoZSBudWxsIG5hbWVzcGFjZSwgaXQgc2VlbXMsIGFuZCBJRSA3IGhhcyB1bmRlZmluZWQgbmFtZXNwYWNlVVJJDQogICAgZnVuY3Rpb24gaXNIdG1sTmFtZXNwYWNlKG5vZGUpIHsNCiAgICAgICAgdmFyIG5zOw0KICAgICAgICByZXR1cm4gdHlwZW9mIG5vZGUubmFtZXNwYWNlVVJJID09IFVOREVGIHx8ICgobnMgPSBub2RlLm5hbWVzcGFjZVVSSSkgPT09IG51bGwgfHwgbnMgPT0gImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwYXJlbnRFbGVtZW50KG5vZGUpIHsNCiAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsNCiAgICAgICAgcmV0dXJuIChwYXJlbnQubm9kZVR5cGUgPT0gMSkgPyBwYXJlbnQgOiBudWxsOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldE5vZGVJbmRleChub2RlKSB7DQogICAgICAgIHZhciBpID0gMDsNCiAgICAgICAgd2hpbGUoIChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpICkgew0KICAgICAgICAgICAgKytpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldE5vZGVMZW5ndGgobm9kZSkgew0KICAgICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHsNCiAgICAgICAgICAgIGNhc2UgNzoNCiAgICAgICAgICAgIGNhc2UgMTA6DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICBjYXNlIDM6DQogICAgICAgICAgICBjYXNlIDg6DQogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUubGVuZ3RoOw0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldENvbW1vbkFuY2VzdG9yKG5vZGUxLCBub2RlMikgew0KICAgICAgICB2YXIgYW5jZXN0b3JzID0gW10sIG47DQogICAgICAgIGZvciAobiA9IG5vZGUxOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7DQogICAgICAgICAgICBhbmNlc3RvcnMucHVzaChuKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvciAobiA9IG5vZGUyOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7DQogICAgICAgICAgICBpZiAoYXJyYXlDb250YWlucyhhbmNlc3RvcnMsIG4pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG47DQogICAgICAgICAgICB9DQ==CiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBudWxsOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGlzQW5jZXN0b3JPZihhbmNlc3RvciwgZGVzY2VuZGFudCwgc2VsZklzQW5jZXN0b3IpIHsNCiAgICAgICAgdmFyIG4gPSBzZWxmSXNBbmNlc3RvciA/IGRlc2NlbmRhbnQgOiBkZXNjZW5kYW50LnBhcmVudE5vZGU7DQogICAgICAgIHdoaWxlIChuKSB7DQogICAgICAgICAgICBpZiAobiA9PT0gYW5jZXN0b3IpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaXNPcklzQW5jZXN0b3JPZihhbmNlc3RvciwgZGVzY2VuZGFudCkgew0KICAgICAgICByZXR1cm4gaXNBbmNlc3Rvck9mKGFuY2VzdG9yLCBkZXNjZW5kYW50LCB0cnVlKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlLCBhbmNlc3Rvciwgc2VsZklzQW5jZXN0b3IpIHsNCiAgICAgICAgdmFyIHAsIG4gPSBzZWxmSXNBbmNlc3RvciA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7DQogICAgICAgIHdoaWxlIChuKSB7DQogICAgICAgICAgICBwID0gbi5wYXJlbnROb2RlOw0KICAgICAgICAgICAgaWYgKHAgPT09IGFuY2VzdG9yKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBuID0gcDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpIHsNCiAgICAgICAgdmFyIHQgPSBub2RlLm5vZGVUeXBlOw0KICAgICAgICByZXR1cm4gdCA9PSAzIHx8IHQgPT0gNCB8fCB0ID09IDggOyAvLyBUZXh0LCBDRGF0YVNlY3Rpb24gb3IgQ29tbWVudA0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGlzVGV4dE9yQ29tbWVudE5vZGUobm9kZSkgew0KICAgICAgICBpZiAoIW5vZGUpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICB2YXIgdCA9IG5vZGUubm9kZVR5cGU7DQogICAgICAgIHJldHVybiB0ID09IDMgfHwgdCA9PSA4IDsgLy8gVGV4dCBvciBDb21tZW50DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIobm9kZSwgcHJlY2VkaW5nTm9kZSkgew0KICAgICAgICB2YXIgbmV4dE5vZGUgPSBwcmVjZWRpbmdOb2RlLm5leHRTaWJsaW5nLCBwYXJlbnQgPSBwcmVjZWRpbmdOb2RlLnBhcmVudE5vZGU7DQogICAgICAgIGlmIChuZXh0Tm9kZSkgew0KICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBuZXh0Tm9kZSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQobm9kZSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG5vZGU7DQogICAgfQ0KDQogICAgLy8gTm90ZSB0aGF0IHdlIGNhbm5vdCB1c2Ugc3BsaXRUZXh0KCkgYmVjYXVzZSBpdCBpcyBidWdyaWRkZW4gaW4gSUUgOS4NCiAgICBmdW5jdGlvbiBzcGxpdERhdGFOb2RlKG5vZGUsIGluZGV4LCBwb3NpdGlvbnNUb1ByZXNlcnZlKSB7DQogICAgICAgIHZhciBuZXdOb2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOw0KICAgICAgICBuZXdOb2RlLmRlbGV0ZURhdGEoMCwgaW5kZXgpOw0KICAgICAgICBub2RlLmRlbGV0ZURhdGEoaW5kZXgsIG5vZGUubGVuZ3RoIC0gaW5kZXgpOw0KICAgICAgICBpbnNlcnRBZnRlcihuZXdOb2RlLCBub2RlKTsNCg0KICAgICAgICAvLyBQcmVzZXJ2ZSBwb3NpdGlvbnMNCiAgICAgICAgaWYgKHBvc2l0aW9uc1RvUHJlc2VydmUpIHsNCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBwb3NpdGlvbjsgcG9zaXRpb24gPSBwb3NpdGlvbnNUb1ByZXNlcnZlW2krK107ICkgew0KICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBjYXNlIHdoZXJlIHBvc2l0aW9uIHdhcyBpbnNpZGUgdGhlIHBvcnRpb24gb2Ygbm9kZSBhZnRlciB0aGUgc3BsaXQgcG9pbnQNCiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24ubm9kZSA9PSBub2RlICYmIHBvc2l0aW9uLm9mZnNldCA+IGluZGV4KSB7DQogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLm5vZGUgPSBuZXdOb2RlOw0KICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi5vZmZzZXQgLT0gaW5kZXg7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgcG9zaXRpb24gaXMgYSBub2RlIG9mZnNldCB3aXRoaW4gbm9kZSdzIHBhcmVudA0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uLm5vZGUgPT0gbm9kZS5wYXJlbnROb2RlICYmIHBvc2l0aW9uLm9mZnNldCA+IGdldE5vZGVJbmRleChub2RlKSkgew0KICAgICAgICAgICAgICAgICAgICArK3Bvc2l0aW9uLm9mZnNldDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG5ld05vZGU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0RG9jdW1lbnQobm9kZSkgew0KICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSA5KSB7DQogICAgICAgICAgICByZXR1cm4gbm9kZTsNCiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZS5vd25lckRvY3VtZW50ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50Ow0KICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlLmRvY3VtZW50ICE9IFVOREVGKSB7DQogICAgICAgICAgICByZXR1cm4gbm9kZS5kb2N1bWVudDsNCiAgICAgICAgfSBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUpIHsNCiAgICAgICAgICAgIHJldHVybiBnZXREb2N1bWVudChub2RlLnBhcmVudE5vZGUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJnZXREb2N1bWVudDogbm8gZG9jdW1lbnQgZm91bmQgZm9yIG5vZGUiKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7DQogICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudChub2RlKTsNCiAgICAgICAgaWYgKHR5cGVvZiBkb2MuZGVmYXVsdFZpZXcgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBkb2MuZGVmYXVsdFZpZXc7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvYy5wYXJlbnRXaW5kb3cgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBkb2MucGFyZW50V2luZG93Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJDYW5ub3QgZ2V0IGEgd2luZG93IG9iamVjdCBmb3Igbm9kZSIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0SWZyYW1lRG9jdW1lbnQoaWZyYW1lRWwpIHsNCiAgICAgICAgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQ7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3cgIT0gVU5ERUYpIHsNCiAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50V2luZG93LmRvY3VtZW50Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJnZXRJZnJhbWVEb2N1bWVudDogTm8gRG9jdW1lbnQgb2JqZWN0IGZvdW5kIGZvciBpZnJhbWUgZWxlbWVudCIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0SWZyYW1lV2luZG93KGlmcmFtZUVsKSB7DQogICAgICAgIGlmICh0eXBlb2YgaWZyYW1lRWwuY29udGVudFdpbmRvdyAhPSBVTkRFRikgew0KICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3c7DQogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudCAhPSBVTkRFRikgew0KICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldzsNCiAgICAgICAgfSBlbHNlIA==ew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJnZXRJZnJhbWVXaW5kb3c6IE5vIFdpbmRvdyBvYmplY3QgZm91bmQgZm9yIGlmcmFtZSBlbGVtZW50Iik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBUaGlzIGxvb2tzIGJhZC4gSXMgaXQgd29ydGggaXQ/DQogICAgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7DQogICAgICAgIHJldHVybiBvYmogJiYgdXRpbC5pc0hvc3RNZXRob2Qob2JqLCAic2V0VGltZW91dCIpICYmIHV0aWwuaXNIb3N0T2JqZWN0KG9iaiwgImRvY3VtZW50Iik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0Q29udGVudERvY3VtZW50KG9iaiwgbW9kdWxlLCBtZXRob2ROYW1lKSB7DQogICAgICAgIHZhciBkb2M7DQoNCiAgICAgICAgaWYgKCFvYmopIHsNCiAgICAgICAgICAgIGRvYyA9IGRvY3VtZW50Ow0KICAgICAgICB9DQoNCiAgICAgICAgLy8gVGVzdCBpZiBhIERPTSBub2RlIGhhcyBiZWVuIHBhc3NlZCBhbmQgb2J0YWluIGEgZG9jdW1lbnQgb2JqZWN0IGZvciBpdCBpZiBzbw0KICAgICAgICBlbHNlIGlmICh1dGlsLmlzSG9zdFByb3BlcnR5KG9iaiwgIm5vZGVUeXBlIikpIHsNCiAgICAgICAgICAgIGRvYyA9IChvYmoubm9kZVR5cGUgPT0gMSAmJiBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICJpZnJhbWUiKQ0KICAgICAgICAgICAgICAgID8gZ2V0SWZyYW1lRG9jdW1lbnQob2JqKSA6IGdldERvY3VtZW50KG9iaik7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBUZXN0IGlmIHRoZSBkb2MgcGFyYW1ldGVyIGFwcGVhcnMgdG8gYmUgYSBXaW5kb3cgb2JqZWN0DQogICAgICAgIGVsc2UgaWYgKGlzV2luZG93KG9iaikpIHsNCiAgICAgICAgICAgIGRvYyA9IG9iai5kb2N1bWVudDsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghZG9jKSB7DQogICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IobWV0aG9kTmFtZSArICIoKTogUGFyYW1ldGVyIG11c3QgYmUgYSBXaW5kb3cgb2JqZWN0IG9yIERPTSBub2RlIik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gZG9jOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFJvb3RDb250YWluZXIobm9kZSkgew0KICAgICAgICB2YXIgcGFyZW50Ow0KICAgICAgICB3aGlsZSAoIChwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUpICkgew0KICAgICAgICAgICAgbm9kZSA9IHBhcmVudDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbm9kZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKG5vZGVBLCBvZmZzZXRBLCBub2RlQiwgb2Zmc2V0Qikgew0KICAgICAgICAvLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItVHJhdmVyc2FsLVJhbmdlL3Jhbmdlcy5odG1sI0xldmVsLTItUmFuZ2UtQ29tcGFyaW5nDQogICAgICAgIHZhciBub2RlQywgcm9vdCwgY2hpbGRBLCBjaGlsZEIsIG47DQogICAgICAgIGlmIChub2RlQSA9PSBub2RlQikgew0KICAgICAgICAgICAgLy8gQ2FzZSAxOiBub2RlcyBhcmUgdGhlIHNhbWUNCiAgICAgICAgICAgIHJldHVybiBvZmZzZXRBID09PSBvZmZzZXRCID8gMCA6IChvZmZzZXRBIDwgb2Zmc2V0QikgPyAtMSA6IDE7DQogICAgICAgIH0gZWxzZSBpZiAoIChub2RlQyA9IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVCLCBub2RlQSwgdHJ1ZSkpICkgew0KICAgICAgICAgICAgLy8gQ2FzZSAyOiBub2RlIEMgKGNvbnRhaW5lciBCIG9yIGFuIGFuY2VzdG9yKSBpcyBhIGNoaWxkIG5vZGUgb2YgQQ0KICAgICAgICAgICAgcmV0dXJuIG9mZnNldEEgPD0gZ2V0Tm9kZUluZGV4KG5vZGVDKSA/IC0xIDogMTsNCiAgICAgICAgfSBlbHNlIGlmICggKG5vZGVDID0gZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUEsIG5vZGVCLCB0cnVlKSkgKSB7DQogICAgICAgICAgICAvLyBDYXNlIDM6IG5vZGUgQyAoY29udGFpbmVyIEEgb3IgYW4gYW5jZXN0b3IpIGlzIGEgY2hpbGQgbm9kZSBvZiBCDQogICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZUluZGV4KG5vZGVDKSA8IG9mZnNldEIgID8gLTEgOiAxOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gQ2FzZSA0OiBjb250YWluZXJzIGFyZSBzaWJsaW5ncyBvciBkZXNjZW5kYW50cyBvZiBzaWJsaW5ncw0KICAgICAgICAgICAgcm9vdCA9IGdldENvbW1vbkFuY2VzdG9yKG5vZGVBLCBub2RlQik7DQogICAgICAgICAgICBjaGlsZEEgPSAobm9kZUEgPT09IHJvb3QpID8gcm9vdCA6IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVBLCByb290LCB0cnVlKTsNCiAgICAgICAgICAgIGNoaWxkQiA9IChub2RlQiA9PT0gcm9vdCkgPyByb290IDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUIsIHJvb3QsIHRydWUpOw0KDQogICAgICAgICAgICBpZiAoY2hpbGRBID09PSBjaGlsZEIpIHsNCiAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBwb3NzaWJsZQ0KICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcigiY29tcGFyZVBvaW50cyBnb3QgdG8gY2FzZSA0IGFuZCBjaGlsZEEgYW5kIGNoaWxkQiBhcmUgdGhlIHNhbWUhIik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIG4gPSByb290LmZpcnN0Q2hpbGQ7DQogICAgICAgICAgICAgICAgd2hpbGUgKG4pIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IGNoaWxkQSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4gPT09IGNoaWxkQikgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgbiA9IG4ubmV4dFNpYmxpbmc7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIC8vIFRlc3QgZm9yIElFJ3MgY3Jhc2ggKElFIDYvNykgb3IgZXhjZXB0aW9uIChJRSA+PSA4KSB3aGVuIGEgcmVmZXJlbmNlIHRvIGdhcmJhZ2UtY29sbGVjdGVkIHRleHQgbm9kZSBpcyBxdWVyaWVkDQogICAgdmFyIGNyYXNoeVRleHROb2RlcyA9IGZhbHNlOw0KDQogICAgZnVuY3Rpb24gaXNCcm9rZW5Ob2RlKG5vZGUpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAoZnVuY3Rpb24oKSB7DQogICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImIiKTsNCiAgICAgICAgZWwuaW5uZXJIVE1MID0gIjEiOw0KICAgICAgICB2YXIgdGV4dE5vZGUgPSBlbC5maXJzdENoaWxkOw0KICAgICAgICBlbC5pbm5lckhUTUwgPSAiPGJyPiI7DQogICAgICAgIGNyYXNoeVRleHROb2RlcyA9IGlzQnJva2VuTm9kZSh0ZXh0Tm9kZSk7DQoNCiAgICAgICAgYXBpLmZlYXR1cmVzLmNyYXNoeVRleHROb2RlcyA9IGNyYXNoeVRleHROb2RlczsNCiAgICB9KSgpOw0KDQogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgIGZ1bmN0aW9uIGluc3BlY3ROb2RlKG5vZGUpIHsNCiAgICAgICAgaWYgKCFub2RlKSB7DQogICAgICAgICAgICByZXR1cm4gIltObyBub2RlXSI7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGNyYXNoeVRleHROb2RlcyAmJiBpc0Jyb2tlbk5vZGUobm9kZSkpIHsNCiAgICAgICAgICAgIHJldHVybiAiW0Jyb2tlbiBub2RlXSI7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkpIHsNCiAgICAgICAgICAgIHJldHVybiAnIicgKyBub2RlLmRhdGEgKyAnIic7DQogICAgICAgIH0NCiAgICAgIA==ICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7DQogICAgICAgICAgICB2YXIgaWRBdHRyID0gbm9kZS5pZCA/ICcgaWQ9IicgKyBub2RlLmlkICsgJyInIDogIiI7DQogICAgICAgICAgICByZXR1cm4gIjwiICsgbm9kZS5ub2RlTmFtZSArIGlkQXR0ciArICI+WyIgKyBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICsgIl1bIiArIG5vZGUuaW5uZXJIVE1MLnNsaWNlKDAsIDIwKSArICJdIjsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbm9kZS5ub2RlTmFtZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4obm9kZSkgew0KICAgICAgICB2YXIgZnJhZ21lbnQgPSBnZXREb2N1bWVudChub2RlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGNoaWxkOw0KICAgICAgICB3aGlsZSAoIChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCkgKSB7DQogICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZyYWdtZW50Ow0KICAgIH0NCg0KICAgIHZhciBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHk7DQogICAgaWYgKHR5cGVvZiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSAhPSBVTkRFRikgew0KICAgICAgICBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHkgPSBmdW5jdGlvbihlbCwgcHJvcE5hbWUpIHsNCiAgICAgICAgICAgIHJldHVybiBnZXRXaW5kb3coZWwpLmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpW3Byb3BOYW1lXTsNCiAgICAgICAgfTsNCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlICE9IFVOREVGKSB7DQogICAgICAgIGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eSA9IGZ1bmN0aW9uKGVsLCBwcm9wTmFtZSkgew0KICAgICAgICAgICAgcmV0dXJuIGVsLmN1cnJlbnRTdHlsZVtwcm9wTmFtZV07DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIk5vIG1lYW5zIG9mIG9idGFpbmluZyBjb21wdXRlZCBzdHlsZSBwcm9wZXJ0aWVzIGZvdW5kIik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gTm9kZUl0ZXJhdG9yKHJvb3QpIHsNCiAgICAgICAgdGhpcy5yb290ID0gcm9vdDsNCiAgICAgICAgdGhpcy5fbmV4dCA9IHJvb3Q7DQogICAgfQ0KDQogICAgTm9kZUl0ZXJhdG9yLnByb3RvdHlwZSA9IHsNCiAgICAgICAgX2N1cnJlbnQ6IG51bGwsDQoNCiAgICAgICAgaGFzTmV4dDogZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gISF0aGlzLl9uZXh0Ow0KICAgICAgICB9LA0KDQogICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dDsNCiAgICAgICAgICAgIHZhciBjaGlsZCwgbmV4dDsNCiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50KSB7DQogICAgICAgICAgICAgICAgY2hpbGQgPSBuLmZpcnN0Q2hpbGQ7DQogICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSBjaGlsZDsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbnVsbDsNCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuICE9PSB0aGlzLnJvb3QpICYmICEobmV4dCA9IG4ubmV4dFNpYmxpbmcpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBuID0gbi5wYXJlbnROb2RlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSBuZXh0Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50Ow0KICAgICAgICB9LA0KDQogICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dCA9IHRoaXMucm9vdCA9IG51bGw7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgZnVuY3Rpb24gY3JlYXRlSXRlcmF0b3Iocm9vdCkgew0KICAgICAgICByZXR1cm4gbmV3IE5vZGVJdGVyYXRvcihyb290KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBEb21Qb3NpdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTsNCiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7DQogICAgfQ0KDQogICAgRG9tUG9zaXRpb24ucHJvdG90eXBlID0gew0KICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHBvcykgew0KICAgICAgICAgICAgcmV0dXJuICEhcG9zICYmIHRoaXMubm9kZSA9PT0gcG9zLm5vZGUgJiYgdGhpcy5vZmZzZXQgPT0gcG9zLm9mZnNldDsNCiAgICAgICAgfSwNCg0KICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiAiW0RvbVBvc2l0aW9uKCIgKyBpbnNwZWN0Tm9kZSh0aGlzLm5vZGUpICsgIjoiICsgdGhpcy5vZmZzZXQgKyAiKV0iOw0KICAgICAgICB9LA0KDQogICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLmluc3BlY3QoKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBmdW5jdGlvbiBET01FeGNlcHRpb24oY29kZU5hbWUpIHsNCiAgICAgICAgdGhpcy5jb2RlID0gdGhpc1tjb2RlTmFtZV07DQogICAgICAgIHRoaXMuY29kZU5hbWUgPSBjb2RlTmFtZTsNCiAgICAgICAgdGhpcy5tZXNzYWdlID0gIkRPTUV4Y2VwdGlvbjogIiArIHRoaXMuY29kZU5hbWU7DQogICAgfQ0KDQogICAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IHsNCiAgICAgICAgSU5ERVhfU0laRV9FUlI6IDEsDQogICAgICAgIEhJRVJBUkNIWV9SRVFVRVNUX0VSUjogMywNCiAgICAgICAgV1JPTkdfRE9DVU1FTlRfRVJSOiA0LA0KICAgICAgICBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlI6IDcsDQogICAgICAgIE5PVF9GT1VORF9FUlI6IDgsDQogICAgICAgIE5PVF9TVVBQT1JURURfRVJSOiA5LA0KICAgICAgICBJTlZBTElEX1NUQVRFX0VSUjogMTENCiAgICB9Ow0KDQogICAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlOw0KICAgIH07DQoNCiAgICBhcGkuZG9tID0gew0KICAgICAgICBhcnJheUNvbnRhaW5zOiBhcnJheUNvbnRhaW5zLA0KICAgICAgICBpc0h0bWxOYW1lc3BhY2U6IGlzSHRtbE5hbWVzcGFjZSwNCiAgICAgICAgcGFyZW50RWxlbWVudDogcGFyZW50RWxlbWVudCwNCiAgICAgICAgZ2V0Tm9kZUluZGV4OiBnZXROb2RlSW5kZXgsDQogICAgICAgIGdldE5vZGVMZW5ndGg6IGdldE5vZGVMZW5ndGgsDQogICAgICAgIGdldENvbW1vbkFuY2VzdG9yOiBnZXRDb21tb25BbmNlc3RvciwNCiAgICAgICAgaXNBbmNlc3Rvck9mOiBpc0FuY2VzdG9yT2YsDQogICAgICAgIGlzT3JJc0FuY2VzdG9yT2Y6IGlzT3JJc0FuY2VzdG9yT2YsDQogICAgICAgIGdldENsb3Nlc3RBbmNlc3RvckluOiBnZXRDbG9zZXN0QW5jZXN0b3JJbiwNCiAgICAgICAgaXNDaGFyYWN0ZXJEYXRhTm9kZTogaXNDaGFyYWN0ZXJEYXRhTm9kZSwNCiAgICAgICAgaXNUZXh0T3JDb21tZW50Tm9kZTogaXNUZXh0T3JDb21tZW50Tm9kZSwNCiAgICAgICAgaW5zZXJ0QWZ0ZXI6IGluc2VydEFmdGVyLA0KICAgICAgICBzcGxpdERhdGFOb2RlOiBzcGxpdERhdGFOb2RlLA0KICAgICAgICBnZXREb2N1bWVudDogZ2V0RG9jdW1lbnQsDQogICAgICAgIGdldFdpbmRvdzogZ2V0V2luZG93LA0KICAgICAgICBnZXRJZnJhbWVXaW5kb3c6IGdldElmcmFtZVdpbmRvdywNCiAgICAgICAgZ2V0SWZyYW1lRG9jdW1lbnQ6IGdldElmcmFtZURvY3VtZW50LA0KICAgICAgICBnZXRCb2R5OiB1dGlsLmdldEJvZHksDQogICAgICAgIGlzV2luZG93OiBpc1dpbmRvdywNCiAgICAgICAgZ2V0Q29udGVudERvY3VtZW50OiBnZXRDb250ZW50RG9jdW1lbnQsDQogICAgICAgIGdldFJvb3RDb250YWluZXI6IGdldFJvb3RDb250YWluZXIsDQogICAgICAgIGNvbXBhcmVQb2ludHM6IGNvbXBhcmVQb2ludHMsDQogICAgICAgIGlzQnJva2VuTm9kZTogaXNCcm9rZW5Ob2RlLA0KICAgICAgICBpbnNwZWN0Tm9kZTogaW5zcGVjdE5vZGUsDQogICAgICAgIA==Z2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5OiBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHksDQogICAgICAgIGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbjogZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuLA0KICAgICAgICBjcmVhdGVJdGVyYXRvcjogY3JlYXRlSXRlcmF0b3IsDQogICAgICAgIERvbVBvc2l0aW9uOiBEb21Qb3NpdGlvbg0KICAgIH07DQoNCiAgICBhcGkuRE9NRXhjZXB0aW9uID0gRE9NRXhjZXB0aW9uOw0KfSk7CnJhbmd5LmNyZWF0ZU1vZHVsZSgiRG9tUmFuZ2UiLCBmdW5jdGlvbihhcGksIG1vZHVsZSkgewogICAgYXBpLnJlcXVpcmVNb2R1bGVzKCBbIkRvbVV0aWwiXSApOwoKICAgIHZhciBkb20gPSBhcGkuZG9tOwogICAgdmFyIHV0aWwgPSBhcGkudXRpbDsKICAgIHZhciBEb21Qb3NpdGlvbiA9IGRvbS5Eb21Qb3NpdGlvbjsKICAgIHZhciBET01FeGNlcHRpb24gPSBhcGkuRE9NRXhjZXB0aW9uOwoKICAgIHZhciBpc0NoYXJhY3RlckRhdGFOb2RlID0gZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGU7CiAgICB2YXIgZ2V0Tm9kZUluZGV4ID0gZG9tLmdldE5vZGVJbmRleDsKICAgIHZhciBpc09ySXNBbmNlc3Rvck9mID0gZG9tLmlzT3JJc0FuY2VzdG9yT2Y7CiAgICB2YXIgZ2V0RG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQ7CiAgICB2YXIgY29tcGFyZVBvaW50cyA9IGRvbS5jb21wYXJlUG9pbnRzOwogICAgdmFyIHNwbGl0RGF0YU5vZGUgPSBkb20uc3BsaXREYXRhTm9kZTsKICAgIHZhciBnZXRDbG9zZXN0QW5jZXN0b3JJbiA9IGRvbS5nZXRDbG9zZXN0QW5jZXN0b3JJbjsKICAgIHZhciBnZXROb2RlTGVuZ3RoID0gZG9tLmdldE5vZGVMZW5ndGg7CiAgICB2YXIgYXJyYXlDb250YWlucyA9IGRvbS5hcnJheUNvbnRhaW5zOwogICAgdmFyIGdldFJvb3RDb250YWluZXIgPSBkb20uZ2V0Um9vdENvbnRhaW5lcjsKICAgIHZhciBjcmFzaHlUZXh0Tm9kZXMgPSBhcGkuZmVhdHVyZXMuY3Jhc2h5VGV4dE5vZGVzOwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gVXRpbGl0eSBmdW5jdGlvbnMKCiAgICBmdW5jdGlvbiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChub2RlLCByYW5nZSkgewogICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSAhPSAzKSAmJgogICAgICAgICAgICAgICAoaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5zdGFydENvbnRhaW5lcikgfHwgaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5lbmRDb250YWluZXIpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSYW5nZURvY3VtZW50KHJhbmdlKSB7CiAgICAgICAgcmV0dXJuIHJhbmdlLmRvY3VtZW50IHx8IGdldERvY3VtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCb3VuZGFyeUJlZm9yZU5vZGUobm9kZSkgewogICAgICAgIHJldHVybiBuZXcgRG9tUG9zaXRpb24obm9kZS5wYXJlbnROb2RlLCBnZXROb2RlSW5kZXgobm9kZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpIHsKICAgICAgICByZXR1cm4gbmV3IERvbVBvc2l0aW9uKG5vZGUucGFyZW50Tm9kZSwgZ2V0Tm9kZUluZGV4KG5vZGUpICsgMSk7CiAgICB9CgogICAgZnVuY3Rpb24gaW5zZXJ0Tm9kZUF0UG9zaXRpb24obm9kZSwgbiwgbykgewogICAgICAgIHZhciBmaXJzdE5vZGVJbnNlcnRlZCA9IG5vZGUubm9kZVR5cGUgPT0gMTEgPyBub2RlLmZpcnN0Q2hpbGQgOiBub2RlOwogICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKG4pKSB7CiAgICAgICAgICAgIGlmIChvID09IG4ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBkb20uaW5zZXJ0QWZ0ZXIobm9kZSwgbik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG8gPT0gMCA/IG4gOiBzcGxpdERhdGFOb2RlKG4sIG8pKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobyA+PSBuLmNoaWxkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgICAgIG4uYXBwZW5kQ2hpbGQobm9kZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbi5pbnNlcnRCZWZvcmUobm9kZSwgbi5jaGlsZE5vZGVzW29dKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZpcnN0Tm9kZUluc2VydGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIHJhbmdlc0ludGVyc2VjdChyYW5nZUEsIHJhbmdlQiwgdG91Y2hpbmdJc0ludGVyc2VjdGluZykgewogICAgICAgIGFzc2VydFJhbmdlVmFsaWQocmFuZ2VBKTsKICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlQik7CgogICAgICAgIGlmIChnZXRSYW5nZURvY3VtZW50KHJhbmdlQikgIT0gZ2V0UmFuZ2VEb2N1bWVudChyYW5nZUEpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIldST05HX0RPQ1VNRU5UX0VSUiIpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHMocmFuZ2VBLnN0YXJ0Q29udGFpbmVyLCByYW5nZUEuc3RhcnRPZmZzZXQsIHJhbmdlQi5lbmRDb250YWluZXIsIHJhbmdlQi5lbmRPZmZzZXQpLAogICAgICAgICAgICBlbmRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhyYW5nZUEuZW5kQ29udGFpbmVyLCByYW5nZUEuZW5kT2Zmc2V0LCByYW5nZUIuc3RhcnRDb250YWluZXIsIHJhbmdlQi5zdGFydE9mZnNldCk7CgogICAgICAgIHJldHVybiB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nID8gc3RhcnRDb21wYXJpc29uIDw9IDAgJiYgZW5kQ29tcGFyaXNvbiA+PSAwIDogc3RhcnRDb21wYXJpc29uIDwgMCAmJiBlbmRDb21wYXJpc29uID4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9uZVN1YnRyZWUoaXRlcmF0b3IpIHsKICAgICAgICB2YXIgcGFydGlhbGx5U2VsZWN0ZWQ7CiAgICAgICAgZm9yICh2YXIgbm9kZSwgZnJhZyA9IGdldFJhbmdlRG9jdW1lbnQoaXRlcmF0b3IucmFuZ2UpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgc3ViSXRlcmF0b3I7IG5vZGUgPSBpdGVyYXRvci5uZXh0KCk7ICkgewogICAgICAgICAgICBwYXJ0aWFsbHlTZWxlY3RlZCA9IGl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCk7CiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSghcGFydGlhbGx5U2VsZWN0ZWQpOwogICAgICAgICAgICBpZiAocGFydGlhbGx5U2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yID0gaXRlcmF0b3IuZ2V0U3VidHJlZUl0ZXJhdG9yKCk7CiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNsb25lU3VidHJlZShzdWJJdGVyYXRvcikpOwogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IuZGV0YWNoKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxMCkgeyAvLyBEb2N1bWVudFR5cGUKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIkhJRVJBUkNIWV9SRVFVRVNUX0VSUiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQobm9kZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmcmFnOwogICAgfQoKICAgIGZ1bmN0aW9uIGl0ZXJhdGVTdWJ0cmVlKHJhbmdlSXRlcmF0b3IsIGZ1bmMsIGl0ZXJhdG9yU3RhdGUpIHsKICAgICAgICB2YXIgaXQsIG47CiAgICAgICAgaXRlcmF0b3JTdGF0ZSA9IGl0ZXJhdG9yU3RhdGUgfHwgeyBzdG9wOiBmYWxzZSB9OwogICAgICAgIGZvciAodmFyIG5vZGUsIHN1YlJhbmdlSXRlcmF0b3I7IG5vZGUgPSByYW5nZUl0ZXJhdG9yLm5leHQoKTsgKSB7CiAgICAgICAgICAgIGlmIChyYW5nZUl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCkpIHsKICAgICAgICAgICAgICAgIGlmIChmdW5jKG5vZGUpID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yU3RhdGUuc3RvcCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgIA==ICAgICAgICAgICAgIC8vIFRoZSBub2RlIGlzIHBhcnRpYWxseSBzZWxlY3RlZCBieSB0aGUgUmFuZ2UsIHNvIHdlIGNhbiB1c2UgYSBuZXcgUmFuZ2VJdGVyYXRvciBvbiB0aGUgcG9ydGlvbiBvZgogICAgICAgICAgICAgICAgICAgIC8vIHRoZSBub2RlIHNlbGVjdGVkIGJ5IHRoZSBSYW5nZS4KICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZUl0ZXJhdG9yID0gcmFuZ2VJdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTsKICAgICAgICAgICAgICAgICAgICBpdGVyYXRlU3VidHJlZShzdWJSYW5nZUl0ZXJhdG9yLCBmdW5jLCBpdGVyYXRvclN0YXRlKTsKICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZUl0ZXJhdG9yLmRldGFjaCh0cnVlKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3JTdGF0ZS5zdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBUaGUgd2hvbGUgbm9kZSBpcyBzZWxlY3RlZCwgc28gd2UgY2FuIHVzZSBlZmZpY2llbnQgRE9NIGl0ZXJhdGlvbiB0byBpdGVyYXRlIG92ZXIgdGhlIG5vZGUgYW5kIGl0cwogICAgICAgICAgICAgICAgLy8gZGVzY2VuZGFudHMKICAgICAgICAgICAgICAgIGl0ID0gZG9tLmNyZWF0ZUl0ZXJhdG9yKG5vZGUpOwogICAgICAgICAgICAgICAgd2hpbGUgKCAobiA9IGl0Lm5leHQoKSkgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmMobikgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yU3RhdGUuc3RvcCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZGVsZXRlU3VidHJlZShpdGVyYXRvcikgewogICAgICAgIHZhciBzdWJJdGVyYXRvcjsKICAgICAgICB3aGlsZSAoaXRlcmF0b3IubmV4dCgpKSB7CiAgICAgICAgICAgIGlmIChpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7CiAgICAgICAgICAgICAgICBzdWJJdGVyYXRvciA9IGl0ZXJhdG9yLmdldFN1YnRyZWVJdGVyYXRvcigpOwogICAgICAgICAgICAgICAgZGVsZXRlU3VidHJlZShzdWJJdGVyYXRvcik7CiAgICAgICAgICAgICAgICBzdWJJdGVyYXRvci5kZXRhY2godHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpdGVyYXRvci5yZW1vdmUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBleHRyYWN0U3VidHJlZShpdGVyYXRvcikgewogICAgICAgIGZvciAodmFyIG5vZGUsIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KGl0ZXJhdG9yLnJhbmdlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIHN1Ykl0ZXJhdG9yOyBub2RlID0gaXRlcmF0b3IubmV4dCgpOyApIHsKCiAgICAgICAgICAgIGlmIChpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7CiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOwogICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IgPSBpdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTsKICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZXh0cmFjdFN1YnRyZWUoc3ViSXRlcmF0b3IpKTsKICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yLmRldGFjaCh0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEwKSB7IC8vIERvY3VtZW50VHlwZQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZyYWc7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Tm9kZXNJblJhbmdlKHJhbmdlLCBub2RlVHlwZXMsIGZpbHRlcikgewogICAgICAgIHZhciBmaWx0ZXJOb2RlVHlwZXMgPSAhIShub2RlVHlwZXMgJiYgbm9kZVR5cGVzLmxlbmd0aCksIHJlZ2V4OwogICAgICAgIHZhciBmaWx0ZXJFeGlzdHMgPSAhIWZpbHRlcjsKICAgICAgICBpZiAoZmlsdGVyTm9kZVR5cGVzKSB7CiAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgiXigiICsgbm9kZVR5cGVzLmpvaW4oInwiKSArICIpJCIpOwogICAgICAgIH0KCiAgICAgICAgdmFyIG5vZGVzID0gW107CiAgICAgICAgaXRlcmF0ZVN1YnRyZWUobmV3IFJhbmdlSXRlcmF0b3IocmFuZ2UsIGZhbHNlKSwgZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICBpZiAoKCFmaWx0ZXJOb2RlVHlwZXMgfHwgcmVnZXgudGVzdChub2RlLm5vZGVUeXBlKSkgJiYgKCFmaWx0ZXJFeGlzdHMgfHwgZmlsdGVyKG5vZGUpKSkgewogICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBub2RlczsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNwZWN0KHJhbmdlKSB7CiAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHJhbmdlLmdldE5hbWUgPT0gInVuZGVmaW5lZCIpID8gIlJhbmdlIiA6IHJhbmdlLmdldE5hbWUoKTsKICAgICAgICByZXR1cm4gIlsiICsgbmFtZSArICIoIiArIGRvbS5pbnNwZWN0Tm9kZShyYW5nZS5zdGFydENvbnRhaW5lcikgKyAiOiIgKyByYW5nZS5zdGFydE9mZnNldCArICIsICIgKwogICAgICAgICAgICAgICAgZG9tLmluc3BlY3ROb2RlKHJhbmdlLmVuZENvbnRhaW5lcikgKyAiOiIgKyByYW5nZS5lbmRPZmZzZXQgKyAiKV0iOwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gUmFuZ2VJdGVyYXRvciBjb2RlIHBhcnRpYWxseSBib3Jyb3dzIGZyb20gSUVSYW5nZSBieSBUaW0gUnlhbiAoaHR0cDovL2dpdGh1Yi5jb20vdGltY2FtZXJvbnJ5YW4vSUVSYW5nZSkKCiAgICBmdW5jdGlvbiBSYW5nZUl0ZXJhdG9yKHJhbmdlLCBjbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKSB7CiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlOwogICAgICAgIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcyA9IGNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXM7CgoKICAgICAgICBpZiAoIXJhbmdlLmNvbGxhcHNlZCkgewogICAgICAgICAgICB0aGlzLnNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7CiAgICAgICAgICAgIHRoaXMuc28gPSByYW5nZS5zdGFydE9mZnNldDsKICAgICAgICAgICAgdGhpcy5lYyA9IHJhbmdlLmVuZENvbnRhaW5lcjsKICAgICAgICAgICAgdGhpcy5lbyA9IHJhbmdlLmVuZE9mZnNldDsKICAgICAgICAgICAgdmFyIHJvb3QgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjsKCiAgICAgICAgICAgIGlmICh0aGlzLnNjID09PSB0aGlzLmVjICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5zYykpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLl9maXJzdCA9IHRoaXMuX2xhc3QgPSB0aGlzLl9uZXh0ID0gdGhpcy5zYzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gdGhpcy5fbmV4dCA9ICh0aGlzLnNjID09PSByb290ICYmICFpc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMuc2MpKSA/CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYy5jaGlsZE5vZGVzW3RoaXMuc29dIDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4odGhpcy5zYywgcm9vdCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0ID0gKHRoaXMuZWMgPT09IHJvb3QgJiYgIWlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5lYykpID8KICAgICAgICAgICAgIA==ICAgICAgIHRoaXMuZWMuY2hpbGROb2Rlc1t0aGlzLmVvIC0gMV0gOiBnZXRDbG9zZXN0QW5jZXN0b3JJbih0aGlzLmVjLCByb290LCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBSYW5nZUl0ZXJhdG9yLnByb3RvdHlwZSA9IHsKICAgICAgICBfY3VycmVudDogbnVsbCwKICAgICAgICBfbmV4dDogbnVsbCwKICAgICAgICBfZmlyc3Q6IG51bGwsCiAgICAgICAgX2xhc3Q6IG51bGwsCiAgICAgICAgaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZTogZmFsc2UsCgogICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuX25leHQgPSB0aGlzLl9maXJzdDsKICAgICAgICB9LAoKICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fbmV4dDsKICAgICAgICB9LAoKICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gTW92ZSB0byBuZXh0IG5vZGUKICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dDsKICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHsKICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSAoY3VycmVudCAhPT0gdGhpcy5fbGFzdCkgPyBjdXJyZW50Lm5leHRTaWJsaW5nIDogbnVsbDsKCiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgcGFydGlhbGx5IHNlbGVjdGVkIHRleHQgbm9kZXMKICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGN1cnJlbnQpICYmIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcykgewogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmVjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5jbG9uZU5vZGUodHJ1ZSkpLmRlbGV0ZURhdGEodGhpcy5lbywgY3VycmVudC5sZW5ndGggLSB0aGlzLmVvKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnQgPT09IHRoaXMuc2MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmNsb25lTm9kZSh0cnVlKSkuZGVsZXRlRGF0YSgwLCB0aGlzLnNvKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBjdXJyZW50OwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudCwgc3RhcnQsIGVuZDsKCiAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGN1cnJlbnQpICYmIChjdXJyZW50ID09PSB0aGlzLnNjIHx8IGN1cnJlbnQgPT09IHRoaXMuZWMpKSB7CiAgICAgICAgICAgICAgICBzdGFydCA9IChjdXJyZW50ID09PSB0aGlzLnNjKSA/IHRoaXMuc28gOiAwOwogICAgICAgICAgICAgICAgZW5kID0gKGN1cnJlbnQgPT09IHRoaXMuZWMpID8gdGhpcy5lbyA6IGN1cnJlbnQubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKHN0YXJ0ICE9IGVuZCkgewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZGVsZXRlRGF0YShzdGFydCwgZW5kIC0gc3RhcnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50Tm9kZSkgewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGN1cnJlbnQgbm9kZSBpcyBwYXJ0aWFsbHkgc2VsZWN0ZWQKICAgICAgICBpc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgICAgcmV0dXJuIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGN1cnJlbnQsIHRoaXMucmFuZ2UpOwogICAgICAgIH0sCgogICAgICAgIGdldFN1YnRyZWVJdGVyYXRvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBzdWJSYW5nZTsKICAgICAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSkgewogICAgICAgICAgICAgICAgc3ViUmFuZ2UgPSB0aGlzLnJhbmdlLmNsb25lUmFuZ2UoKTsKICAgICAgICAgICAgICAgIHN1YlJhbmdlLmNvbGxhcHNlKGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN1YlJhbmdlID0gbmV3IFJhbmdlKGdldFJhbmdlRG9jdW1lbnQodGhpcy5yYW5nZSkpOwogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50OwogICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29udGFpbmVyID0gY3VycmVudCwgc3RhcnRPZmZzZXQgPSAwLCBlbmRDb250YWluZXIgPSBjdXJyZW50LCBlbmRPZmZzZXQgPSBnZXROb2RlTGVuZ3RoKGN1cnJlbnQpOwoKICAgICAgICAgICAgICAgIGlmIChpc09ySXNBbmNlc3Rvck9mKGN1cnJlbnQsIHRoaXMuc2MpKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB0aGlzLnNjOwogICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gdGhpcy5zbzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpc09ySXNBbmNlc3Rvck9mKGN1cnJlbnQsIHRoaXMuZWMpKSB7CiAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGhpcy5lYzsKICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSB0aGlzLmVvOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHVwZGF0ZUJvdW5kYXJpZXMoc3ViUmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2VJdGVyYXRvcihzdWJSYW5nZSwgdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKTsKICAgICAgICB9LAoKICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uKGRldGFjaFJhbmdlKSB7CiAgICAgICAgICAgIGlmIChkZXRhY2hSYW5nZSkgewogICAgICAgICAgICAgICAgdGhpcy5yYW5nZS5kZXRhY2goKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnJhbmdlID0gdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQgPSB0aGlzLl9maXJzdCA9IHRoaXMuX2xhc3QgPSB0aGlzLnNjID0gdGhpcy5zbyA9IHRoaXMuZWMgPSB0aGlzLmVvID0gbnVsbDsKICAgICAgICB9CiAgICB9OwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gRXhjZXB0aW9ucwoKICAgIGZ1bmN0aW9uIFJhbmdlRXhjZXB0aW9uKGNvZGVOYW1lKSB7CiAgICAgICAgdGhpcy5jb2RlID0gdGhpc1tjb2RlTmFtZV07CiAgICAgICAgdGhpcy5jb2RlTmFtZSA9IGNvZGVOYW1lOwogICAgICAgIHRoaXMubWVzc2FnZSA9ICJSYW5nZUV4Y2VwdGlvbjogIiArIHRoaXMuY29kZU5hbWU7CiAgICB9CgogICAgUmFuZ2VFeGNlcHRpb24ucHJvdG90eXBlID0gewogICAgICAgIEJBRF9CT1VOREFSWVBPSU5UU19FUlI6IDEsCiAgICAgICAgSU5WQUxJRF9OT0RFX1RZUEVfRVJSOiAyCiAgICB9OwoKICAgIFJhbmdlRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7CiAgICB9OwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgdmFyIGJlZm9yZUFmdGVyTm9kZVR5cGVzID0gWzEsIDMsIDQsIDUsIDcsIDgsIDEwXTsKICAgIHZhciByb290Q29udGFpbmVyTm9kZVR5cGVzIA==PSBbMiwgOSwgMTFdOwogICAgdmFyIHJlYWRvbmx5Tm9kZVR5cGVzID0gWzUsIDYsIDEwLCAxMl07CiAgICB2YXIgaW5zZXJ0YWJsZU5vZGVUeXBlcyA9IFsxLCAzLCA0LCA1LCA3LCA4LCAxMCwgMTFdOwogICAgdmFyIHN1cnJvdW5kTm9kZVR5cGVzID0gWzEsIDMsIDQsIDUsIDcsIDhdOwoKICAgIGZ1bmN0aW9uIGNyZWF0ZUFuY2VzdG9yRmluZGVyKG5vZGVUeXBlcykgewogICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBzZWxmSXNBbmNlc3RvcikgewogICAgICAgICAgICB2YXIgdCwgbiA9IHNlbGZJc0FuY2VzdG9yID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgd2hpbGUgKG4pIHsKICAgICAgICAgICAgICAgIHQgPSBuLm5vZGVUeXBlOwogICAgICAgICAgICAgICAgaWYgKGFycmF5Q29udGFpbnMobm9kZVR5cGVzLCB0KSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9OwogICAgfQoKICAgIHZhciBnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIgPSBjcmVhdGVBbmNlc3RvckZpbmRlciggWzksIDExXSApOwogICAgdmFyIGdldFJlYWRvbmx5QW5jZXN0b3IgPSBjcmVhdGVBbmNlc3RvckZpbmRlcihyZWFkb25seU5vZGVUeXBlcyk7CiAgICB2YXIgZ2V0RG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3IgPSBjcmVhdGVBbmNlc3RvckZpbmRlciggWzYsIDEwLCAxMl0gKTsKCiAgICBmdW5jdGlvbiBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGFsbG93U2VsZikgewogICAgICAgIGlmIChnZXREb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCBhbGxvd1NlbGYpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUV4Y2VwdGlvbigiSU5WQUxJRF9OT0RFX1RZUEVfRVJSIik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydE5vdERldGFjaGVkKHJhbmdlKSB7CiAgICAgICAgaWYgKCFyYW5nZS5zdGFydENvbnRhaW5lcikgewogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTlZBTElEX1NUQVRFX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGludmFsaWRUeXBlcykgewogICAgICAgIGlmICghYXJyYXlDb250YWlucyhpbnZhbGlkVHlwZXMsIG5vZGUubm9kZVR5cGUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUV4Y2VwdGlvbigiSU5WQUxJRF9OT0RFX1RZUEVfRVJSIik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkgewogICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpID8gbm9kZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTkRFWF9TSVpFX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnRTYW1lRG9jdW1lbnRPckZyYWdtZW50KG5vZGUxLCBub2RlMikgewogICAgICAgIGlmIChnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTEsIHRydWUpICE9PSBnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTIsIHRydWUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIldST05HX0RPQ1VNRU5UX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnROb2RlTm90UmVhZE9ubHkobm9kZSkgewogICAgICAgIGlmIChnZXRSZWFkb25seUFuY2VzdG9yKG5vZGUsIHRydWUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUsIGNvZGVOYW1lKSB7CiAgICAgICAgaWYgKCFub2RlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oY29kZU5hbWUpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBpc09ycGhhbihub2RlKSB7CiAgICAgICAgcmV0dXJuIChjcmFzaHlUZXh0Tm9kZXMgJiYgZG9tLmlzQnJva2VuTm9kZShub2RlKSkgfHwKICAgICAgICAgICAgIWFycmF5Q29udGFpbnMocm9vdENvbnRhaW5lck5vZGVUeXBlcywgbm9kZS5ub2RlVHlwZSkgJiYgIWdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lcihub2RlLCB0cnVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1ZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkgewogICAgICAgIHJldHVybiBvZmZzZXQgPD0gKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkgPyBub2RlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzUmFuZ2VWYWxpZChyYW5nZSkgewogICAgICAgIHJldHVybiAoISFyYW5nZS5zdGFydENvbnRhaW5lciAmJiAhIXJhbmdlLmVuZENvbnRhaW5lcgogICAgICAgICAgICAgICAgJiYgIWlzT3JwaGFuKHJhbmdlLnN0YXJ0Q29udGFpbmVyKQogICAgICAgICAgICAgICAgJiYgIWlzT3JwaGFuKHJhbmdlLmVuZENvbnRhaW5lcikKICAgICAgICAgICAgICAgICYmIGlzVmFsaWRPZmZzZXQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KQogICAgICAgICAgICAgICAgJiYgaXNWYWxpZE9mZnNldChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydFJhbmdlVmFsaWQocmFuZ2UpIHsKICAgICAgICBhc3NlcnROb3REZXRhY2hlZChyYW5nZSk7CiAgICAgICAgaWYgKCFpc1JhbmdlVmFsaWQocmFuZ2UpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiUmFuZ2UgZXJyb3I6IFJhbmdlIGlzIG5vIGxvbmdlciB2YWxpZCBhZnRlciBET00gbXV0YXRpb24gKCIgKyByYW5nZS5pbnNwZWN0KCkgKyAiKSIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIFRlc3QgdGhlIGJyb3dzZXIncyBpbm5lckhUTUwgc3VwcG9ydCB0byBkZWNpZGUgaG93IHRvIGltcGxlbWVudCBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQKICAgIHZhciBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKICAgIHZhciBodG1sUGFyc2luZ0NvbmZvcm1zID0gZmFsc2U7CiAgICB0cnkgewogICAgICAgIHN0eWxlRWwuaW5uZXJIVE1MID0gIjxiPng8L2I+IjsKICAgICAgICBodG1sUGFyc2luZ0NvbmZvcm1zID0gKHN0eWxlRWwuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAzKTsgLy8gT3BlcmEgaW5jb3JyZWN0bHkgY3JlYXRlcyBhbiBlbGVtZW50IG5vZGUKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAvLyBJRSA2IGFuZCA3IHRocm93CiAgICB9CgogICAgYXBpLmZlYXR1cmVzLmh0bWxQYXJzaW5nQ29uZm9ybXMgPSBodG1sUGFyc2luZ0NvbmZvcm1zOwoKICAgIHZhciBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgPSBodG1sUGFyc2luZ0NvbmZvcm1zID8KCiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gYXMgcGVyIEhUTUwgcGFyc2luZyBzcGVjLCB0cnVzdGluZyBpbiB0aGUgYnJvd3NlcidzIGltcGxlbWVudGF0aW9uIG9mIGlubmVySFRNTC4gU2VlCiAgICAgICAgLy8gZGlzY3Vzc2lvbiBhbmQgYmFzZSBjb2RlIGZvciB0aGlzIGltcGxlbWVudGF0aW9uIGF0IGlzc3VlIDY3LgogICAgICAgIC8vIFNwZWM6IGh0dHA6Ly9odG1sNS5vcmcvc3BlY3MvZG9tLXBhcnNpbmcuaHRtbCNleHRlbnNpb25zLXRvLXRoZS1yYW5nZS1pbnRlcmZhY2UKICAgICAgICAvLyBUaGFua3MgdG8gQWxla3MgV2lsbGlhbXMuCiAgICAgICAgZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHsKICAgICAgICAgICAgLy8gIkxldCBub2RlIHRoZSBjb250ZXh0IG9iamVjdCdzIA==c3RhcnQncyBub2RlLiIKICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Q29udGFpbmVyOwogICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQobm9kZSk7CgogICAgICAgICAgICAvLyAiSWYgdGhlIGNvbnRleHQgb2JqZWN0J3Mgc3RhcnQncyBub2RlIGlzIG51bGwsIHJhaXNlIGFuIElOVkFMSURfU1RBVEVfRVJSCiAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBhbmQgYWJvcnQgdGhlc2Ugc3RlcHMuIgogICAgICAgICAgICBpZiAoIW5vZGUpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIklOVkFMSURfU1RBVEVfRVJSIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vICJMZXQgZWxlbWVudCBiZSBhcyBmb2xsb3dzLCBkZXBlbmRpbmcgb24gbm9kZSdzIGludGVyZmFjZToiCiAgICAgICAgICAgIC8vIERvY3VtZW50LCBEb2N1bWVudCBGcmFnbWVudDogbnVsbAogICAgICAgICAgICB2YXIgZWwgPSBudWxsOwoKICAgICAgICAgICAgLy8gIkVsZW1lbnQ6IG5vZGUiCiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHsKICAgICAgICAgICAgICAgIGVsID0gbm9kZTsKCiAgICAgICAgICAgIC8vICJUZXh0LCBDb21tZW50OiBub2RlJ3MgcGFyZW50RWxlbWVudCIKICAgICAgICAgICAgfSBlbHNlIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpKSB7CiAgICAgICAgICAgICAgICBlbCA9IGRvbS5wYXJlbnRFbGVtZW50KG5vZGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyAiSWYgZWl0aGVyIGVsZW1lbnQgaXMgbnVsbCBvciBlbGVtZW50J3Mgb3duZXJEb2N1bWVudCBpcyBhbiBIVE1MIGRvY3VtZW50CiAgICAgICAgICAgIC8vIGFuZCBlbGVtZW50J3MgbG9jYWwgbmFtZSBpcyAiaHRtbCIgYW5kIGVsZW1lbnQncyBuYW1lc3BhY2UgaXMgdGhlIEhUTUwKICAgICAgICAgICAgLy8gbmFtZXNwYWNlIgogICAgICAgICAgICBpZiAoZWwgPT09IG51bGwgfHwgKAogICAgICAgICAgICAgICAgZWwubm9kZU5hbWUgPT0gIkhUTUwiCiAgICAgICAgICAgICAgICAmJiBkb20uaXNIdG1sTmFtZXNwYWNlKGdldERvY3VtZW50KGVsKS5kb2N1bWVudEVsZW1lbnQpCiAgICAgICAgICAgICAgICAmJiBkb20uaXNIdG1sTmFtZXNwYWNlKGVsKQogICAgICAgICAgICApKSB7CgogICAgICAgICAgICAvLyAibGV0IGVsZW1lbnQgYmUgYSBuZXcgRWxlbWVudCB3aXRoICJib2R5IiBhcyBpdHMgbG9jYWwgbmFtZSBhbmQgdGhlIEhUTUwKICAgICAgICAgICAgLy8gbmFtZXNwYWNlIGFzIGl0cyBuYW1lc3BhY2UuIiIKICAgICAgICAgICAgICAgIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoImJvZHkiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGVsID0gZWwuY2xvbmVOb2RlKGZhbHNlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gIklmIHRoZSBub2RlJ3MgZG9jdW1lbnQgaXMgYW4gSFRNTCBkb2N1bWVudDogSW52b2tlIHRoZSBIVE1MIGZyYWdtZW50IHBhcnNpbmcgYWxnb3JpdGhtLiIKICAgICAgICAgICAgLy8gIklmIHRoZSBub2RlJ3MgZG9jdW1lbnQgaXMgYW4gWE1MIGRvY3VtZW50OiBJbnZva2UgdGhlIFhNTCBmcmFnbWVudCBwYXJzaW5nIGFsZ29yaXRobS4iCiAgICAgICAgICAgIC8vICJJbiBlaXRoZXIgY2FzZSwgdGhlIGFsZ29yaXRobSBtdXN0IGJlIGludm9rZWQgd2l0aCBmcmFnbWVudCBhcyB0aGUgaW5wdXQKICAgICAgICAgICAgLy8gYW5kIGVsZW1lbnQgYXMgdGhlIGNvbnRleHQgZWxlbWVudC4iCiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGZyYWdtZW50U3RyOwoKICAgICAgICAgICAgLy8gIklmIHRoaXMgcmFpc2VzIGFuIGV4Y2VwdGlvbiwgdGhlbiBhYm9ydCB0aGVzZSBzdGVwcy4gT3RoZXJ3aXNlLCBsZXQgbmV3CiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGJlIHRoZSBub2RlcyByZXR1cm5lZC4iCgogICAgICAgICAgICAvLyAiTGV0IGZyYWdtZW50IGJlIGEgbmV3IERvY3VtZW50RnJhZ21lbnQuIgogICAgICAgICAgICAvLyAiQXBwZW5kIGFsbCBuZXcgY2hpbGRyZW4gdG8gZnJhZ21lbnQuIgogICAgICAgICAgICAvLyAiUmV0dXJuIGZyYWdtZW50LiIKICAgICAgICAgICAgcmV0dXJuIGRvbS5mcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4oZWwpOwogICAgICAgIH0gOgoKICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGlubmVySFRNTCBjYW5ub3QgYmUgdHJ1c3RlZCwgc28gZmFsbCBiYWNrIHRvIGEgc2ltcGxlciwgbm9uLWNvbmZvcm1hbnQgaW1wbGVtZW50YXRpb24gdGhhdAogICAgICAgIC8vIHByZXZpb3VzIHZlcnNpb25zIG9mIFJhbmd5IHVzZWQgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB1c2luZyBhIGJvZHkgZWxlbWVudCByYXRoZXIgdGhhbiBhIGRpdikKICAgICAgICBmdW5jdGlvbihmcmFnbWVudFN0cikgewogICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgdmFyIGRvYyA9IGdldFJhbmdlRG9jdW1lbnQodGhpcyk7CiAgICAgICAgICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCJib2R5Iik7CiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGZyYWdtZW50U3RyOwoKICAgICAgICAgICAgcmV0dXJuIGRvbS5mcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4oZWwpOwogICAgICAgIH07CgogICAgZnVuY3Rpb24gc3BsaXRSYW5nZUJvdW5kYXJpZXMocmFuZ2UsIHBvc2l0aW9uc1RvUHJlc2VydmUpIHsKICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlKTsKCiAgICAgICAgdmFyIHNjID0gcmFuZ2Uuc3RhcnRDb250YWluZXIsIHNvID0gcmFuZ2Uuc3RhcnRPZmZzZXQsIGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyLCBlbyA9IHJhbmdlLmVuZE9mZnNldDsKICAgICAgICB2YXIgc3RhcnRFbmRTYW1lID0gKHNjID09PSBlYyk7CgogICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGVjKSAmJiBlbyA+IDAgJiYgZW8gPCBlYy5sZW5ndGgpIHsKICAgICAgICAgICAgc3BsaXREYXRhTm9kZShlYywgZW8sIHBvc2l0aW9uc1RvUHJlc2VydmUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpICYmIHNvID4gMCAmJiBzbyA8IHNjLmxlbmd0aCkgewogICAgICAgICAgICBzYyA9IHNwbGl0RGF0YU5vZGUoc2MsIHNvLCBwb3NpdGlvbnNUb1ByZXNlcnZlKTsKICAgICAgICAgICAgaWYgKHN0YXJ0RW5kU2FtZSkgewogICAgICAgICAgICAgICAgZW8gLT0gc287CiAgICAgICAgICAgICAgICBlYyA9IHNjOwogICAgICAgICAgICB9IGVsc2UgaWYgKGVjID09IHNjLnBhcmVudE5vZGUgJiYgZW8gPj0gZ2V0Tm9kZUluZGV4KHNjKSkgewogICAgICAgICAgICAgICAgZW8rKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBzbyA9IDA7CiAgICAgICAgfQogICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKHNjLCBzbywgZWMsIGVvKTsKICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIHZhciByYW5nZVByb3BlcnRpZXMgPSBbInN0YXJ0Q29udGFpbmVyIiwgInN0YXJ0T2Zmc2V0IiwgImVuZENvbnRhaW5lciIsICJlbmRPZmZzZXQiLCAiY29sbGFwc2VkIiwKICAgICAgICAiY29tbW9uQW5jZXN0b3JDb250YWluZXIiXTsKCiAgICB2YXIgczJzID0gMCwgczJlID0gMSwgZTJlID0gMiwgZTJzID0gMzsKICAgIHZhciBuX2IgPSAwLCBuX2EgPSAxLCBuX2JfYSA9IDIsIG5faSA9IDM7CgogICAgZnVuY3Rpb24gUmFuZ2VQcm90b3R5cGUoKSB7fQoKICAgIFJhbmdlUHJvdG90eXBlLnByb3RvdHlwZSA9IHsKICAgICAgICBjb21wYXJlQm91bmRhcnlQb2ludHM6IGZ1bmN0aW9uKGhvdywgcmFuZ2UpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudCh0aGlzLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lcik7CgogICAgICAgICAgICB2YXIgbm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCOwogICAgICAgICAgICB2YXIgcHJlZg==aXhBID0gKGhvdyA9PSBlMnMgfHwgaG93ID09IHMycykgPyAic3RhcnQiIDogImVuZCI7CiAgICAgICAgICAgIHZhciBwcmVmaXhCID0gKGhvdyA9PSBzMmUgfHwgaG93ID09IHMycykgPyAic3RhcnQiIDogImVuZCI7CiAgICAgICAgICAgIG5vZGVBID0gdGhpc1twcmVmaXhBICsgIkNvbnRhaW5lciJdOwogICAgICAgICAgICBvZmZzZXRBID0gdGhpc1twcmVmaXhBICsgIk9mZnNldCJdOwogICAgICAgICAgICBub2RlQiA9IHJhbmdlW3ByZWZpeEIgKyAiQ29udGFpbmVyIl07CiAgICAgICAgICAgIG9mZnNldEIgPSByYW5nZVtwcmVmaXhCICsgIk9mZnNldCJdOwogICAgICAgICAgICByZXR1cm4gY29tcGFyZVBvaW50cyhub2RlQSwgb2Zmc2V0QSwgbm9kZUIsIG9mZnNldEIpOwogICAgICAgIH0sCgogICAgICAgIGluc2VydE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBpbnNlcnRhYmxlTm9kZVR5cGVzKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpOwoKICAgICAgICAgICAgaWYgKGlzT3JJc0FuY2VzdG9yT2Yobm9kZSwgdGhpcy5zdGFydENvbnRhaW5lcikpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIkhJRVJBUkNIWV9SRVFVRVNUX0VSUiIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBObyBjaGVjayBmb3Igd2hldGhlciB0aGUgY29udGFpbmVyIG9mIHRoZSBzdGFydCBvZiB0aGUgUmFuZ2UgaXMgb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWxsb3cKICAgICAgICAgICAgLy8gY2hpbGRyZW4gb2YgdGhlIHR5cGUgb2Ygbm9kZTogdGhlIGJyb3dzZXIncyBET00gaW1wbGVtZW50YXRpb24gc2hvdWxkIGRvIHRoaXMgZm9yIHVzIHdoZW4gd2UgYXR0ZW1wdAogICAgICAgICAgICAvLyB0byBhZGQgdGhlIG5vZGUKCiAgICAgICAgICAgIHZhciBmaXJzdE5vZGVJbnNlcnRlZCA9IGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpOwogICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKGZpcnN0Tm9kZUluc2VydGVkKTsKICAgICAgICB9LAoKICAgICAgICBjbG9uZUNvbnRlbnRzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKCiAgICAgICAgICAgIHZhciBjbG9uZSwgZnJhZzsKICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2VkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydENvbnRhaW5lciA9PT0gdGhpcy5lbmRDb250YWluZXIgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnN0YXJ0Q29udGFpbmVyKSkgewogICAgICAgICAgICAgICAgICAgIGNsb25lID0gdGhpcy5zdGFydENvbnRhaW5lci5jbG9uZU5vZGUodHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZGF0YSA9IGNsb25lLmRhdGEuc2xpY2UodGhpcy5zdGFydE9mZnNldCwgdGhpcy5lbmRPZmZzZXQpOwogICAgICAgICAgICAgICAgICAgIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGNsb25lKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJhZzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFJhbmdlSXRlcmF0b3IodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBjbG9uZVN1YnRyZWUoaXRlcmF0b3IpOwogICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY2FuU3Vycm91bmRDb250ZW50czogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLnN0YXJ0Q29udGFpbmVyKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuZW5kQ29udGFpbmVyKTsKCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZW50cyBjYW4gYmUgc3Vycm91bmRlZC4gU3BlY2lmaWNhbGx5LCB0aGlzIG1lYW5zIHdoZXRoZXIgdGhlIHJhbmdlIHBhcnRpYWxseSBzZWxlY3RzCiAgICAgICAgICAgIC8vIG5vIG5vbi10ZXh0IG5vZGVzLgogICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTsKICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXNJbnZhbGlkID0gKGl0ZXJhdG9yLl9maXJzdCAmJiAoaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2ZpcnN0LCB0aGlzKSkgfHwKICAgICAgICAgICAgICAgICAgICAoaXRlcmF0b3IuX2xhc3QgJiYgaXNOb25UZXh0UGFydGlhbGx5U2VsZWN0ZWQoaXRlcmF0b3IuX2xhc3QsIHRoaXMpKSk7CiAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICByZXR1cm4gIWJvdW5kYXJpZXNJbnZhbGlkOwogICAgICAgIH0sCgogICAgICAgIHN1cnJvdW5kQ29udGVudHM6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBzdXJyb3VuZE5vZGVUeXBlcyk7CgogICAgICAgICAgICBpZiAoIXRoaXMuY2FuU3Vycm91bmRDb250ZW50cygpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFeGNlcHRpb24oIkJBRF9CT1VOREFSWVBPSU5UU19FUlIiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgY29udGVudHMKICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmV4dHJhY3RDb250ZW50cygpOwoKICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGNoaWxkcmVuIG9mIHRoZSBub2RlCiAgICAgICAgICAgIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkgewogICAgICAgICAgICAgICAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSB7CiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEluc2VydCB0aGUgbmV3IG5vZGUgYW5kIGFkZCB0aGUgZXh0cmFjdGVkIGNvbnRlbnRzCiAgICAgICAgICAgIGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpOwogICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpOwoKICAgICAgICAgICAgdGhpcy5zZWxlY3ROb2RlKG5vZGUpOwogICAgICAgIH0sCgogICAgICAgIGNsb25lUmFuZ2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICB2YXIgcmFuZ2UgPSBuZXcgUmFuZ2UoZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKSk7CiAgICAgICAgICAgIHZhciBpID0gcmFuZ2VQcm9wZXJ0aWVzLmxlbmd0aCwgcHJvcDsKICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgcHJvcCA9IHJhbmdlUHJvcGVydGllc1tpXTsKICAgICAgICAgICAgICAgIHJhbmdlW3Byb3BdID0gdGhpc1twcm9wXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmFuZ2U7CiAgICAgICAgfSwKCiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICB2YXIgc2MgPSB0aGlzLnN0YXJ0Q29udGFpbmVyOwogICAgICAgICAgICBpZiAoc2MgPT09IHRoaXMuZW5kQ29udGFpbmVyICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKHNjLm5vZGVUeXBlID09IDMgfHwgc2Mubm9kZVR5cGUgPT0gNCkgPyBzYy5kYXRhLnNsaQ==Y2UodGhpcy5zdGFydE9mZnNldCwgdGhpcy5lbmRPZmZzZXQpIDogIiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgdGV4dEJpdHMgPSBbXSwgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKGl0ZXJhdG9yLCBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gQWNjZXB0IG9ubHkgdGV4dCBvciBDREFUQSBub2Rlcywgbm90IGNvbW1lbnRzCiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyB8fCBub2RlLm5vZGVUeXBlID09IDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEJpdHMucHVzaChub2RlLmRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dEJpdHMuam9pbigiIik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBUaGUgbWV0aG9kcyBiZWxvdyBhcmUgYWxsIG5vbi1zdGFuZGFyZC4gVGhlIGZvbGxvd2luZyBiYXRjaCB3ZXJlIGludHJvZHVjZWQgYnkgTW96aWxsYSBidXQgaGF2ZSBzaW5jZQogICAgICAgIC8vIGJlZW4gcmVtb3ZlZCBmcm9tIE1vemlsbGEuCgogICAgICAgIGNvbXBhcmVOb2RlOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CgogICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlOwogICAgICAgICAgICB2YXIgbm9kZUluZGV4ID0gZ2V0Tm9kZUluZGV4KG5vZGUpOwoKICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIk5PVF9GT1VORF9FUlIiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IHRoaXMuY29tcGFyZVBvaW50KHBhcmVudCwgbm9kZUluZGV4KSwKICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSB0aGlzLmNvbXBhcmVQb2ludChwYXJlbnQsIG5vZGVJbmRleCArIDEpOwoKICAgICAgICAgICAgaWYgKHN0YXJ0Q29tcGFyaXNvbiA8IDApIHsgLy8gTm9kZSBzdGFydHMgYmVmb3JlCiAgICAgICAgICAgICAgICByZXR1cm4gKGVuZENvbXBhcmlzb24gPiAwKSA/IG5fYl9hIDogbl9iOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIChlbmRDb21wYXJpc29uID4gMCkgPyBuX2EgOiBuX2k7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjb21wYXJlUG9pbnQ6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICBhc3NlcnROb2RlKG5vZGUsICJISUVSQVJDSFlfUkVRVUVTVF9FUlIiKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKTsKCiAgICAgICAgICAgIGlmIChjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCkgPCAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPiAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9LAoKICAgICAgICBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQ6IGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCwKCiAgICAgICAgdG9IdG1sOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTsKICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpOwogICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jbG9uZUNvbnRlbnRzKCkpOwogICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTDsKICAgICAgICB9LAoKICAgICAgICAvLyB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nIGRldGVybWluZXMgd2hldGhlciB0aGlzIG1ldGhvZCBjb25zaWRlcnMgYSBub2RlIHRoYXQgYm9yZGVycyBhIHJhbmdlIGludGVyc2VjdHMKICAgICAgICAvLyB3aXRoIGl0IChhcyBpbiBXZWJLaXQpIG9yIG5vdCAoYXMgaW4gR2Vja28gcHJlLTEuOSwgYW5kIHRoZSBkZWZhdWx0KQogICAgICAgIGludGVyc2VjdHNOb2RlOiBmdW5jdGlvbihub2RlLCB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nKSB7CiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgIGFzc2VydE5vZGUobm9kZSwgIk5PVF9GT1VORF9FUlIiKTsKICAgICAgICAgICAgaWYgKGdldERvY3VtZW50KG5vZGUpICE9PSBnZXRSYW5nZURvY3VtZW50KHRoaXMpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUsIG9mZnNldCA9IGdldE5vZGVJbmRleChub2RlKTsKICAgICAgICAgICAgYXNzZXJ0Tm9kZShwYXJlbnQsICJOT1RfRk9VTkRfRVJSIik7CgogICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhwYXJlbnQsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSwKICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHBhcmVudCwgb2Zmc2V0ICsgMSwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7CgogICAgICAgICAgICByZXR1cm4gdG91Y2hpbmdJc0ludGVyc2VjdGluZyA/IHN0YXJ0Q29tcGFyaXNvbiA8PSAwICYmIGVuZENvbXBhcmlzb24gPj0gMCA6IHN0YXJ0Q29tcGFyaXNvbiA8IDAgJiYgZW5kQ29tcGFyaXNvbiA+IDA7CiAgICAgICAgfSwKCiAgICAgICAgaXNQb2ludEluUmFuZ2U6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICBhc3NlcnROb2RlKG5vZGUsICJISUVSQVJDSFlfUkVRVUVTVF9FUlIiKTsKICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKTsKCiAgICAgICAgICAgIHJldHVybiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpID49IDApICYmCiAgICAgICAgICAgICAgICAgICAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPD0gMCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gVGhlIG1ldGhvZHMgYmVsb3cgYXJlIG5vbi1zdGFuZGFyZCBhbmQgaW52ZW50ZWQgYnkgbWUuCgogICAgICAgIC8vIFNoYXJpbmcgYSBib3VuZGFyeSBzdGFydC10by1lbmQgb3IgZW5kLXRvLXN0YXJ0IGRvZXMgbm90IGNvdW50IGFzIGludGVyc2VjdGlvbi4KICAgICAgICBpbnRlcnNlY3RzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiByYW5nZXNJbnRlcnNlY3QodGhpcywgcmFuZ2UsIGZhbHNlKTsKICAgICAgICB9LAoKICAgICAgICAvLyBTaGFyaW5nIGEgYm91bmRhcnkgc3RhcnQtdG8tZW5kIG9yIGVuZC10by1zdGFydCBkb2VzIGNvdW50IGFzIGludGVyc2VjdGlvbi4KICAgICAgICBpbnRlcnNlY3RzT3JUb3VjaGVzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiByYW5nZXNJbnRlcnNlY3QodGhpcywgcmFuZ2UsIHRydWUpOwogICAgICAgIH0sCgogICAgICAgIGludGVyc2VjdGlvbjogZnVuY3Rpb24ocmFuZ2UpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c1JhbmdlKHJhbmdlKSkgewogICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHModGhpcy5zdGFydENvbnRhaW5lciwgdA==aGlzLnN0YXJ0T2Zmc2V0LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLAogICAgICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCwgcmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOwoKICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25SYW5nZSA9IHRoaXMuY2xvbmVSYW5nZSgpOwogICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29tcGFyaXNvbiA9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZW5kQ29tcGFyaXNvbiA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25SYW5nZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAoKICAgICAgICB1bmlvbjogZnVuY3Rpb24ocmFuZ2UpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c09yVG91Y2hlc1JhbmdlKHJhbmdlKSkgewogICAgICAgICAgICAgICAgdmFyIHVuaW9uUmFuZ2UgPSB0aGlzLmNsb25lUmFuZ2UoKTsKICAgICAgICAgICAgICAgIGlmIChjb21wYXJlUG9pbnRzKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCwgdGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCkgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICB1bmlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdW5pb25SYW5nZS5zZXRFbmQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHVuaW9uUmFuZ2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFeGNlcHRpb24oIlJhbmdlcyBkbyBub3QgaW50ZXJzZWN0Iik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjb250YWluc05vZGU6IGZ1bmN0aW9uKG5vZGUsIGFsbG93UGFydGlhbCkgewogICAgICAgICAgICBpZiAoYWxsb3dQYXJ0aWFsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3RzTm9kZShub2RlLCBmYWxzZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlTm9kZShub2RlKSA9PSBuX2k7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjb250YWluc05vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlUG9pbnQobm9kZSwgMCkgPj0gMCAmJiB0aGlzLmNvbXBhcmVQb2ludChub2RlLCBnZXROb2RlTGVuZ3RoKG5vZGUpKSA8PSAwOwogICAgICAgIH0sCgogICAgICAgIGNvbnRhaW5zUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSB0aGlzLmludGVyc2VjdGlvbihyYW5nZSk7CiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24gIT09IG51bGwgJiYgcmFuZ2UuZXF1YWxzKGludGVyc2VjdGlvbik7CiAgICAgICAgfSwKCiAgICAgICAgY29udGFpbnNOb2RlVGV4dDogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICB2YXIgbm9kZVJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCk7CiAgICAgICAgICAgIG5vZGVSYW5nZS5zZWxlY3ROb2RlKG5vZGUpOwogICAgICAgICAgICB2YXIgdGV4dE5vZGVzID0gbm9kZVJhbmdlLmdldE5vZGVzKFszXSk7CiAgICAgICAgICAgIGlmICh0ZXh0Tm9kZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNldFN0YXJ0KHRleHROb2Rlc1swXSwgMCk7CiAgICAgICAgICAgICAgICB2YXIgbGFzdFRleHROb2RlID0gdGV4dE5vZGVzLnBvcCgpOwogICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNldEVuZChsYXN0VGV4dE5vZGUsIGxhc3RUZXh0Tm9kZS5sZW5ndGgpOwogICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5zID0gdGhpcy5jb250YWluc1JhbmdlKG5vZGVSYW5nZSk7CiAgICAgICAgICAgICAgICBub2RlUmFuZ2UuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbnM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluc05vZGVDb250ZW50cyhub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdldE5vZGVzOiBmdW5jdGlvbihub2RlVHlwZXMsIGZpbHRlcikgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZXNJblJhbmdlKHRoaXMsIG5vZGVUeXBlcywgZmlsdGVyKTsKICAgICAgICB9LAoKICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRSYW5nZURvY3VtZW50KHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIGNvbGxhcHNlQmVmb3JlOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwoKICAgICAgICAgICAgdGhpcy5zZXRFbmRCZWZvcmUobm9kZSk7CiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UoZmFsc2UpOwogICAgICAgIH0sCgogICAgICAgIGNvbGxhcHNlQWZ0ZXI6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CgogICAgICAgICAgICB0aGlzLnNldFN0YXJ0QWZ0ZXIobm9kZSk7CiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodHJ1ZSk7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICBnZXRCb29rbWFyazogZnVuY3Rpb24oY29udGFpbmVyTm9kZSkgewogICAgICAgICAgICB2YXIgZG9jID0gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKTsKICAgICAgICAgICAgdmFyIHByZVNlbGVjdGlvblJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7CiAgICAgICAgICAgIGNvbnRhaW5lck5vZGUgPSBjb250YWluZXJOb2RlIHx8IGRvbS5nZXRCb2R5KGRvYyk7CiAgICAgICAgICAgIHByZVNlbGVjdGlvblJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhjb250YWluZXJOb2RlKTsKICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5pbnRlcnNlY3Rpb24ocHJlU2VsZWN0aW9uUmFuZ2UpOwogICAgICAgICAgICB2YXIgc3RhcnQgPSAwLCBlbmQgPSAwOwogICAgICAgICAgICBpZiAocmFuZ2UpIHsKICAgICAgICAgICAgICAgIHByZVNlbGVjdGlvblJhbmdlLnNldEVuZChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpOwogICAgICAgICAgICAgICAgc3RhcnQgPSBwcmVTZWxlY3Rpb25SYW5nZS50b1N0cmluZygpLmxlbmd0aDsKICAgICAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgcmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7CiAgICAgICAgICAgICAgICBwcmVTZWxlY3Rpb25SYW5nZS5kZXRhY2goKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCwKICAgICAgICAgICAgICAgIGVuZDogZW5kLAogICAgICAgICAgICAgICAgY29udGFpbmVyTm9kZTogY29udGFpbmVyTm9kZQogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgbW92ZVRvQm9va21hcms6IGZ1bmN0aW9uKGJvb2ttYXJrKSB7CiAgICAgICAgICAgIHZhciBjb250YWluZXJOb2RlID0gYm9va21hcmsuY29udGFpbmVyTm9kZTsKICAgICAgICAgICAgdmFyIGNoYXJJbmRleCA9IA==MDsKICAgICAgICAgICAgdGhpcy5zZXRTdGFydChjb250YWluZXJOb2RlLCAwKTsKICAgICAgICAgICAgdGhpcy5jb2xsYXBzZSh0cnVlKTsKICAgICAgICAgICAgdmFyIG5vZGVTdGFjayA9IFtjb250YWluZXJOb2RlXSwgbm9kZSwgZm91bmRTdGFydCA9IGZhbHNlLCBzdG9wID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBuZXh0Q2hhckluZGV4LCBpLCBjaGlsZE5vZGVzOwoKICAgICAgICAgICAgd2hpbGUgKCFzdG9wICYmIChub2RlID0gbm9kZVN0YWNrLnBvcCgpKSkgewogICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMykgewogICAgICAgICAgICAgICAgICAgIG5leHRDaGFySW5kZXggPSBjaGFySW5kZXggKyBub2RlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kU3RhcnQgJiYgYm9va21hcmsuc3RhcnQgPj0gY2hhckluZGV4ICYmIGJvb2ttYXJrLnN0YXJ0IDw9IG5leHRDaGFySW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydChub2RlLCBib29rbWFyay5zdGFydCAtIGNoYXJJbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kU3RhcnQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGFydCAmJiBib29rbWFyay5lbmQgPj0gY2hhckluZGV4ICYmIGJvb2ttYXJrLmVuZCA8PSBuZXh0Q2hhckluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kKG5vZGUsIGJvb2ttYXJrLmVuZCAtIGNoYXJJbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3AgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjaGFySW5kZXggPSBuZXh0Q2hhckluZGV4OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGVzID0gbm9kZS5jaGlsZE5vZGVzOwogICAgICAgICAgICAgICAgICAgIGkgPSBjaGlsZE5vZGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVTdGFjay5wdXNoKGNoaWxkTm9kZXNbaV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdldE5hbWU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gIkRvbVJhbmdlIjsKICAgICAgICB9LAoKICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiBSYW5nZS5yYW5nZXNFcXVhbCh0aGlzLCByYW5nZSk7CiAgICAgICAgfSwKCiAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBpc1JhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7CiAgICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiBjb3B5Q29tcGFyaXNvbkNvbnN0YW50c1RvT2JqZWN0KG9iaikgewogICAgICAgIG9iai5TVEFSVF9UT19TVEFSVCA9IHMyczsKICAgICAgICBvYmouU1RBUlRfVE9fRU5EID0gczJlOwogICAgICAgIG9iai5FTkRfVE9fRU5EID0gZTJlOwogICAgICAgIG9iai5FTkRfVE9fU1RBUlQgPSBlMnM7CgogICAgICAgIG9iai5OT0RFX0JFRk9SRSA9IG5fYjsKICAgICAgICBvYmouTk9ERV9BRlRFUiA9IG5fYTsKICAgICAgICBvYmouTk9ERV9CRUZPUkVfQU5EX0FGVEVSID0gbl9iX2E7CiAgICAgICAgb2JqLk5PREVfSU5TSURFID0gbl9pOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzKGNvbnN0cnVjdG9yKSB7CiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdChjb25zdHJ1Y3Rvcik7CiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdChjb25zdHJ1Y3Rvci5wcm90b3R5cGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIocmVtb3ZlciwgYm91bmRhcnlVcGRhdGVyKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwoKICAgICAgICAgICAgdmFyIHNjID0gdGhpcy5zdGFydENvbnRhaW5lciwgc28gPSB0aGlzLnN0YXJ0T2Zmc2V0LCByb290ID0gdGhpcy5jb21tb25BbmNlc3RvckNvbnRhaW5lcjsKCiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBSYW5nZUl0ZXJhdG9yKHRoaXMsIHRydWUpOwoKICAgICAgICAgICAgLy8gV29yayBvdXQgd2hlcmUgdG8gcG9zaXRpb24gdGhlIHJhbmdlIGFmdGVyIGNvbnRlbnQgcmVtb3ZhbAogICAgICAgICAgICB2YXIgbm9kZSwgYm91bmRhcnk7CiAgICAgICAgICAgIGlmIChzYyAhPT0gcm9vdCkgewogICAgICAgICAgICAgICAgbm9kZSA9IGdldENsb3Nlc3RBbmNlc3RvckluKHNjLCByb290LCB0cnVlKTsKICAgICAgICAgICAgICAgIGJvdW5kYXJ5ID0gZ2V0Qm91bmRhcnlBZnRlck5vZGUobm9kZSk7CiAgICAgICAgICAgICAgICBzYyA9IGJvdW5kYXJ5Lm5vZGU7CiAgICAgICAgICAgICAgICBzbyA9IGJvdW5kYXJ5Lm9mZnNldDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2hlY2sgbm9uZSBvZiB0aGUgcmFuZ2UgaXMgcmVhZC1vbmx5CiAgICAgICAgICAgIGl0ZXJhdGVTdWJ0cmVlKGl0ZXJhdG9yLCBhc3NlcnROb2RlTm90UmVhZE9ubHkpOwoKICAgICAgICAgICAgaXRlcmF0b3IucmVzZXQoKTsKCiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgY29udGVudAogICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSByZW1vdmVyKGl0ZXJhdG9yKTsKICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7CgogICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXcgcG9zaXRpb24KICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHNjLCBzbywgc2MsIHNvKTsKCiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTsKICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3RvdHlwZVJhbmdlKGNvbnN0cnVjdG9yLCBib3VuZGFyeVVwZGF0ZXIsIGRldGFjaGVyKSB7CiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKGlzQmVmb3JlLCBpc1N0YXJ0KSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShnZXRSb290Q29udGFpbmVyKG5vZGUpLCByb290Q29udGFpbmVyTm9kZVR5cGVzKTsKCiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSAoaXNCZWZvcmUgPyBnZXRCb3VuZGFyeUJlZm9yZU5vZGUgOiBnZXRCb3VuZGFyeUFmdGVyTm9kZSkobm9kZSk7CiAgICAgICAgICAgICAgICAoaXNTdGFydCA/IHNldFJhbmdlU3RhcnQgOiBzZXRSYW5nZUVuZCkodGhpcywgYm91bmRhcnkubm9kZSwgYm91bmRhcnkub2Zmc2V0KTsKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHNldFJhbmdlU3RhcnQocmFuZ2UsIG5vZGUsIG9mZnNldCkgewogICAgICAgICAgICB2YXIgZWMgPSByYW5nZS5lbmRDb250YWluZXIsIGVvID0gcmFuZ2UuZW5kT2Zmc2V0OwogICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2Uuc3RhcnRDb250YWluZXIgfHwgb2Zmc2V0ICE9PSByYW5nZS5zdGFydE9mZnNldCkgewogICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJvb3QgY29udGFpbmVycyBvZiB0aGUgcmFuZ2UgYW5kIHRoZSBuZXcgYm91bmRhcnksIGFuZCBhbHNvIGNoZWNrIHdoZXRoZXIgdGhlIG5ldyBib3VuZGFyeQogICAgICAgICAgICAgICAgLy8gaXMgYWZ0ZXIgdGhlIGN1cnJlbnQgZW5kLiBJbiBlaXRoZXIgY2FzZSwgY29sbGFwc2UgdGhlIHJhbmdlIHRvIHRoZSBuZXcgcG9zaXRpb24KICAgICAgICAgICAgICAgIGlmIChnZXRSb290Q29udGFpbmVyKG5vZGUpICE9IGdldA==Um9vdENvbnRhaW5lcihlYykgfHwgY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIGVjLCBlbykgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTsKICAgICAgICAgICAgICAgICAgICBlbyA9IG9mZnNldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcihyYW5nZSwgbm9kZSwgb2Zmc2V0LCBlYywgZW8pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXRSYW5nZUVuZChyYW5nZSwgbm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgIHZhciBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0OwogICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2UuZW5kQ29udGFpbmVyIHx8IG9mZnNldCAhPT0gcmFuZ2UuZW5kT2Zmc2V0KSB7CiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgcm9vdCBjb250YWluZXJzIG9mIHRoZSByYW5nZSBhbmQgdGhlIG5ldyBib3VuZGFyeSwgYW5kIGFsc28gY2hlY2sgd2hldGhlciB0aGUgbmV3IGJvdW5kYXJ5CiAgICAgICAgICAgICAgICAvLyBpcyBhZnRlciB0aGUgY3VycmVudCBlbmQuIEluIGVpdGhlciBjYXNlLCBjb2xsYXBzZSB0aGUgcmFuZ2UgdG8gdGhlIG5ldyBwb3NpdGlvbgogICAgICAgICAgICAgICAgaWYgKGdldFJvb3RDb250YWluZXIobm9kZSkgIT0gZ2V0Um9vdENvbnRhaW5lcihzYykgfHwgY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHNjLCBzbykgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBzYyA9IG5vZGU7CiAgICAgICAgICAgICAgICAgICAgc28gPSBvZmZzZXQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIocmFuZ2UsIHNjLCBzbywgbm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IFJhbmdlUHJvdG90eXBlKCk7CgogICAgICAgIHV0aWwuZXh0ZW5kKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgewogICAgICAgICAgICBzZXRTdGFydDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpOwoKICAgICAgICAgICAgICAgIHNldFJhbmdlU3RhcnQodGhpcywgbm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldEVuZDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7CiAgICAgICAgICAgICAgICBhc3NlcnROb3REZXRhY2hlZCh0aGlzKTsKICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpOwoKICAgICAgICAgICAgICAgIHNldFJhbmdlRW5kKHRoaXMsIG5vZGUsIG9mZnNldCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIHNldCBhIHJhbmdlJ3Mgc3RhcnQgYW5kIGVuZCBib3VuZGFyaWVzLiBPdmVybG9hZGVkIGFzIGZvbGxvd3M6CiAgICAgICAgICAgICAqIC0gVHdvIHBhcmFtZXRlcnMgKG5vZGUsIG9mZnNldCkgY3JlYXRlcyBhIGNvbGxhcHNlZCByYW5nZSBhdCB0aGF0IHBvc2l0aW9uCiAgICAgICAgICAgICAqIC0gVGhyZWUgcGFyYW1ldGVycyAobm9kZSwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCkgY3JlYXRlcyBhIHJhbmdlIGNvbnRhaW5lZCB3aXRoIG5vZGUgc3RhcnRpbmcgYXQKICAgICAgICAgICAgICogICBzdGFydE9mZnNldCBhbmQgZW5kaW5nIGF0IGVuZE9mZnNldAogICAgICAgICAgICAgKiAtIEZvdXIgcGFyYW1ldGVycyAoc3RhcnROb2RlLCBzdGFydE9mZnNldCwgZW5kTm9kZSwgZW5kT2Zmc2V0KSBjcmVhdGVzIGEgcmFuZ2Ugc3RhcnRpbmcgYXQgc3RhcnRPZmZzZXQgaW4KICAgICAgICAgICAgICogICBzdGFydE5vZGUgYW5kIGVuZGluZyBhdCBlbmRPZmZzZXQgaW4gZW5kTm9kZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgc2V0U3RhcnRBbmRFbmQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CgogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICB2YXIgc2MgPSBhcmdzWzBdLCBzbyA9IGFyZ3NbMV0sIGVjID0gc2MsIGVvID0gc287CgogICAgICAgICAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBhcmdzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gYXJnc1syXTsKICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBhcmdzWzNdOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pOwogICAgICAgICAgICB9LAogICAgICAgICAgICAKICAgICAgICAgICAgc2V0Qm91bmRhcnk6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCwgaXNTdGFydCkgewogICAgICAgICAgICAgICAgdGhpc1sic2V0IiArIChpc1N0YXJ0ID8gIlN0YXJ0IiA6ICJFbmQiKV0obm9kZSwgb2Zmc2V0KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldFN0YXJ0QmVmb3JlOiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIodHJ1ZSwgdHJ1ZSksCiAgICAgICAgICAgIHNldFN0YXJ0QWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgdHJ1ZSksCiAgICAgICAgICAgIHNldEVuZEJlZm9yZTogY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKHRydWUsIGZhbHNlKSwKICAgICAgICAgICAgc2V0RW5kQWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgZmFsc2UpLAoKICAgICAgICAgICAgY29sbGFwc2U6IGZ1bmN0aW9uKGlzU3RhcnQpIHsKICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAoaXNTdGFydCkgewogICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNlbGVjdE5vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgYXNzZXJ0Tm90RGV0YWNoZWQodGhpcyk7CiAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIHRydWUpOwoKICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBub2RlLCAwLCBub2RlLCBnZXROb2RlTGVuZ3RoKG5vZGUpKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNlbGVjdE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGJlZm9yZUFmdGVyTm9kZVR5cGVzKTsKCiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBnZXRCb3VuZGFyeUJlZm9yZU5vZGUobm9kZSksIGVuZCA9IGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpOwogICAgIA==ICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc3RhcnQubm9kZSwgc3RhcnQub2Zmc2V0LCBlbmQubm9kZSwgZW5kLm9mZnNldCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBleHRyYWN0Q29udGVudHM6IGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIoZXh0cmFjdFN1YnRyZWUsIGJvdW5kYXJ5VXBkYXRlciksCgogICAgICAgICAgICBkZWxldGVDb250ZW50czogY3JlYXRlUmFuZ2VDb250ZW50UmVtb3ZlcihkZWxldGVTdWJ0cmVlLCBib3VuZGFyeVVwZGF0ZXIpLAoKICAgICAgICAgICAgY2FuU3Vycm91bmRDb250ZW50czogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuZW5kQ29udGFpbmVyKTsKCiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGVudHMgY2FuIGJlIHN1cnJvdW5kZWQuIFNwZWNpZmljYWxseSwgdGhpcyBtZWFucyB3aGV0aGVyIHRoZSByYW5nZSBwYXJ0aWFsbHkgc2VsZWN0cwogICAgICAgICAgICAgICAgLy8gbm8gbm9uLXRleHQgbm9kZXMuCiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTsKICAgICAgICAgICAgICAgIHZhciBib3VuZGFyaWVzSW52YWxpZCA9IChpdGVyYXRvci5fZmlyc3QgJiYgKGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9maXJzdCwgdGhpcykpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgIChpdGVyYXRvci5fbGFzdCAmJiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChpdGVyYXRvci5fbGFzdCwgdGhpcykpKTsKICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpOwogICAgICAgICAgICAgICAgcmV0dXJuICFib3VuZGFyaWVzSW52YWxpZDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBkZXRhY2hlcih0aGlzKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNwbGl0Qm91bmRhcmllczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzcGxpdFJhbmdlQm91bmRhcmllcyh0aGlzKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNwbGl0Qm91bmRhcmllc1ByZXNlcnZpbmdQb3NpdGlvbnM6IGZ1bmN0aW9uKHBvc2l0aW9uc1RvUHJlc2VydmUpIHsKICAgICAgICAgICAgICAgIHNwbGl0UmFuZ2VCb3VuZGFyaWVzKHRoaXMsIHBvc2l0aW9uc1RvUHJlc2VydmUpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbm9ybWFsaXplQm91bmRhcmllczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpOwoKICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXIsIHNvID0gdGhpcy5zdGFydE9mZnNldCwgZWMgPSB0aGlzLmVuZENvbnRhaW5lciwgZW8gPSB0aGlzLmVuZE9mZnNldDsKCiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VGb3J3YXJkID0gZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gbm9kZS5uZXh0U2libGluZzsKICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICBlbyA9IG5vZGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZERhdGEoc2libGluZy5kYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIG1lcmdlQmFja3dhcmQgPSBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBub2RlLnByZXZpb3VzU2libGluZzsKICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2MgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUxlbmd0aCA9IG5vZGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBzbyA9IHNpYmxpbmcubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmluc2VydERhdGEoMCwgc2libGluZy5kYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2MgPT0gZWMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvICs9IHNvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBzYzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlYyA9PSBub2RlLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBnZXROb2RlSW5kZXgobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW8gPT0gbm9kZUluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBub2RlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gbm9kZUxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW8gPiBub2RlSW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlby0tOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplU3RhcnQgPSB0cnVlOwoKICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGVjKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChlYy5sZW5ndGggPT0gZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VGb3J3YXJkKGVjKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChlbyA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBlYy5jaGlsZE5vZGVzW2VvIC0gMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmROb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoZW5kTm9kZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlRm9yd2FyZChlbmROb2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVTdGFydCA9ICF0aGlzLmNvbGxhcHNlZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQmFja3dhcmQoc2MpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvIDwgc2MuY2hpbGROb2Rlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydE5vZGUgPSBzYy5jaGlsZE5vZGVzW3NvXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydE5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShzdGFydE5vZGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VCYWNrd2FyZChzdGFydE5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIA==ICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNjID0gZWM7CiAgICAgICAgICAgICAgICAgICAgc28gPSBlbzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29sbGFwc2VUb1BvaW50OiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsKICAgICAgICAgICAgICAgIGFzc2VydE5vdERldGFjaGVkKHRoaXMpOwogICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTsKICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCk7CiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QW5kRW5kKG5vZGUsIG9mZnNldCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHMoY29uc3RydWN0b3IpOwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLy8gVXBkYXRlcyBjb21tb25BbmNlc3RvckNvbnRhaW5lciBhbmQgY29sbGFwc2VkIGFmdGVyIGJvdW5kYXJ5IGNoYW5nZQogICAgZnVuY3Rpb24gdXBkYXRlQ29sbGFwc2VkQW5kQ29tbW9uQW5jZXN0b3IocmFuZ2UpIHsKICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gcmFuZ2UuZW5kT2Zmc2V0KTsKICAgICAgICByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbGxhcHNlZCA/CiAgICAgICAgICAgIHJhbmdlLnN0YXJ0Q29udGFpbmVyIDogZG9tLmdldENvbW1vbkFuY2VzdG9yKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5lbmRDb250YWluZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUJvdW5kYXJpZXMocmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpIHsKICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IHN0YXJ0Q29udGFpbmVyOwogICAgICAgIHJhbmdlLnN0YXJ0T2Zmc2V0ID0gc3RhcnRPZmZzZXQ7CiAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gZW5kQ29udGFpbmVyOwogICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IGVuZE9mZnNldDsKICAgICAgICByYW5nZS5kb2N1bWVudCA9IGRvbS5nZXREb2N1bWVudChzdGFydENvbnRhaW5lcik7CgogICAgICAgIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHJhbmdlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZXRhY2gocmFuZ2UpIHsKICAgICAgICBhc3NlcnROb3REZXRhY2hlZChyYW5nZSk7CiAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgPSByYW5nZS5zdGFydE9mZnNldCA9IHJhbmdlLmVuZENvbnRhaW5lciA9IHJhbmdlLmVuZE9mZnNldCA9IHJhbmdlLmRvY3VtZW50ID0gbnVsbDsKICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9IG51bGw7CiAgICB9CgogICAgZnVuY3Rpb24gUmFuZ2UoZG9jKSB7CiAgICAgICAgdGhpcy5zdGFydENvbnRhaW5lciA9IGRvYzsKICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gMDsKICAgICAgICB0aGlzLmVuZENvbnRhaW5lciA9IGRvYzsKICAgICAgICB0aGlzLmVuZE9mZnNldCA9IDA7CiAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvYzsKICAgICAgICB1cGRhdGVDb2xsYXBzZWRBbmRDb21tb25BbmNlc3Rvcih0aGlzKTsKICAgIH0KCiAgICBjcmVhdGVQcm90b3R5cGVSYW5nZShSYW5nZSwgdXBkYXRlQm91bmRhcmllcywgZGV0YWNoKTsKCiAgICBhcGkucmFuZ2VQcm90b3R5cGUgPSBSYW5nZVByb3RvdHlwZS5wcm90b3R5cGU7CgogICAgdXRpbC5leHRlbmQoUmFuZ2UsIHsKICAgICAgICByYW5nZVByb3BlcnRpZXM6IHJhbmdlUHJvcGVydGllcywKICAgICAgICBSYW5nZUl0ZXJhdG9yOiBSYW5nZUl0ZXJhdG9yLAogICAgICAgIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzOiBjb3B5Q29tcGFyaXNvbkNvbnN0YW50cywKICAgICAgICBjcmVhdGVQcm90b3R5cGVSYW5nZTogY3JlYXRlUHJvdG90eXBlUmFuZ2UsCiAgICAgICAgaW5zcGVjdDogaW5zcGVjdCwKICAgICAgICBnZXRSYW5nZURvY3VtZW50OiBnZXRSYW5nZURvY3VtZW50LAogICAgICAgIHJhbmdlc0VxdWFsOiBmdW5jdGlvbihyMSwgcjIpIHsKICAgICAgICAgICAgcmV0dXJuIHIxLnN0YXJ0Q29udGFpbmVyID09PSByMi5zdGFydENvbnRhaW5lciAmJgogICAgICAgICAgICAgICAgcjEuc3RhcnRPZmZzZXQgPT09IHIyLnN0YXJ0T2Zmc2V0ICYmCiAgICAgICAgICAgICAgICByMS5lbmRDb250YWluZXIgPT09IHIyLmVuZENvbnRhaW5lciAmJgogICAgICAgICAgICAgICAgcjEuZW5kT2Zmc2V0ID09PSByMi5lbmRPZmZzZXQ7CiAgICAgICAgfQogICAgfSk7CgogICAgYXBpLkRvbVJhbmdlID0gUmFuZ2U7CiAgICBhcGkuUmFuZ2VFeGNlcHRpb24gPSBSYW5nZUV4Y2VwdGlvbjsKfSk7CnJhbmd5LmNyZWF0ZU1vZHVsZSgiV3JhcHBlZFJhbmdlIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCiAgICBhcGkucmVxdWlyZU1vZHVsZXMoIFsiRG9tVXRpbCIsICJEb21SYW5nZSJdICk7DQoNCiAgICB2YXIgV3JhcHBlZFJhbmdlLCBXcmFwcGVkVGV4dFJhbmdlOw0KICAgIHZhciBkb20gPSBhcGkuZG9tOw0KICAgIHZhciB1dGlsID0gYXBpLnV0aWw7DQogICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uOw0KICAgIHZhciBEb21SYW5nZSA9IGFwaS5Eb21SYW5nZTsNCiAgICB2YXIgZ2V0Qm9keSA9IGRvbS5nZXRCb2R5Ow0KICAgIHZhciBnZXRDb250ZW50RG9jdW1lbnQgPSBkb20uZ2V0Q29udGVudERvY3VtZW50Ow0KICAgIHZhciBpc0NoYXJhY3RlckRhdGFOb2RlID0gZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGU7DQoNCg0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkgew0KICAgICAgICAvLyBUaGlzIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIGJyb3dzZXIncyBuYXRpdmUgRE9NIFJhbmdlLiBJdCBoYXMgdHdvIGFpbXM6DQogICAgICAgIC8vIC0gUHJvdmlkZSB3b3JrYXJvdW5kcyBmb3Igc3BlY2lmaWMgYnJvd3NlciBidWdzDQogICAgICAgIC8vIC0gcHJvdmlkZSBjb252ZW5pZW50IGV4dGVuc2lvbnMsIHdoaWNoIGFyZSBpbmhlcml0ZWQgZnJvbSBSYW5neSdzIERvbVJhbmdlDQoNCiAgICAgICAgKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIHJhbmdlUHJvdG87DQogICAgICAgICAgICB2YXIgcmFuZ2VQcm9wZXJ0aWVzID0gRG9tUmFuZ2UucmFuZ2VQcm9wZXJ0aWVzOw0KDQogICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVSYW5nZVByb3BlcnRpZXMocmFuZ2UpIHsNCiAgICAgICAgICAgICAgICB2YXIgaSA9IHJhbmdlUHJvcGVydGllcy5sZW5ndGgsIHByb3A7DQogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgICAgICAgICBwcm9wID0gcmFuZ2VQcm9wZXJ0aWVzW2ldOw0KICAgICAgICAgICAgICAgICAgICByYW5nZVtwcm9wXSA9IHJhbmdlLm5hdGl2ZVJhbmdlW3Byb3BdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyBGaXggZm9yIGJyb2tlbiBjb2xsYXBzZWQgcHJvcGVydHkgaW4gSUUgOS4NCiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gcmFuZ2UuZW5kT2Zmc2V0KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZnVuY3Rpb24gdXBkYQ==dGVOYXRpdmVSYW5nZShyYW5nZSwgc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRDb250YWluZXIsIGVuZE9mZnNldCkgew0KICAgICAgICAgICAgICAgIHZhciBzdGFydE1vdmVkID0gKHJhbmdlLnN0YXJ0Q29udGFpbmVyICE9PSBzdGFydENvbnRhaW5lciB8fCByYW5nZS5zdGFydE9mZnNldCAhPSBzdGFydE9mZnNldCk7DQogICAgICAgICAgICAgICAgdmFyIGVuZE1vdmVkID0gKHJhbmdlLmVuZENvbnRhaW5lciAhPT0gZW5kQ29udGFpbmVyIHx8IHJhbmdlLmVuZE9mZnNldCAhPSBlbmRPZmZzZXQpOw0KICAgICAgICAgICAgICAgIHZhciBuYXRpdmVSYW5nZURpZmZlcmVudCA9ICFyYW5nZS5lcXVhbHMocmFuZ2UubmF0aXZlUmFuZ2UpOw0KDQogICAgICAgICAgICAgICAgLy8gQWx3YXlzIHNldCBib3RoIGJvdW5kYXJpZXMgZm9yIHRoZSBiZW5lZml0IG9mIElFOSAoc2VlIGlzc3VlIDM1KQ0KICAgICAgICAgICAgICAgIGlmIChzdGFydE1vdmVkIHx8IGVuZE1vdmVkIHx8IG5hdGl2ZVJhbmdlRGlmZmVyZW50KSB7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChlbmRDb250YWluZXIsIGVuZE9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBkZXRhY2gocmFuZ2UpIHsNCiAgICAgICAgICAgICAgICByYW5nZS5uYXRpdmVSYW5nZS5kZXRhY2goKTsNCiAgICAgICAgICAgICAgICByYW5nZS5kZXRhY2hlZCA9IHRydWU7DQogICAgICAgICAgICAgICAgdmFyIGkgPSByYW5nZVByb3BlcnRpZXMubGVuZ3RoOw0KICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbIHJhbmdlUHJvcGVydGllc1tpXSBdID0gbnVsbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXI7DQoNCiAgICAgICAgICAgIFdyYXBwZWRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICAgICAgaWYgKCFyYW5nZSkgew0KICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoIldyYXBwZWRSYW5nZTogUmFuZ2UgbXVzdCBiZSBzcGVjaWZpZWQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZSA9IHJhbmdlOw0KICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIERvbVJhbmdlLmNyZWF0ZVByb3RvdHlwZVJhbmdlKFdyYXBwZWRSYW5nZSwgdXBkYXRlTmF0aXZlUmFuZ2UsIGRldGFjaCk7DQoNCiAgICAgICAgICAgIHJhbmdlUHJvdG8gPSBXcmFwcGVkUmFuZ2UucHJvdG90eXBlOw0KDQogICAgICAgICAgICByYW5nZVByb3RvLnNlbGVjdE5vZGUgPSBmdW5jdGlvbihub2RlKSB7DQogICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZWxlY3ROb2RlKG5vZGUpOw0KICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uY2xvbmVDb250ZW50cyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNsb25lQ29udGVudHMoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIC8vIER1ZSB0byBhIGxvbmctc3RhbmRpbmcgRmlyZWZveCBidWcgdGhhdCBJIGhhdmUgbm90IGJlZW4gYWJsZSB0byBmaW5kIGEgcmVsaWFibGUgd2F5IHRvIGRldGVjdCwNCiAgICAgICAgICAgIC8vIGluc2VydE5vZGUoKSBpcyBuZXZlciBkZWxlZ2F0ZWQgdG8gdGhlIG5hdGl2ZSByYW5nZS4NCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5zdXJyb3VuZENvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc3Vycm91bmRDb250ZW50cyhub2RlKTsNCiAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICByYW5nZVByb3RvLmNvbGxhcHNlID0gZnVuY3Rpb24oaXNTdGFydCkgew0KICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7DQogICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5jbG9uZVJhbmdlID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXcmFwcGVkUmFuZ2UodGhpcy5uYXRpdmVSYW5nZS5jbG9uZVJhbmdlKCkpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5yZWZyZXNoID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLnRvU3RyaW5nKCk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAvLyBDcmVhdGUgdGVzdCByYW5nZSBhbmQgbm9kZSBmb3IgZmVhdHVyZSBkZXRlY3Rpb24NCg0KICAgICAgICAgICAgdmFyIHRlc3RUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJ0ZXN0Iik7DQogICAgICAgICAgICBnZXRCb2R5KGRvY3VtZW50KS5hcHBlbmRDaGlsZCh0ZXN0VGV4dE5vZGUpOw0KICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsNCg0KICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAgICAgICAgIC8vIFRlc3QgZm9yIEZpcmVmb3ggMiBidWcgdGhhdCBwcmV2ZW50cyBtb3ZpbmcgdGhlIHN0YXJ0IG9mIGEgUmFuZ2UgdG8gYSBwb2ludCBhZnRlciBpdHMgY3VycmVudCBlbmQgYW5kDQogICAgICAgICAgICAvLyBjb3JyZWN0IGZvciBpdA0KDQogICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXN0VGV4dE5vZGUsIDApOw0KICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgMCk7DQoNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGVzdFRleHROb2RlLCAxKTsNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0U3RhcnQgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpOw0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyID0gZnVuY3Rpb24obmFtZSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB9IGNhdGNoKGV4KSB7DQoNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0ID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KQ==IHsNCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldEVuZCA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkgew0KICAgICAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIgPSBmdW5jdGlvbihuYW1lLCBvcHBvc2l0ZU5hbWUpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtvcHBvc2l0ZU5hbWVdKG5vZGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2VbbmFtZV0obm9kZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydEJlZm9yZSA9IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcigic2V0U3RhcnRCZWZvcmUiLCAic2V0RW5kQmVmb3JlIik7DQogICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0QWZ0ZXIgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoInNldFN0YXJ0QWZ0ZXIiLCAic2V0RW5kQWZ0ZXIiKTsNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kQmVmb3JlID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKCJzZXRFbmRCZWZvcmUiLCAic2V0U3RhcnRCZWZvcmUiKTsNCiAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kQWZ0ZXIgPSBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIoInNldEVuZEFmdGVyIiwgInNldFN0YXJ0QWZ0ZXIiKTsNCg0KICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAgICAgICAgIC8vIFRlc3QgZm9yIGFuZCBjb3JyZWN0IEZpcmVmb3ggMiBiZWhhdmlvdXIgd2l0aCBzZWxlY3ROb2RlQ29udGVudHMgb24gdGV4dCBub2RlczogaXQgY29sbGFwc2VzIHRoZSByYW5nZSB0bw0KICAgICAgICAgICAgLy8gdGhlIDB0aCBjaGFyYWN0ZXIgb2YgdGhlIHRleHQgbm9kZQ0KICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT0gdGVzdFRleHROb2RlICYmIHJhbmdlLmVuZENvbnRhaW5lciA9PSB0ZXN0VGV4dE5vZGUgJiYNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPT0gMCAmJiByYW5nZS5lbmRPZmZzZXQgPT0gdGVzdFRleHROb2RlLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2VsZWN0Tm9kZUNvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2VsZWN0Tm9kZUNvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QW5kRW5kKG5vZGUsIDAsIGRvbS5nZXROb2RlTGVuZ3RoKG5vZGUpKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gVGVzdCBmb3IgYW5kIGNvcnJlY3QgV2ViS2l0IGJ1ZyB0aGF0IGhhcyB0aGUgYmVoYXZpb3VyIG9mIGNvbXBhcmVCb3VuZGFyeVBvaW50cyByb3VuZCB0aGUgd3Jvbmcgd2F5IGZvcg0KICAgICAgICAgICAgLy8gY29uc3RhbnRzIFNUQVJUX1RPX0VORCBhbmQgRU5EX1RPX1NUQVJUOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjA3MzgNCg0KICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZS5zZXRFbmQodGVzdFRleHROb2RlLCAzKTsNCg0KICAgICAgICAgICAgdmFyIHJhbmdlMiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICByYW5nZTIuc2VsZWN0Tm9kZUNvbnRlbnRzKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZTIuc2V0RW5kKHRlc3RUZXh0Tm9kZSwgNCk7DQogICAgICAgICAgICByYW5nZTIuc2V0U3RhcnQodGVzdFRleHROb2RlLCAyKTsNCg0KICAgICAgICAgICAgaWYgKHJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhyYW5nZS5TVEFSVF9UT19FTkQsIHJhbmdlMikgPT0gLTEgJiYNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHJhbmdlLkVORF9UT19TVEFSVCwgcmFuZ2UyKSA9PSAxKSB7DQogICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgd3Jvbmcgd2F5IHJvdW5kLCBzbyBjb3JyZWN0IGZvciBpdA0KDQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jb21wYXJlQm91bmRhcnlQb2ludHMgPSBmdW5jdGlvbih0eXBlLCByYW5nZSkgew0KICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHJhbmdlLm5hdGl2ZVJhbmdlIHx8IHJhbmdlOw0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSByYW5nZS5TVEFSVF9UT19FTkQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSByYW5nZS5FTkRfVE9fU1RBUlQ7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSByYW5nZS5FTkRfVE9fU1RBUlQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSByYW5nZS5TVEFSVF9UT19FTkQ7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHR5cGUsIHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByYW5nZVByb3RvLmNvbXBhcmVCb3VuZGFyeVBvaW50cyA9IGZ1bmN0aW9uKHR5cGUsIHJhbmdlKSB7DQogIA==ICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKHR5cGUsIHJhbmdlLm5hdGl2ZVJhbmdlIHx8IHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gVGVzdCBmb3IgSUUgOSBkZWxldGVDb250ZW50cygpIGFuZCBleHRyYWN0Q29udGVudHMoKSBidWcgYW5kIGNvcnJlY3QgaXQuIFNlZSBpc3N1ZSAxMDcuDQoNCiAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOw0KICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gIjEyMyI7DQogICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBlbC5maXJzdENoaWxkOw0KICAgICAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTsNCiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWwpOw0KDQogICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXh0Tm9kZSwgMSk7DQogICAgICAgICAgICByYW5nZS5zZXRFbmQodGV4dE5vZGUsIDIpOw0KICAgICAgICAgICAgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTsNCg0KICAgICAgICAgICAgaWYgKHRleHROb2RlLmRhdGEgPT0gIjEzIikgew0KICAgICAgICAgICAgICAgIC8vIEJlaGF2aW91ciBpcyBjb3JyZWN0IHBlciBET000IFJhbmdlIHNvIHdyYXAgdGhlIGJyb3dzZXIncyBpbXBsZW1lbnRhdGlvbiBvZiBkZWxldGVDb250ZW50cygpIGFuZA0KICAgICAgICAgICAgICAgIC8vIGV4dHJhY3RDb250ZW50cygpDQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5kZWxldGVDb250ZW50cyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgcmFuZ2VQcm90by5leHRyYWN0Q29udGVudHMgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZyYWcgPSB0aGlzLm5hdGl2ZVJhbmdlLmV4dHJhY3RDb250ZW50cygpOw0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFnOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGVsKTsNCiAgICAgICAgICAgIGJvZHkgPSBudWxsOw0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gVGVzdCBmb3IgZXhpc3RlbmNlIG9mIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBhbmQgZGVsZWdhdGUgdG8gaXQgaWYgaXQgZXhpc3RzDQogICAgICAgICAgICBpZiAodXRpbC5pc0hvc3RNZXRob2QocmFuZ2UsICJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiKSkgew0KICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50ID0gZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGZyYWdtZW50U3RyKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICAgICAgICAgICAgLy8gQ2xlYW4gdXANCiAgICAgICAgICAgIGdldEJvZHkoZG9jdW1lbnQpLnJlbW92ZUNoaWxkKHRlc3RUZXh0Tm9kZSk7DQogICAgICAgICAgICByYW5nZS5kZXRhY2goKTsNCiAgICAgICAgICAgIHJhbmdlMi5kZXRhY2goKTsNCg0KICAgICAgICAgICAgcmFuZ2VQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICJXcmFwcGVkUmFuZ2UiOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgYXBpLldyYXBwZWRSYW5nZSA9IFdyYXBwZWRSYW5nZTsNCg0KICAgICAgICAgICAgYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgICAgICAgICAgZG9jID0gZ2V0Q29udGVudERvY3VtZW50KGRvYywgbW9kdWxlLCAiY3JlYXRlTmF0aXZlUmFuZ2UiKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gZG9jLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9KSgpOw0KICAgIH0NCiAgICANCiAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UpIHsNCiAgICAgICAgLyoNCiAgICAgICAgIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBhIGJ1ZyB3aGVyZSBJRSByZXR1cm5zIHRoZSB3cm9uZyBjb250YWluZXIgZWxlbWVudCBmcm9tIHRoZSBUZXh0UmFuZ2UncyBwYXJlbnRFbGVtZW50KCkNCiAgICAgICAgIG1ldGhvZC4gRm9yIGV4YW1wbGUsIGluIHRoZSBmb2xsb3dpbmcgKHdoZXJlIHBpcGVzIGRlbm90ZSB0aGUgc2VsZWN0aW9uIGJvdW5kYXJpZXMpOg0KDQogICAgICAgICA8dWwgaWQ9InVsIj48bGkgaWQ9ImEiPnwgYSA8L2xpPjxsaSBpZD0iYiI+IGIgfDwvbGk+PC91bD4NCg0KICAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICBhbGVydChyYW5nZS5wYXJlbnRFbGVtZW50KCkuaWQpOyAvLyBTaG91bGQgYWxlcnQgInVsIiBidXQgYWxlcnRzICJiIg0KDQogICAgICAgICBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjb21tb24gYW5jZXN0b3Igbm9kZSBvZiB0aGUgZm9sbG93aW5nOg0KICAgICAgICAgLSB0aGUgcGFyZW50RWxlbWVudCgpIG9mIHRoZSB0ZXh0UmFuZ2UNCiAgICAgICAgIC0gdGhlIHBhcmVudEVsZW1lbnQoKSBvZiB0aGUgdGV4dFJhbmdlIGFmdGVyIGNhbGxpbmcgY29sbGFwc2UodHJ1ZSkNCiAgICAgICAgIC0gdGhlIHBhcmVudEVsZW1lbnQoKSBvZiB0aGUgdGV4dFJhbmdlIGFmdGVyIGNhbGxpbmcgY29sbGFwc2UoZmFsc2UpDQogICAgICAgICAqLw0KICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQ29udGFpbmVyRWxlbWVudCA9IGZ1bmN0aW9uKHRleHRSYW5nZSkgew0KICAgICAgICAgICAgdmFyIHBhcmVudEVsID0gdGV4dFJhbmdlLnBhcmVudEVsZW1lbnQoKTsNCiAgICAgICAgICAgIHZhciByYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTsNCiAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpOw0KICAgICAgICAgICAgdmFyIHN0YXJ0RWwgPSByYW5nZS5wYXJlbnRFbGVtZW50KCk7DQogICAgICAgICAgICByYW5nZSA9IHRleHRSYW5nZS5kdXBsaWNhdGUoKTsNCiAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKTsNCiAgICAgICAgICAgIHZhciBlbmRFbCA9IHJhbmdlLnBhcmVudEVsZW1lbnQoKTsNCiAgICAgICAgICAgIHZhciBzdGFydEVuZENvbnRhaW5lciA9IChzdGFydEVsID09IGVuZEVsKSA/IHN0YXJ0RWwgOiBkb20uZ2V0Q29tbW9uQW5jZXN0b3Ioc3RhcnRFbCwgZW5kRWwpOw0KDQogICAgICAgICAgICByZXR1cm4gc3RhcnRFbmRDb250YWluZXIgPT0gcGFyZW50RWwgPyBzdGFydEVuZENvbnRhaW5lciA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihwYXJlbnRFbCwgc3RhcnRFbmRDb250YWluZXIpOw0KICAgICAgICB9Ow0KDQogICAgICAgIHZhciB0ZXh0UmFuZ2VJc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHRleHRSYW5nZSkgew0KICAgICAgICAgICAgcmV0dXJuIHRleHRSYW5nZS5jb21wYXJlRW5kUG9pbnRzKCJTdGFydFRvRW5kIiwgdGV4dFJhbmdlKSA9PSAwOw0KICAgICAgICB9Ow==DQoNCiAgICAgICAgLy8gR2V0cyB0aGUgYm91bmRhcnkgb2YgYSBUZXh0UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0IG5vZGUuIFRoaXMgZnVuY3Rpb24gc3RhcnRlZCBvdXQgYXMNCiAgICAgICAgLy8gYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBjb2RlIGZvdW5kIGluIFRpbSBDYW1lcm9uIFJ5YW4ncyBJRVJhbmdlIChodHRwOi8vY29kZS5nb29nbGUuY29tL3AvaWVyYW5nZS8pIGJ1dCBoYXMNCiAgICAgICAgLy8gZ3Jvd24sIGZpeGluZyBwcm9ibGVtcyB3aXRoIGxpbmUgYnJlYWtzIGluIHByZWZvcm1hdHRlZCB0ZXh0LCBhZGRpbmcgd29ya2Fyb3VuZCBmb3IgSUUgVGV4dFJhbmdlIGJ1Z3MsIGhhbmRsaW5nDQogICAgICAgIC8vIGZvciBpbnB1dHMgYW5kIGltYWdlcywgcGx1cyBvcHRpbWl6YXRpb25zLg0KICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQm91bmRhcnlQb3NpdGlvbiA9IGZ1bmN0aW9uKHRleHRSYW5nZSwgd2hvbGVSYW5nZUNvbnRhaW5lckVsZW1lbnQsIGlzU3RhcnQsIGlzQ29sbGFwc2VkLCBzdGFydEluZm8pIHsNCiAgICAgICAgICAgIHZhciB3b3JraW5nUmFuZ2UgPSB0ZXh0UmFuZ2UuZHVwbGljYXRlKCk7DQogICAgICAgICAgICB3b3JraW5nUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7DQogICAgICAgICAgICB2YXIgY29udGFpbmVyRWxlbWVudCA9IHdvcmtpbmdSYW5nZS5wYXJlbnRFbGVtZW50KCk7DQoNCiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyBjb2xsYXBzaW5nIGEgVGV4dFJhbmdlIHRoYXQncyBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0IG5vZGUgY2FuIG1vdmUgaXQgaW50byB0aGUgcHJldmlvdXMgbm9kZSwgc28NCiAgICAgICAgICAgIC8vIGNoZWNrIGZvciB0aGF0DQogICAgICAgICAgICBpZiAoIWRvbS5pc09ySXNBbmNlc3Rvck9mKHdob2xlUmFuZ2VDb250YWluZXJFbGVtZW50LCBjb250YWluZXJFbGVtZW50KSkgew0KICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSB3aG9sZVJhbmdlQ29udGFpbmVyRWxlbWVudDsNCiAgICAgICAgICAgIH0NCg0KDQogICAgICAgICAgICAvLyBEZWFsIHdpdGggbm9kZXMgdGhhdCBjYW5ub3QgImNvbnRhaW4gcmljaCBIVE1MIG1hcmt1cCIuIEluIHByYWN0aWNlLCB0aGlzIG1lYW5zIGZvcm0gaW5wdXRzLCBpbWFnZXMgYW5kDQogICAgICAgICAgICAvLyBzaW1pbGFyLiBTZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2FhNzAzOTUwJTI4VlMuODUlMjkuYXNweA0KICAgICAgICAgICAgaWYgKCFjb250YWluZXJFbGVtZW50LmNhbkhhdmVIVE1MKSB7DQogICAgICAgICAgICAgICAgdmFyIHBvcyA9IG5ldyBEb21Qb3NpdGlvbihjb250YWluZXJFbGVtZW50LnBhcmVudE5vZGUsIGRvbS5nZXROb2RlSW5kZXgoY29udGFpbmVyRWxlbWVudCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb246IHBvcywNCiAgICAgICAgICAgICAgICAgICAgbm9kZUluZm86IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleDogcG9zLm9mZnNldCwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IHBvcy5ub2RlDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgd29ya2luZ05vZGUgPSBkb20uZ2V0RG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkuY3JlYXRlRWxlbWVudCgic3BhbiIpOw0KDQogICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBIVE1MNSBTaGl2J3MgaW5zYW5lIHZpb2xhdGlvbiBvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCkuIFNlZSBSYW5neSBpc3N1ZSAxMDQgYW5kIEhUTUw1DQogICAgICAgICAgICAvLyBTaGl2IGlzc3VlIDY0OiBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9odG1sNXNoaXYvaXNzdWVzLzY0DQogICAgICAgICAgICBpZiAod29ya2luZ05vZGUucGFyZW50Tm9kZSkgew0KICAgICAgICAgICAgICAgIHdvcmtpbmdOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQod29ya2luZ05vZGUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgY29tcGFyaXNvbiwgd29ya2luZ0NvbXBhcmlzb25UeXBlID0gaXNTdGFydCA/ICJTdGFydFRvU3RhcnQiIDogIlN0YXJ0VG9FbmQiOw0KICAgICAgICAgICAgdmFyIHByZXZpb3VzTm9kZSwgbmV4dE5vZGUsIGJvdW5kYXJ5UG9zaXRpb24sIGJvdW5kYXJ5Tm9kZTsNCiAgICAgICAgICAgIHZhciBzdGFydCA9IChzdGFydEluZm8gJiYgc3RhcnRJbmZvLmNvbnRhaW5lckVsZW1lbnQgPT0gY29udGFpbmVyRWxlbWVudCkgPyBzdGFydEluZm8ubm9kZUluZGV4IDogMDsNCiAgICAgICAgICAgIHZhciBjaGlsZE5vZGVDb3VudCA9IGNvbnRhaW5lckVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7DQogICAgICAgICAgICB2YXIgZW5kID0gY2hpbGROb2RlQ291bnQ7DQoNCiAgICAgICAgICAgIC8vIENoZWNrIGVuZCBmaXJzdC4gQ29kZSB3aXRoaW4gdGhlIGxvb3AgYXNzdW1lcyB0aGF0IHRoZSBlbmR0aCBjaGlsZCBub2RlIG9mIHRoZSBjb250YWluZXIgaXMgZGVmaW5pdGVseQ0KICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIHJhbmdlIGJvdW5kYXJ5Lg0KICAgICAgICAgICAgdmFyIG5vZGVJbmRleCA9IGVuZDsNCg0KICAgICAgICAgICAgd2hpbGUgKHRydWUpIHsNCiAgICAgICAgICAgICAgICBpZiAobm9kZUluZGV4ID09IGNoaWxkTm9kZUNvdW50KSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQod29ya2luZ05vZGUpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5zZXJ0QmVmb3JlKHdvcmtpbmdOb2RlLCBjb250YWluZXJFbGVtZW50LmNoaWxkTm9kZXNbbm9kZUluZGV4XSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dCh3b3JraW5nTm9kZSk7DQogICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IHdvcmtpbmdSYW5nZS5jb21wYXJlRW5kUG9pbnRzKHdvcmtpbmdDb21wYXJpc29uVHlwZSwgdGV4dFJhbmdlKTsNCiAgICAgICAgICAgICAgICBpZiAoY29tcGFyaXNvbiA9PSAwIHx8IHN0YXJ0ID09IGVuZCkgew0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmlzb24gPT0gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA9PSBzdGFydCArIDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhlIGVuZHRoIGNoaWxkIG5vZGUgaXMgYWZ0ZXIgdGhlIHJhbmdlIGJvdW5kYXJ5LCBzbyB3ZSBtdXN0IGJlIGRvbmUuDQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gbm9kZUluZGV4Ow0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZW5kID0gKGVuZCA9PSBzdGFydCArIDEpID8gc3RhcnQgOiBub2RlSW5kZXg7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG5vZGVJbmRleCA9IE1hdGguZmxvb3IoKHN0YXJ0ICsgZW5kKSAvIDIpOw0KICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQucmVtb3ZlQ2hpbGQod29ya2luZ05vZGUpOw0KICAgICAgICAgICAgfQ0KDQoNCiAgICAgICAgICAgIC8vIFdlJ3ZlIG5vdyByZWFjaGVkIG9yIGdvbmUgcGFzdCB0aGUgYm91bmRhcnkgb2YgdGhlIHRleHQgcmFuZ2Ugd2UncmUgaW50ZXJlc3RlZCBpbg0KICAgICAgICAgICAgLy8gc28gaGF2ZSBpZGVudGlmaWVkIHRoZSBub2RlIHdlIHdhbnQNCiAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IHdvcmtpbmdOb2RlLm5leHRTaWJsaW5nOw0KDQogICAgICAgICAgICBpZiAoY29tcGFyaXNvbiA9PSAtMSAmJiBib3VuZGFyeU5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShib3VuZGFyeU5vZGUpKSB7DQ==CiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgY2hhcmFjdGVyIGRhdGEgbm9kZSAodGV4dCwgY29tbWVudCwgY2RhdGEpLiBUaGUgd29ya2luZyByYW5nZSBpcyBjb2xsYXBzZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZQ0KICAgICAgICAgICAgICAgIC8vIG5vZGUgY29udGFpbmluZyB0aGUgdGV4dCByYW5nZSdzIGJvdW5kYXJ5LCBzbyB3ZSBtb3ZlIHRoZSBlbmQgb2YgdGhlIHdvcmtpbmcgcmFuZ2UgdG8gdGhlIGJvdW5kYXJ5IHBvaW50DQogICAgICAgICAgICAgICAgLy8gYW5kIG1lYXN1cmUgdGhlIGxlbmd0aCBvZiBpdHMgdGV4dCB0byBnZXQgdGhlIGJvdW5kYXJ5J3Mgb2Zmc2V0IHdpdGhpbiB0aGUgbm9kZS4NCiAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2Uuc2V0RW5kUG9pbnQoaXNTdGFydCA/ICJFbmRUb1N0YXJ0IiA6ICJFbmRUb0VuZCIsIHRleHRSYW5nZSk7DQoNCiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0Ow0KDQogICAgICAgICAgICAgICAgaWYgKC9bXHJcbl0vLnRlc3QoYm91bmRhcnlOb2RlLmRhdGEpKSB7DQogICAgICAgICAgICAgICAgICAgIC8qDQogICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHBhcnRpY3VsYXIgY2FzZSBvZiBhIGJvdW5kYXJ5IHdpdGhpbiBhIHRleHQgbm9kZSBjb250YWluaW5nIHJlbmRlcmVkIGxpbmUgYnJlYWtzICh3aXRoaW4gYSA8cHJlPg0KICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCwgZm9yIGV4YW1wbGUpLCB3ZSBuZWVkIGEgc2xpZ2h0bHkgY29tcGxpY2F0ZWQgYXBwcm9hY2ggdG8gZ2V0IHRoZSBib3VuZGFyeSdzIG9mZnNldCBpbiBJRS4gVGhlDQogICAgICAgICAgICAgICAgICAgICBmYWN0czoNCg0KICAgICAgICAgICAgICAgICAgICAgLSBFYWNoIGxpbmUgYnJlYWsgaXMgcmVwcmVzZW50ZWQgYXMgXHIgaW4gdGhlIHRleHQgbm9kZSdzIGRhdGEvbm9kZVZhbHVlIHByb3BlcnRpZXMNCiAgICAgICAgICAgICAgICAgICAgIC0gRWFjaCBsaW5lIGJyZWFrIGlzIHJlcHJlc2VudGVkIGFzIFxyXG4gaW4gdGhlIFRleHRSYW5nZSdzICd0ZXh0JyBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgICAgICAgLSBUaGUgJ3RleHQnIHByb3BlcnR5IG9mIHRoZSBUZXh0UmFuZ2UgZG9lcyBub3QgY29udGFpbiB0cmFpbGluZyBsaW5lIGJyZWFrcw0KDQogICAgICAgICAgICAgICAgICAgICBUbyBnZXQgcm91bmQgdGhlIHByb2JsZW0gcHJlc2VudGVkIGJ5IHRoZSBmaW5hbCBmYWN0IGFib3ZlLCB3ZSBjYW4gdXNlIHRoZSBmYWN0IHRoYXQgVGV4dFJhbmdlJ3MNCiAgICAgICAgICAgICAgICAgICAgIG1vdmVTdGFydCgpIGFuZCBtb3ZlRW5kKCkgbWV0aG9kcyByZXR1cm4gdGhlIGFjdHVhbCBudW1iZXIgb2YgY2hhcmFjdGVycyBtb3ZlZCwgd2hpY2ggaXMgbm90IG5lY2Vzc2FyaWx5DQogICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaXQgd2FzIGluc3RydWN0ZWQgdG8gbW92ZS4gVGhlIHNpbXBsZXN0IGFwcHJvYWNoIGlzIHRvIHVzZSB0aGlzIHRvDQogICAgICAgICAgICAgICAgICAgICBzdG9yZSB0aGUgY2hhcmFjdGVycyBtb3ZlZCB3aGVuIG1vdmluZyBib3RoIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSByYW5nZSB0byB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50DQogICAgICAgICAgICAgICAgICAgICBib2R5IGFuZCBzdWJ0cmFjdGluZyB0aGUgc3RhcnQgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZmZzZXQgKHRoZSAibW92ZS1uZWdhdGl2ZS1nYXppbGxpb24iIG1ldGhvZCkuDQogICAgICAgICAgICAgICAgICAgICBIb3dldmVyLCB0aGlzIGlzIGV4dHJlbWVseSBzbG93IHdoZW4gdGhlIGRvY3VtZW50IGlzIGxhcmdlIGFuZCB0aGUgcmFuZ2UgaXMgbmVhciB0aGUgZW5kIG9mIGl0LiBDbGVhcmx5DQogICAgICAgICAgICAgICAgICAgICBkb2luZyB0aGUgbWlycm9yIGltYWdlIChpLmUuIG1vdmluZyB0aGUgcmFuZ2UgYm91bmRhcmllcyB0byB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCkgaGFzIHRoZSBzYW1lDQogICAgICAgICAgICAgICAgICAgICBwcm9ibGVtLg0KDQogICAgICAgICAgICAgICAgICAgICBBbm90aGVyIGFwcHJvYWNoIHRoYXQgd29ya3MgaXMgdG8gdXNlIG1vdmVTdGFydCgpIHRvIG1vdmUgdGhlIHN0YXJ0IGJvdW5kYXJ5IG9mIHRoZSByYW5nZSB1cCB0byB0aGUgZW5kDQogICAgICAgICAgICAgICAgICAgICBib3VuZGFyeSBvbmUgY2hhcmFjdGVyIGF0IGEgdGltZSBhbmQgaW5jcmVtZW50aW5nIGEgY291bnRlciB3aXRoIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgbW92ZVN0YXJ0KCkNCiAgICAgICAgICAgICAgICAgICAgIGNhbGwuIEhvd2V2ZXIsIHRoZSBjaGVjayBmb3Igd2hldGhlciB0aGUgc3RhcnQgYm91bmRhcnkgaGFzIHJlYWNoZWQgdGhlIGVuZCBib3VuZGFyeSBpcyBleHBlbnNpdmUsIHNvDQogICAgICAgICAgICAgICAgICAgICB0aGlzIG1ldGhvZCBpcyBzbG93IChhbHRob3VnaCB1bmxpa2UgIm1vdmUtbmVnYXRpdmUtZ2F6aWxsaW9uIiBpcyBsYXJnZWx5IHVuYWZmZWN0ZWQgYnkgdGhlIGxvY2F0aW9uIG9mDQogICAgICAgICAgICAgICAgICAgICB0aGUgcmFuZ2Ugd2l0aGluIHRoZSBkb2N1bWVudCkuDQoNCiAgICAgICAgICAgICAgICAgICAgIFRoZSBtZXRob2QgYmVsb3cgaXMgYSBoeWJyaWQgb2YgdGhlIHR3byBtZXRob2RzIGFib3ZlLiBJdCB1c2VzIHRoZSBmYWN0IHRoYXQgYSBzdHJpbmcgY29udGFpbmluZyB0aGUNCiAgICAgICAgICAgICAgICAgICAgIFRleHRSYW5nZSdzICd0ZXh0JyBwcm9wZXJ0eSB3aXRoIGVhY2ggXHJcbiBjb252ZXJ0ZWQgdG8gYSBzaW5nbGUgXHIgY2hhcmFjdGVyIGNhbm5vdCBiZSBsb25nZXIgdGhhbiB0aGUNCiAgICAgICAgICAgICAgICAgICAgIHRleHQgb2YgdGhlIFRleHRSYW5nZSwgc28gdGhlIHN0YXJ0IG9mIHRoZSByYW5nZSBpcyBtb3ZlZCB0aGF0IGxlbmd0aCBpbml0aWFsbHkgYW5kIHRoZW4gYSBjaGFyYWN0ZXIgYXQNCiAgICAgICAgICAgICAgICAgICAgIGEgdGltZSB0byBtYWtlIHVwIGZvciBhbnkgdHJhaWxpbmcgbGluZSBicmVha3Mgbm90IGNvbnRhaW5lZCBpbiB0aGUgJ3RleHQnIHByb3BlcnR5LiBUaGlzIGhhcyBnb29kDQogICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZSBpbiBtb3N0IHNpdHVhdGlvbnMgY29tcGFyZWQgdG8gdGhlIHByZXZpb3VzIHR3byBtZXRob2RzLg0KICAgICAgICAgICAgICAgICAgICAgKi8NCiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBSYW5nZSA9IHdvcmtpbmdSYW5nZS5kdXBsaWNhdGUoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlTGVuZ3RoID0gdGVtcFJhbmdlLnRleHQucmVwbGFjZSgvXHJcbi9nLCAiXHIiKS5sZW5ndGg7DQoNCiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGVtcFJhbmdlLm1vdmVTdGFydCgiY2hhcmFjdGVyIiwgcmFuZ2VMZW5ndGgpOw0KICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIChjb21wYXJpc29uID0gdGVtcFJhbmdlLmNvbXBhcmVFbmRQb2ludHMoIlN0YXJ0VG9FbmQiLCB0ZW1wUmFuZ2UpKSA9PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7DQogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wUmFuZ2UubW92ZVN0YXJ0KCJjaGFyYWN0ZXIiLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHdvcmtpbmdSYW5nZS50ZXh0Lmxlbmd0aDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihib3VuZGFyeU5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KDQogICAgICAgICAgICAgICAgLy8gSWYgdGhlIGJvdW5kYXJ5IGltbWVkaWF0ZWx5IGZvbGxvd3MgYSBjaGFyYWN0ZXIgZGF0YSBub2RlIGFuZCB0aGlzIGlzIHRoZSBlbmQgYm91bmRhcnksIHdlIHNob3VsZCBmYXZvdXINCiAgICAgICAgICAgICAgICAvLyBhIHBvc2l0aW9uIHdpdGhpbiB0aGF0LCBhbmQgbGlrZXdpc2UgZm9yIGEgc3RhcnQgYm91bmRhcnkgcHJlY2VkaW5nIGEgY2hhcmFjdGVyIGRhdGEgbm9kZQ==DQogICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gKGlzQ29sbGFwc2VkIHx8ICFpc1N0YXJ0KSAmJiB3b3JraW5nTm9kZS5wcmV2aW91c1NpYmxpbmc7DQogICAgICAgICAgICAgICAgbmV4dE5vZGUgPSAoaXNDb2xsYXBzZWQgfHwgaXNTdGFydCkgJiYgd29ya2luZ05vZGUubmV4dFNpYmxpbmc7DQogICAgICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUobmV4dE5vZGUpKSB7DQogICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5UG9zaXRpb24gPSBuZXcgRG9tUG9zaXRpb24obmV4dE5vZGUsIDApOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNOb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUocHJldmlvdXNOb2RlKSkgew0KICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKHByZXZpb3VzTm9kZSwgcHJldmlvdXNOb2RlLmRhdGEubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKGNvbnRhaW5lckVsZW1lbnQsIGRvbS5nZXROb2RlSW5kZXgod29ya2luZ05vZGUpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIENsZWFuIHVwDQogICAgICAgICAgICB3b3JraW5nTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdvcmtpbmdOb2RlKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uOiBib3VuZGFyeVBvc2l0aW9uLA0KICAgICAgICAgICAgICAgIG5vZGVJbmZvOiB7DQogICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleDogbm9kZUluZGV4LA0KICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBjb250YWluZXJFbGVtZW50DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvLyBSZXR1cm5zIGEgVGV4dFJhbmdlIHJlcHJlc2VudGluZyB0aGUgYm91bmRhcnkgb2YgYSBUZXh0UmFuZ2UgZXhwcmVzc2VkIGFzIGEgbm9kZSBhbmQgYW4gb2Zmc2V0IHdpdGhpbiB0aGF0IG5vZGUuDQogICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gc3RhcnRlZCBvdXQgYXMgYW4gb3B0aW1pemVkIHZlcnNpb24gb2YgY29kZSBmb3VuZCBpbiBUaW0gQ2FtZXJvbiBSeWFuJ3MgSUVSYW5nZQ0KICAgICAgICAvLyAoaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2llcmFuZ2UvKQ0KICAgICAgICB2YXIgY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UgPSBmdW5jdGlvbihib3VuZGFyeVBvc2l0aW9uLCBpc1N0YXJ0KSB7DQogICAgICAgICAgICB2YXIgYm91bmRhcnlOb2RlLCBib3VuZGFyeVBhcmVudCwgYm91bmRhcnlPZmZzZXQgPSBib3VuZGFyeVBvc2l0aW9uLm9mZnNldDsNCiAgICAgICAgICAgIHZhciBkb2MgPSBkb20uZ2V0RG9jdW1lbnQoYm91bmRhcnlQb3NpdGlvbi5ub2RlKTsNCiAgICAgICAgICAgIHZhciB3b3JraW5nTm9kZSwgY2hpbGROb2Rlcywgd29ya2luZ1JhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZVRleHRSYW5nZSgpOw0KICAgICAgICAgICAgdmFyIG5vZGVJc0RhdGFOb2RlID0gaXNDaGFyYWN0ZXJEYXRhTm9kZShib3VuZGFyeVBvc2l0aW9uLm5vZGUpOw0KDQogICAgICAgICAgICBpZiAobm9kZUlzRGF0YU5vZGUpIHsNCiAgICAgICAgICAgICAgICBib3VuZGFyeU5vZGUgPSBib3VuZGFyeVBvc2l0aW9uLm5vZGU7DQogICAgICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQgPSBib3VuZGFyeU5vZGUucGFyZW50Tm9kZTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgY2hpbGROb2RlcyA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZS5jaGlsZE5vZGVzOw0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IChib3VuZGFyeU9mZnNldCA8IGNoaWxkTm9kZXMubGVuZ3RoKSA/IGNoaWxkTm9kZXNbYm91bmRhcnlPZmZzZXRdIDogbnVsbDsNCiAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudCA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gUG9zaXRpb24gdGhlIHJhbmdlIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgbm9kZSBjb250YWluaW5nIHRoZSBib3VuZGFyeQ0KICAgICAgICAgICAgd29ya2luZ05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgic3BhbiIpOw0KDQogICAgICAgICAgICAvLyBNYWtpbmcgdGhlIHdvcmtpbmcgZWxlbWVudCBub24tZW1wdHkgZWxlbWVudCBwZXJzdWFkZXMgSUUgdG8gY29uc2lkZXIgdGhlIFRleHRSYW5nZSBib3VuZGFyeSB0byBiZSB3aXRoaW4gdGhlDQogICAgICAgICAgICAvLyBlbGVtZW50IHJhdGhlciB0aGFuIGltbWVkaWF0ZWx5IGJlZm9yZSBvciBhZnRlciBpdA0KICAgICAgICAgICAgd29ya2luZ05vZGUuaW5uZXJIVE1MID0gIiYjZmVmZjsiOw0KDQogICAgICAgICAgICAvLyBpbnNlcnRCZWZvcmUgaXMgc3VwcG9zZWQgdG8gd29yayBsaWtlIGFwcGVuZENoaWxkIGlmIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIG51bGwuIEhvd2V2ZXIsIGEgYnVnIHJlcG9ydA0KICAgICAgICAgICAgLy8gZm9yIElFUmFuZ2Ugc3VnZ2VzdHMgdGhhdCBpdCBjYW4gY3Jhc2ggdGhlIGJyb3dzZXI6IGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZXJhbmdlL2lzc3Vlcy9kZXRhaWw/aWQ9MTINCiAgICAgICAgICAgIGlmIChib3VuZGFyeU5vZGUpIHsNCiAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudC5pbnNlcnRCZWZvcmUod29ya2luZ05vZGUsIGJvdW5kYXJ5Tm9kZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGJvdW5kYXJ5UGFyZW50LmFwcGVuZENoaWxkKHdvcmtpbmdOb2RlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgd29ya2luZ1JhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHdvcmtpbmdOb2RlKTsNCiAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5jb2xsYXBzZSghaXNTdGFydCk7DQoNCiAgICAgICAgICAgIC8vIENsZWFuIHVwDQogICAgICAgICAgICBib3VuZGFyeVBhcmVudC5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7DQoNCiAgICAgICAgICAgIC8vIE1vdmUgdGhlIHdvcmtpbmcgcmFuZ2UgdG8gdGhlIHRleHQgb2Zmc2V0LCBpZiByZXF1aXJlZA0KICAgICAgICAgICAgaWYgKG5vZGVJc0RhdGFOb2RlKSB7DQogICAgICAgICAgICAgICAgd29ya2luZ1JhbmdlW2lzU3RhcnQgPyAibW92ZVN0YXJ0IiA6ICJtb3ZlRW5kIl0oImNoYXJhY3RlciIsIGJvdW5kYXJ5T2Zmc2V0KTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHdvcmtpbmdSYW5nZTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQoNCiAgICAgICAgLy8gVGhpcyBpcyBhIHdyYXBwZXIgYXJvdW5kIGEgVGV4dFJhbmdlLCBwcm92aWRpbmcgZnVsbCBET00gUmFuZ2UgZnVuY3Rpb25hbGl0eSB1c2luZyByYW5neSdzIERvbVJhbmdlIGFzIGENCiAgICAgICAgLy8gcHJvdG90eXBlDQoNCiAgICAgICAgV3JhcHBlZFRleHRSYW5nZSA9IGZ1bmN0aW9uKHRleHRSYW5nZSkgew0KICAgICAgICAgICAgdGhpcy50ZXh0UmFuZ2UgPSB0ZXh0UmFuZ2U7DQogICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBXcmFwcGVkVGV4dFJhbmdlLnByb3RvdHlwZSA9IG5ldyBEb21SYW5nZShkb2N1bWVudCk7DQoNCiAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIHN0YXJ0LCBlbmQsIHN0YXJ0Qm91bmRhcnk7DQoNCiAgICAgICAgICAgIC8vIFRleHRSYW5nZSdzIHBhcmVudEVsZW1lbnQoKSBtZXRob2QgY2Fubm90IGJlIHRydXN0ZWQuIGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQoKSB3b3JrcyBhcm91bmQgdGhhdC4NCiAgICAgICAgICAgIHZhciByYW5nZUNvbnRhaW5lckVsZW1lbg==dCA9IGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQodGhpcy50ZXh0UmFuZ2UpOw0KDQogICAgICAgICAgICBpZiAodGV4dFJhbmdlSXNDb2xsYXBzZWQodGhpcy50ZXh0UmFuZ2UpKSB7DQogICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIHRydWUsDQogICAgICAgICAgICAgICAgICAgIHRydWUpLmJvdW5kYXJ5UG9zaXRpb247DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHN0YXJ0Qm91bmRhcnkgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIHRydWUsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0Qm91bmRhcnkuYm91bmRhcnlQb3NpdGlvbjsNCg0KICAgICAgICAgICAgICAgIC8vIEFuIG9wdGltaXphdGlvbiB1c2VkIGhlcmUgaXMgdGhhdCBpZiB0aGUgc3RhcnQgYW5kIGVuZCBib3VuZGFyaWVzIGhhdmUgdGhlIHNhbWUgcGFyZW50IGVsZW1lbnQsIHRoZQ0KICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBzY29wZSBmb3IgdGhlIGVuZCBib3VuZGFyeSBjYW4gYmUgbGltaXRlZCB0byBleGNsdWRlIHRoZSBwb3J0aW9uIG9mIHRoZSBlbGVtZW50IHRoYXQgcHJlY2VkZXMNCiAgICAgICAgICAgICAgICAvLyB0aGUgc3RhcnQgYm91bmRhcnkNCiAgICAgICAgICAgICAgICBlbmQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIGZhbHNlLCBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgc3RhcnRCb3VuZGFyeS5ub2RlSW5mbykuYm91bmRhcnlQb3NpdGlvbjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdGhpcy5zZXRTdGFydChzdGFydC5ub2RlLCBzdGFydC5vZmZzZXQpOw0KICAgICAgICAgICAgdGhpcy5zZXRFbmQoZW5kLm5vZGUsIGVuZC5vZmZzZXQpOw0KICAgICAgICB9Ow0KDQogICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiAiV3JhcHBlZFRleHRSYW5nZSI7DQogICAgICAgIH07DQoNCiAgICAgICAgRG9tUmFuZ2UuY29weUNvbXBhcmlzb25Db25zdGFudHMoV3JhcHBlZFRleHRSYW5nZSk7DQoNCiAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UobmV3IERvbVBvc2l0aW9uKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCksIHRydWUpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB2YXIgc3RhcnRSYW5nZSA9IGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlKG5ldyBEb21Qb3NpdGlvbihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLCB0cnVlKTsNCiAgICAgICAgICAgICAgICB2YXIgZW5kUmFuZ2UgPSBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZShuZXcgRG9tUG9zaXRpb24ocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpLCBmYWxzZSk7DQogICAgICAgICAgICAgICAgdmFyIHRleHRSYW5nZSA9IGdldEJvZHkoIERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpICkuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgICAgICAgICAgdGV4dFJhbmdlLnNldEVuZFBvaW50KCJTdGFydFRvU3RhcnQiLCBzdGFydFJhbmdlKTsNCiAgICAgICAgICAgICAgICB0ZXh0UmFuZ2Uuc2V0RW5kUG9pbnQoIkVuZFRvRW5kIiwgZW5kUmFuZ2UpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0UmFuZ2U7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQoNCiAgICAgICAgYXBpLldyYXBwZWRUZXh0UmFuZ2UgPSBXcmFwcGVkVGV4dFJhbmdlOw0KDQogICAgICAgIC8vIElFIDkgYW5kIGFib3ZlIGhhdmUgYm90aCBpbXBsZW1lbnRhdGlvbnMgYW5kIFJhbmd5IG1ha2VzIGJvdGggYXZhaWxhYmxlLiBUaGUgbmV4dCBmZXcgbGluZXMgc2V0cyB3aGljaA0KICAgICAgICAvLyBpbXBsZW1lbnRhdGlvbiB0byB1c2UgYnkgZGVmYXVsdC4NCiAgICAgICAgaWYgKCFhcGkuZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlIHx8IGFwaS5jb25maWcucHJlZmVyVGV4dFJhbmdlKSB7DQogICAgICAgICAgICAvLyBBZGQgV3JhcHBlZFRleHRSYW5nZSBhcyB0aGUgUmFuZ2UgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3QgdG8gYWxsb3cgZXhwcmVzc2lvbiBsaWtlIFJhbmdlLkVORF9UT19FTkQgdG8gd29yaw0KICAgICAgICAgICAgdmFyIGdsb2JhbE9iaiA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pKCk7DQogICAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbE9iai5SYW5nZSA9PSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgICAgIGdsb2JhbE9iai5SYW5nZSA9IFdyYXBwZWRUZXh0UmFuZ2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGFwaS5jcmVhdGVOYXRpdmVSYW5nZSA9IGZ1bmN0aW9uKGRvYykgew0KICAgICAgICAgICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgImNyZWF0ZU5hdGl2ZVJhbmdlIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIGdldEJvZHkoZG9jKS5jcmVhdGVUZXh0UmFuZ2UoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIGFwaS5XcmFwcGVkUmFuZ2UgPSBXcmFwcGVkVGV4dFJhbmdlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgYXBpLmNyZWF0ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgImNyZWF0ZVJhbmdlIik7DQogICAgICAgIHJldHVybiBuZXcgYXBpLldyYXBwZWRSYW5nZShhcGkuY3JlYXRlTmF0aXZlUmFuZ2UoZG9jKSk7DQogICAgfTsNCg0KICAgIGFwaS5jcmVhdGVSYW5neVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7DQogICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgImNyZWF0ZVJhbmd5UmFuZ2UiKTsNCiAgICAgICAgcmV0dXJuIG5ldyBEb21SYW5nZShkb2MpOw0KICAgIH07DQoNCiAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ2UgPSBmdW5jdGlvbihpZnJhbWVFbCkgew0KICAgICAgICBtb2R1bGUuZGVwcmVjYXRpb25Ob3RpY2UoImNyZWF0ZUlmcmFtZVJhbmdlKCkiLCAiY3JlYXRlUmFuZ2UoaWZyYW1lRWwpIik7DQogICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ2UoaWZyYW1lRWwpOw0KICAgIH07DQoNCiAgICBhcGkuY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZSA9IGZ1bmN0aW9uKGlmcmFtZUVsKSB7DQogICAgICAgIG1vZHVsZS5kZXByZWNhdGlvbk5vdGljZSgiY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZSgpIiwgImNyZWF0ZVJhbmd5UmFuZ2UoaWZyYW1lRWwpIik7DQogICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ3lSYW5nZShpZnJhbWVFbCk7DQogICAgfTsNCg0KICAgIGFwaS5hZGRDcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXIoZnVuY3Rpb24od2luKSB7DQogICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7DQogICAgICAgIGlmICh0eXBlb2YgZG9jLmNyZWF0ZVJhbmdlID09ICJ1bmRlZmluZWQiKSB7DQogICAgICAgICAgICBkb2MuY3JlYXRlUmFuZ2UgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQogICAgICAgIGRvYyA9IHdpbiA9IG51bGw7DQogICAgfSk7DQp9KTsKLy8gVGhpcyBtb2R1bGUgY3JlYXRlcyBhIHNlbGVjdGlvbiBvYmplY3Qgd3JhcHBlciB0aGF0IGNvbmZvcm1zIGFzIGNsb3NlbHkgYXMgcG9zc2libGUgdG8gdGhlIFNlbGVjdGlvbiBzcGVjaWZpY2F0aW9uDQovLyBpbiB0aGUgSFRNTCBFZGl0aW5nIHNwZWMgKGh0dHA6Ly9kdmNzLnczLm9yZy9oZy9lZGl0aW5nL3Jhdy1maWxlL3RpcC9lZGl0aW5nLmh0bQ==bCNzZWxlY3Rpb25zKQ0KcmFuZ3kuY3JlYXRlTW9kdWxlKCJXcmFwcGVkU2VsZWN0aW9uIiwgZnVuY3Rpb24oYXBpLCBtb2R1bGUpIHsNCiAgICBhcGkucmVxdWlyZU1vZHVsZXMoIFsiRG9tVXRpbCIsICJEb21SYW5nZSIsICJXcmFwcGVkUmFuZ2UiXSApOw0KDQogICAgYXBpLmNvbmZpZy5jaGVja1NlbGVjdGlvblJhbmdlcyA9IHRydWU7DQoNCiAgICB2YXIgQk9PTEVBTiA9ICJib29sZWFuIjsNCiAgICB2YXIgZG9tID0gYXBpLmRvbTsNCiAgICB2YXIgdXRpbCA9IGFwaS51dGlsOw0KICAgIHZhciBpc0hvc3RNZXRob2QgPSB1dGlsLmlzSG9zdE1ldGhvZDsNCiAgICB2YXIgRG9tUmFuZ2UgPSBhcGkuRG9tUmFuZ2U7DQogICAgdmFyIFdyYXBwZWRSYW5nZSA9IGFwaS5XcmFwcGVkUmFuZ2U7DQogICAgdmFyIERPTUV4Y2VwdGlvbiA9IGFwaS5ET01FeGNlcHRpb247DQogICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uOw0KICAgIHZhciBnZXROYXRpdmVTZWxlY3Rpb247DQogICAgdmFyIHNlbGVjdGlvbklzQ29sbGFwc2VkOw0KICAgIHZhciBmZWF0dXJlcyA9IGFwaS5mZWF0dXJlczsNCiAgICB2YXIgQ09OVFJPTCA9ICJDb250cm9sIjsNCiAgICB2YXIgZ2V0RG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQ7DQogICAgdmFyIGdldEJvZHkgPSBkb20uZ2V0Qm9keTsNCiAgICB2YXIgcmFuZ2VzRXF1YWwgPSBEb21SYW5nZS5yYW5nZXNFcXVhbDsNCg0KDQogICAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byBzdXBwb3J0IGRpcmVjdGlvbiBwYXJhbWV0ZXJzIGluIHRoZSBBUEkgdGhhdCBtYXkgYmUgYSBzdHJpbmcgKCJiYWNrd2FyZCIgb3IgImZvcndhcmQiKSBvciBhDQogICAgLy8gQm9vbGVhbiAodHJ1ZSBmb3IgYmFja3dhcmRzKS4NCiAgICBmdW5jdGlvbiBpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcikgew0KICAgICAgICByZXR1cm4gKHR5cGVvZiBkaXIgPT0gInN0cmluZyIpID8gKGRpciA9PSAiYmFja3dhcmQiKSA6ICEhZGlyOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFdpbmRvdyh3aW4sIG1ldGhvZE5hbWUpIHsNCiAgICAgICAgaWYgKCF3aW4pIHsNCiAgICAgICAgICAgIHJldHVybiB3aW5kb3c7DQogICAgICAgIH0gZWxzZSBpZiAoZG9tLmlzV2luZG93KHdpbikpIHsNCiAgICAgICAgICAgIHJldHVybiB3aW47DQogICAgICAgIH0gZWxzZSBpZiAod2luIGluc3RhbmNlb2YgV3JhcHBlZFNlbGVjdGlvbikgew0KICAgICAgICAgICAgcmV0dXJuIHdpbi53aW47DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB2YXIgZG9jID0gZG9tLmdldENvbnRlbnREb2N1bWVudCh3aW4sIG1vZHVsZSwgbWV0aG9kTmFtZSk7DQogICAgICAgICAgICByZXR1cm4gZG9tLmdldFdpbmRvdyhkb2MpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0V2luU2VsZWN0aW9uKHdpblBhcmFtKSB7DQogICAgICAgIHJldHVybiBnZXRXaW5kb3cod2luUGFyYW0sICJnZXRXaW5TZWxlY3Rpb24iKS5nZXRTZWxlY3Rpb24oKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXREb2NTZWxlY3Rpb24od2luUGFyYW0pIHsNCiAgICAgICAgcmV0dXJuIGdldFdpbmRvdyh3aW5QYXJhbSwgImdldERvY1NlbGVjdGlvbiIpLmRvY3VtZW50LnNlbGVjdGlvbjsNCiAgICB9DQoNCiAgICAvLyBUZXN0IGZvciB0aGUgUmFuZ2UvVGV4dFJhbmdlIGFuZCBTZWxlY3Rpb24gZmVhdHVyZXMgcmVxdWlyZWQNCiAgICAvLyBUZXN0IGZvciBhYmlsaXR5IHRvIHJldHJpZXZlIHNlbGVjdGlvbg0KICAgIHZhciBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uID0gaXNIb3N0TWV0aG9kKHdpbmRvdywgImdldFNlbGVjdGlvbiIpLA0KICAgICAgICBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uID0gdXRpbC5pc0hvc3RPYmplY3QoZG9jdW1lbnQsICJzZWxlY3Rpb24iKTsNCg0KICAgIGZlYXR1cmVzLmltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gPSBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uOw0KICAgIGZlYXR1cmVzLmltcGxlbWVudHNEb2NTZWxlY3Rpb24gPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uOw0KDQogICAgdmFyIHVzZURvY3VtZW50U2VsZWN0aW9uID0gaW1wbGVtZW50c0RvY1NlbGVjdGlvbiAmJiAoIWltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gfHwgYXBpLmNvbmZpZy5wcmVmZXJUZXh0UmFuZ2UpOw0KDQogICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7DQogICAgICAgIGdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldERvY1NlbGVjdGlvbjsNCiAgICAgICAgYXBpLmlzU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbih3aW5QYXJhbSkgew0KICAgICAgICAgICAgdmFyIGRvYyA9IGdldFdpbmRvdyh3aW5QYXJhbSwgImlzU2VsZWN0aW9uVmFsaWQiKS5kb2N1bWVudCwgbmF0aXZlU2VsID0gZG9jLnNlbGVjdGlvbjsNCg0KICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0aW9uIFRleHRSYW5nZSBpcyBhY3R1YWxseSBjb250YWluZWQgd2l0aGluIHRoZSBjb3JyZWN0IGRvY3VtZW50DQogICAgICAgICAgICByZXR1cm4gKG5hdGl2ZVNlbC50eXBlICE9ICJOb25lIiB8fCBnZXREb2N1bWVudChuYXRpdmVTZWwuY3JlYXRlUmFuZ2UoKS5wYXJlbnRFbGVtZW50KCkpID09IGRvYyk7DQogICAgICAgIH07DQogICAgfSBlbHNlIGlmIChpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uKSB7DQogICAgICAgIGdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldFdpblNlbGVjdGlvbjsNCiAgICAgICAgYXBpLmlzU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJOZWl0aGVyIGRvY3VtZW50LnNlbGVjdGlvbiBvciB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkgZGV0ZWN0ZWQuIik7DQogICAgfQ0KDQogICAgYXBpLmdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldE5hdGl2ZVNlbGVjdGlvbjsNCg0KICAgIHZhciB0ZXN0U2VsZWN0aW9uID0gZ2V0TmF0aXZlU2VsZWN0aW9uKCk7DQogICAgdmFyIHRlc3RSYW5nZSA9IGFwaS5jcmVhdGVOYXRpdmVSYW5nZShkb2N1bWVudCk7DQogICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTsNCg0KICAgIC8vIE9idGFpbmluZyBhIHJhbmdlIGZyb20gYSBzZWxlY3Rpb24NCiAgICB2YXIgc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgPSB1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RTZWxlY3Rpb24sDQogICAgICAgIFsiYW5jaG9yTm9kZSIsICJmb2N1c05vZGUiLCAiYW5jaG9yT2Zmc2V0IiwgImZvY3VzT2Zmc2V0Il0pOw0KDQogICAgZmVhdHVyZXMuc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgPSBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1czsNCg0KICAgIC8vIFRlc3QgZm9yIGV4aXN0ZW5jZSBvZiBuYXRpdmUgc2VsZWN0aW9uIGV4dGVuZCgpIG1ldGhvZA0KICAgIHZhciBzZWxlY3Rpb25IYXNFeHRlbmQgPSBpc0hvc3RNZXRob2QodGVzdFNlbGVjdGlvbiwgImV4dGVuZCIpOw0KICAgIGZlYXR1cmVzLnNlbGVjdGlvbkhhc0V4dGVuZCA9IHNlbGVjdGlvbkhhc0V4dGVuZDsNCg0KICAgIC8vIFRlc3QgaWYgcmFuZ2VDb3VudCBleGlzdHMNCiAgICB2YXIgc2VsZWN0aW9uSGFzUmFuZ2VDb3VudCA9ICh0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09ICJudW1iZXIiKTsNCiAgICBmZWF0dXJlcy5zZWxlY3Rpb25IYXNSYW5nZUNvdW50ID0gc2VsZWN0aW9uSGFzUmFuZ2VDb3VudDsNCg0KICAgIHZhciBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gZmFsc2U7DQogICAgdmFyIGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IHRydWU7DQoNCiAgICBpZiAodXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXN0U2VsZWN0aW9uLCBbImFkZFJhbmdlIiwgImdldFJhbmdlQXQiLCAicmVtb3ZlQWxsUmFuZ2VzIl0pICYmDQogICAgICAgICAgICB0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09ICJudW1iZXIiICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkgew0KDQogICAgICAgIChmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIC8vIFByZXZpb3VzbHkgYW4gaWZyYW1lIHdhcyB1cw==ZWQgYnV0IHRoaXMgY2F1c2VkIHByb2JsZW1zIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyBpbiBJRSwgc28gdGVzdHMgYXJlDQogICAgICAgICAgICAvLyBwZXJmb3JtZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnQncyBzZWxlY3Rpb24uIFNlZSBpc3N1ZSAxMDkuDQoNCiAgICAgICAgICAgIC8vIE5vdGUgYWxzbyB0aGF0IGlmIGEgc2VsZWN0aW9uIHByZXZpb3VzbHkgZXhpc3RlZCwgaXQgaXMgd2lwZWQgYnkgdGhlc2UgdGVzdHMuIFRoaXMgc2hvdWxkIHVzdWFsbHkgYmUgZmluZQ0KICAgICAgICAgICAgLy8gYmVjYXVzZSBpbml0aWFsaXphdGlvbiB1c3VhbGx5IGhhcHBlbnMgd2hlbiB0aGUgZG9jdW1lbnQgbG9hZHMsIGJ1dCBjb3VsZCBiZSBhIHByb2JsZW0gZm9yIGEgc2NyaXB0IHRoYXQNCiAgICAgICAgICAgIC8vIGxvYWRzIGFuZCBpbml0aWFsaXplcyBSYW5neSBsYXRlci4gSWYgYW55b25lIGNvbXBsYWlucywgY29kZSBjb3VsZCBiZSBhZGRlZCB0byBzYXZlIGFuZCByZXN0b3JlIHRoZQ0KICAgICAgICAgICAgLy8gc2VsZWN0aW9uLg0KICAgICAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTsNCiAgICAgICAgICAgIGlmIChzZWwpIHsNCiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGdldEJvZHkoZG9jdW1lbnQpOw0KICAgICAgICAgICAgICAgIHZhciB0ZXN0RWwgPSBib2R5LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSApOw0KICAgICAgICAgICAgICAgIHRlc3RFbC5jb250ZW50RWRpdGFibGUgPSAiZmFsc2UiOw0KICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IHRlc3RFbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIlx1MDBhMFx1MDBhMFx1MDBhMCIpICk7DQoNCiAgICAgICAgICAgICAgICAvLyBUZXN0IHdoZXRoZXIgdGhlIG5hdGl2ZSBzZWxlY3Rpb24gd2lsbCBhbGxvdyBhIGNvbGxhcHNlZCBzZWxlY3Rpb24gd2l0aGluIGEgbm9uLWVkaXRhYmxlIGVsZW1lbnQNCiAgICAgICAgICAgICAgICB2YXIgcjEgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOw0KDQogICAgICAgICAgICAgICAgcjEuc2V0U3RhcnQodGV4dE5vZGUsIDEpOw0KICAgICAgICAgICAgICAgIHIxLmNvbGxhcHNlKHRydWUpOw0KICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMSk7DQogICAgICAgICAgICAgICAgY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkID0gKHNlbC5yYW5nZUNvdW50ID09IDEpOw0KICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTsNCg0KICAgICAgICAgICAgICAgIC8vIFRlc3Qgd2hldGhlciB0aGUgbmF0aXZlIHNlbGVjdGlvbiBpcyBjYXBhYmxlIG9mIHN1cHBvcnRpbmcgbXVsdGlwbGUgcmFuZ2VzDQogICAgICAgICAgICAgICAgdmFyIHIyID0gcjEuY2xvbmVSYW5nZSgpOw0KICAgICAgICAgICAgICAgIHIxLnNldFN0YXJ0KHRleHROb2RlLCAwKTsNCiAgICAgICAgICAgICAgICByMi5zZXRFbmQodGV4dE5vZGUsIDMpOw0KICAgICAgICAgICAgICAgIHIyLnNldFN0YXJ0KHRleHROb2RlLCAyKTsNCiAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocjEpOw0KICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMik7DQoNCiAgICAgICAgICAgICAgICBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gKHNlbC5yYW5nZUNvdW50ID09IDIpOw0KDQogICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXANCiAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKHRlc3RFbCk7DQogICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgIHIxLmRldGFjaCgpOw0KICAgICAgICAgICAgICAgIHIyLmRldGFjaCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KSgpOw0KICAgIH0NCg0KICAgIGZlYXR1cmVzLnNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMgPSBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzOw0KICAgIGZlYXR1cmVzLmNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZDsNCg0KICAgIC8vIENvbnRyb2xSYW5nZXMNCiAgICB2YXIgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IGZhbHNlLCB0ZXN0Q29udHJvbFJhbmdlOw0KDQogICAgaWYgKGJvZHkgJiYgaXNIb3N0TWV0aG9kKGJvZHksICJjcmVhdGVDb250cm9sUmFuZ2UiKSkgew0KICAgICAgICB0ZXN0Q29udHJvbFJhbmdlID0gYm9keS5jcmVhdGVDb250cm9sUmFuZ2UoKTsNCiAgICAgICAgaWYgKHV0aWwuYXJlSG9zdFByb3BlcnRpZXModGVzdENvbnRyb2xSYW5nZSwgWyJpdGVtIiwgImFkZCJdKSkgew0KICAgICAgICAgICAgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IHRydWU7DQogICAgICAgIH0NCiAgICB9DQogICAgZmVhdHVyZXMuaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IGltcGxlbWVudHNDb250cm9sUmFuZ2U7DQoNCiAgICAvLyBTZWxlY3Rpb24gY29sbGFwc2VkbmVzcw0KICAgIGlmIChzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cykgew0KICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgcmV0dXJuIHNlbC5hbmNob3JOb2RlID09PSBzZWwuZm9jdXNOb2RlICYmIHNlbC5hbmNob3JPZmZzZXQgPT09IHNlbC5mb2N1c09mZnNldDsNCiAgICAgICAgfTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgcmV0dXJuIHNlbC5yYW5nZUNvdW50ID8gc2VsLmdldFJhbmdlQXQoc2VsLnJhbmdlQ291bnQgLSAxKS5jb2xsYXBzZWQgOiBmYWxzZTsNCiAgICAgICAgfTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZShzZWwsIHJhbmdlLCBiYWNrd2FyZCkgew0KICAgICAgICB2YXIgYW5jaG9yUHJlZml4ID0gYmFja3dhcmQgPyAiZW5kIiA6ICJzdGFydCIsIGZvY3VzUHJlZml4ID0gYmFja3dhcmQgPyAic3RhcnQiIDogImVuZCI7DQogICAgICAgIHNlbC5hbmNob3JOb2RlID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgIkNvbnRhaW5lciJdOw0KICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgIk9mZnNldCJdOw0KICAgICAgICBzZWwuZm9jdXNOb2RlID0gcmFuZ2VbZm9jdXNQcmVmaXggKyAiQ29udGFpbmVyIl07DQogICAgICAgIHNlbC5mb2N1c09mZnNldCA9IHJhbmdlW2ZvY3VzUHJlZml4ICsgIk9mZnNldCJdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbihzZWwpIHsNCiAgICAgICAgdmFyIG5hdGl2ZVNlbCA9IHNlbC5uYXRpdmVTZWxlY3Rpb247DQogICAgICAgIHNlbC5hbmNob3JOb2RlID0gbmF0aXZlU2VsLmFuY2hvck5vZGU7DQogICAgICAgIHNlbC5hbmNob3JPZmZzZXQgPSBuYXRpdmVTZWwuYW5jaG9yT2Zmc2V0Ow0KICAgICAgICBzZWwuZm9jdXNOb2RlID0gbmF0aXZlU2VsLmZvY3VzTm9kZTsNCiAgICAgICAgc2VsLmZvY3VzT2Zmc2V0ID0gbmF0aXZlU2VsLmZvY3VzT2Zmc2V0Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCkgew0KICAgICAgICBzZWwuYW5jaG9yTm9kZSA9IHNlbC5mb2N1c05vZGUgPSBudWxsOw0KICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gc2VsLmZvY3VzT2Zmc2V0ID0gMDsNCiAgICAgICAgc2VsLnJhbmdlQ291bnQgPSAwOw0KICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB0cnVlOw0KICAgICAgICBzZWwuX3Jhbmdlcy5sZW5ndGggPSAwOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldE5hdGl2ZVJhbmdlKHJhbmdlKSB7DQogICAgICAgIHZhciBuYXRpdmVSYW5nZTsNCiAgICAgICAgaWYgKHJhbmdlIGluc3RhbmNlb2YgRG9tUmFuZ2UpIHsNCiAgICAgICAgICAgIG5hdGl2ZVJhbmdlID0gYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlKHJhbmdlLmdldERvY3VtZW50KCkpOw0KICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcg==YW5nZS5lbmRPZmZzZXQpOw0KICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTsNCiAgICAgICAgfSBlbHNlIGlmIChyYW5nZSBpbnN0YW5jZW9mIFdyYXBwZWRSYW5nZSkgew0KICAgICAgICAgICAgbmF0aXZlUmFuZ2UgPSByYW5nZS5uYXRpdmVSYW5nZTsNCiAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UgJiYgKHJhbmdlIGluc3RhbmNlb2YgZG9tLmdldFdpbmRvdyhyYW5nZS5zdGFydENvbnRhaW5lcikuUmFuZ2UpKSB7DQogICAgICAgICAgICBuYXRpdmVSYW5nZSA9IHJhbmdlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBuYXRpdmVSYW5nZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByYW5nZUNvbnRhaW5zU2luZ2xlRWxlbWVudChyYW5nZU5vZGVzKSB7DQogICAgICAgIGlmICghcmFuZ2VOb2Rlcy5sZW5ndGggfHwgcmFuZ2VOb2Rlc1swXS5ub2RlVHlwZSAhPSAxKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHJhbmdlTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmICghZG9tLmlzQW5jZXN0b3JPZihyYW5nZU5vZGVzWzBdLCByYW5nZU5vZGVzW2ldKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKSB7DQogICAgICAgIHZhciBub2RlcyA9IHJhbmdlLmdldE5vZGVzKCk7DQogICAgICAgIGlmICghcmFuZ2VDb250YWluc1NpbmdsZUVsZW1lbnQobm9kZXMpKSB7DQogICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoImdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2U6IHJhbmdlICIgKyByYW5nZS5pbnNwZWN0KCkgKyAiIGRpZCBub3QgY29uc2lzdCBvZiBhIHNpbmdsZSBlbGVtZW50Iik7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG5vZGVzWzBdOw0KICAgIH0NCg0KICAgIC8vIFNpbXBsZSwgcXVpY2sgdGVzdCB3aGljaCBvbmx5IG5lZWRzIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gYSBUZXh0UmFuZ2UgYW5kIGEgQ29udHJvbFJhbmdlDQogICAgZnVuY3Rpb24gaXNUZXh0UmFuZ2UocmFuZ2UpIHsNCiAgICAgICAgcmV0dXJuICEhcmFuZ2UgJiYgdHlwZW9mIHJhbmdlLnRleHQgIT0gInVuZGVmaW5lZCI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKSB7DQogICAgICAgIC8vIENyZWF0ZSBhIFJhbmdlIGZyb20gdGhlIHNlbGVjdGVkIFRleHRSYW5nZQ0KICAgICAgICB2YXIgd3JhcHBlZFJhbmdlID0gbmV3IFdyYXBwZWRSYW5nZShyYW5nZSk7DQogICAgICAgIHNlbC5fcmFuZ2VzID0gW3dyYXBwZWRSYW5nZV07DQoNCiAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCB3cmFwcGVkUmFuZ2UsIGZhbHNlKTsNCiAgICAgICAgc2VsLnJhbmdlQ291bnQgPSAxOw0KICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB3cmFwcGVkUmFuZ2UuY29sbGFwc2VkOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKSB7DQogICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICBzZWwuX3Jhbmdlcy5sZW5ndGggPSAwOw0KICAgICAgICBpZiAoc2VsLmRvY1NlbGVjdGlvbi50eXBlID09ICJOb25lIikgew0KICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSBzZWwuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICBpZiAoaXNUZXh0UmFuZ2UoY29udHJvbFJhbmdlKSkgew0KICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FzZSAod2hlcmUgdGhlIHNlbGVjdGlvbiB0eXBlIGlzICJDb250cm9sIiBhbmQgY2FsbGluZyBjcmVhdGVSYW5nZSgpIG9uIHRoZSBzZWxlY3Rpb24gcmV0dXJucw0KICAgICAgICAgICAgICAgIC8vIGEgVGV4dFJhbmdlKSBjYW4gaGFwcGVuIGluIElFIDkuIEl0IGhhcHBlbnMsIGZvciBleGFtcGxlLCB3aGVuIGFsbCBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWQNCiAgICAgICAgICAgICAgICAvLyBDb250cm9sUmFuZ2UgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgQ29udHJvbFJhbmdlIGFuZCByZW1vdmVkIGZyb20gdGhlIGRvY3VtZW50Lg0KICAgICAgICAgICAgICAgIHVwZGF0ZUZyb21UZXh0UmFuZ2Uoc2VsLCBjb250cm9sUmFuZ2UpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7DQogICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBkb2MgPSBnZXREb2N1bWVudChjb250cm9sUmFuZ2UuaXRlbSgwKSk7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWwucmFuZ2VDb3VudDsgKytpKSB7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7DQogICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoY29udHJvbFJhbmdlLml0ZW0oaSkpOw0KICAgICAgICAgICAgICAgICAgICBzZWwuX3Jhbmdlcy5wdXNoKHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc2VsLmlzQ29sbGFwc2VkID0gc2VsLnJhbmdlQ291bnQgPT0gMSAmJiBzZWwuX3Jhbmdlc1swXS5jb2xsYXBzZWQ7DQogICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCBzZWwuX3Jhbmdlc1tzZWwucmFuZ2VDb3VudCAtIDFdLCBmYWxzZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbihzZWwsIHJhbmdlKSB7DQogICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSBzZWwuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgIHZhciByYW5nZUVsZW1lbnQgPSBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKTsNCg0KICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQ29udHJvbFJhbmdlIGNvbnRhaW5pbmcgYWxsIHRoZSBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWQgQ29udHJvbFJhbmdlIHBsdXMgdGhlIGVsZW1lbnQNCiAgICAgICAgLy8gY29udGFpbmVkIGJ5IHRoZSBzdXBwbGllZCByYW5nZQ0KICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpOw0KICAgICAgICB2YXIgbmV3Q29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpOw0KICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY29udHJvbFJhbmdlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTsNCiAgICAgICAgfQ0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLmFkZChyYW5nZUVsZW1lbnQpOw0KICAgICAgICB9IGNhdGNoIChleCkgew0KICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJhZGRSYW5nZSgpOiBFbGVtZW50IHdpdGhpbiB0aGUgc3BlY2lmaWVkIFJhbmdlIGNvdWxkIG5vdCBiZSBhZGRlZCB0byBjb250cm9sIHNlbGVjdGlvbiAoZG9lcyBpdCBoYXZlIGxheW91dD8pIik7DQogICAgICAgIH0NCiAgICAgICAgbmV3Q29udHJvbFJhbmdlLnNlbGVjdCgpOw0KDQogICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7DQogICAgfQ0KDQogICAgdmFyIGdldFNlbGVjdGlvblJhbmdlQXQ7DQoNCiAgICBpZiAoaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sICJnZXRSYQ==bmdlQXQiKSkgew0KICAgICAgICAvLyB0cnkvY2F0Y2ggaXMgcHJlc2VudCBiZWNhdXNlIGdldFJhbmdlQXQoKSBtdXN0IGhhdmUgdGhyb3duIGFuIGVycm9yIGluIHNvbWUgYnJvd3NlciBhbmQgc29tZSBzaXR1YXRpb24uDQogICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIEkgZGlkbid0IHdyaXRlIGEgY29tbWVudCBhYm91dCB0aGUgc3BlY2lmaWNzIGFuZCBhbSBub3cgc2NhcmVkIHRvIHRha2UgaXQgb3V0LiBMZXQgdGhhdCBiZSBhDQogICAgICAgIC8vIGxlc3NvbiB0byB1cyBhbGwsIGVzcGVjaWFsbHkgbWUuDQogICAgICAgIGdldFNlbGVjdGlvblJhbmdlQXQgPSBmdW5jdGlvbihzZWwsIGluZGV4KSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHJldHVybiBzZWwuZ2V0UmFuZ2VBdChpbmRleCk7DQogICAgICAgICAgICB9IGNhdGNoIChleCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMpIHsNCiAgICAgICAgZ2V0U2VsZWN0aW9uUmFuZ2VBdCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KHNlbC5hbmNob3JOb2RlKTsNCiAgICAgICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpOw0KICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBbmRFbmQoc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQsIHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7DQoNCiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3Rpb24gd2FzIHNlbGVjdGVkIGJhY2t3YXJkcyAoZnJvbSB0aGUgZW5kIHRvIHRoZSBzdGFydCBpbiB0aGUNCiAgICAgICAgICAgIC8vIGRvY3VtZW50KQ0KICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAhPT0gdGhpcy5pc0NvbGxhcHNlZCkgew0KICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCwgc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gcmFuZ2U7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gV3JhcHBlZFNlbGVjdGlvbihzZWxlY3Rpb24sIGRvY1NlbGVjdGlvbiwgd2luKSB7DQogICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uID0gc2VsZWN0aW9uOw0KICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbiA9IGRvY1NlbGVjdGlvbjsNCiAgICAgICAgdGhpcy5fcmFuZ2VzID0gW107DQogICAgICAgIHRoaXMud2luID0gd2luOw0KICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0aWVzKHNlbCkgew0KICAgICAgICBzZWwud2luID0gc2VsLmFuY2hvck5vZGUgPSBzZWwuZm9jdXNOb2RlID0gc2VsLl9yYW5nZXMgPSBudWxsOw0KICAgICAgICBzZWwucmFuZ2VDb3VudCA9IHNlbC5hbmNob3JPZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQgPSAwOw0KICAgICAgICBzZWwuZGV0YWNoZWQgPSB0cnVlOw0KICAgIH0NCg0KICAgIHZhciBjYWNoZWRSYW5neVNlbGVjdGlvbnMgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGZpbmRDYWNoZWRTZWxlY3Rpb24od2luLCBhY3Rpb24pIHsNCiAgICAgICAgdmFyIGkgPSBjYWNoZWRSYW5neVNlbGVjdGlvbnMubGVuZ3RoLCBjYWNoZWQsIHNlbDsNCiAgICAgICAgd2hpbGUgKGktLSkgew0KICAgICAgICAgICAgY2FjaGVkID0gY2FjaGVkUmFuZ3lTZWxlY3Rpb25zW2ldOw0KICAgICAgICAgICAgc2VsID0gY2FjaGVkLnNlbGVjdGlvbjsNCiAgICAgICAgICAgIGlmIChhY3Rpb24gPT0gImRlbGV0ZUFsbCIpIHsNCiAgICAgICAgICAgICAgICBkZWxldGVQcm9wZXJ0aWVzKHNlbCk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGNhY2hlZC53aW4gPT0gd2luKSB7DQogICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSAiZGVsZXRlIikgew0KICAgICAgICAgICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMuc3BsaWNlKGksIDEpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoYWN0aW9uID09ICJkZWxldGVBbGwiKSB7DQogICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMubGVuZ3RoID0gMDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQoNCiAgICB2YXIgZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24od2luKSB7DQogICAgICAgIC8vIENoZWNrIGlmIHRoZSBwYXJhbWV0ZXIgaXMgYSBSYW5neSBTZWxlY3Rpb24gb2JqZWN0DQogICAgICAgIGlmICh3aW4gJiYgd2luIGluc3RhbmNlb2YgV3JhcHBlZFNlbGVjdGlvbikgew0KICAgICAgICAgICAgd2luLnJlZnJlc2goKTsNCiAgICAgICAgICAgIHJldHVybiB3aW47DQogICAgICAgIH0NCg0KICAgICAgICB3aW4gPSBnZXRXaW5kb3cod2luLCAiZ2V0TmF0aXZlU2VsZWN0aW9uIik7DQoNCiAgICAgICAgdmFyIHNlbCA9IGZpbmRDYWNoZWRTZWxlY3Rpb24od2luKTsNCiAgICAgICAgdmFyIG5hdGl2ZVNlbCA9IGdldE5hdGl2ZVNlbGVjdGlvbih3aW4pLCBkb2NTZWwgPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uID8gZ2V0RG9jU2VsZWN0aW9uKHdpbikgOiBudWxsOw0KICAgICAgICBpZiAoc2VsKSB7DQogICAgICAgICAgICBzZWwubmF0aXZlU2VsZWN0aW9uID0gbmF0aXZlU2VsOw0KICAgICAgICAgICAgc2VsLmRvY1NlbGVjdGlvbiA9IGRvY1NlbDsNCiAgICAgICAgICAgIHNlbC5yZWZyZXNoKCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBzZWwgPSBuZXcgV3JhcHBlZFNlbGVjdGlvbihuYXRpdmVTZWwsIGRvY1NlbCwgd2luKTsNCiAgICAgICAgICAgIGNhY2hlZFJhbmd5U2VsZWN0aW9ucy5wdXNoKCB7IHdpbjogd2luLCBzZWxlY3Rpb246IHNlbCB9ICk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHNlbDsNCiAgICB9Ow0KDQogICAgYXBpLmdldFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbjsNCg0KICAgIGFwaS5nZXRJZnJhbWVTZWxlY3Rpb24gPSBmdW5jdGlvbihpZnJhbWVFbCkgew0KICAgICAgICBtb2R1bGUuZGVwcmVjYXRpb25Ob3RpY2UoImdldElmcmFtZVNlbGVjdGlvbigpIiwgImdldFNlbGVjdGlvbihpZnJhbWVFbCkiKTsNCiAgICAgICAgcmV0dXJuIGFwaS5nZXRTZWxlY3Rpb24oZG9tLmdldElmcmFtZVdpbmRvdyhpZnJhbWVFbCkpOw0KICAgIH07DQoNCiAgICB2YXIgc2VsUHJvdG8gPSBXcmFwcGVkU2VsZWN0aW9uLnByb3RvdHlwZTsNCg0KICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsLCByYW5nZXMpIHsNCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIHNlbGVjdGlvbiBiZWNvbWVzIG9mIHR5cGUgIkNvbnRyb2wiDQogICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudChyYW5nZXNbMF0uc3RhcnRDb250YWluZXIpOw0KICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpOw0KICAgICAgICBmb3IgKHZhciBpID0gMCwgZWw7IGkgPCByYW5nZUNvdW50OyArK2kpIHsNCiAgICAgICAgICAgIGVsID0gZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZShyYW5nZXNbaV0pOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBjb250cm9sUmFuZ2UuYWRkKGVsKTsNCiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKCJzZXRSYW5nZXMoKTogRWxlbWVudCB3aXRoaW4gdGhlIG9uZSBvZiB0aGUgc3BlY2lmaWVkIFJhbmdlcyBjb3VsZCBub3QgYmUgYWRkZWQgdG8gY29udHJvbCBzZWxlY3Rpb24gKGRvZXMgaXQgaGF2ZSBsYXlvdXQ/KSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNvbnRyb2xSYW5nZS5zZWxlY3QoKTsNCg0KICAgICAgICAvLyBVcA==ZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7DQogICAgfQ0KDQogICAgLy8gU2VsZWN0aW5nIGEgcmFuZ2UNCiAgICBpZiAoIXVzZURvY3VtZW50U2VsZWN0aW9uICYmIHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzICYmIHV0aWwuYXJlSG9zdE1ldGhvZHModGVzdFNlbGVjdGlvbiwgWyJyZW1vdmVBbGxSYW5nZXMiLCAiYWRkUmFuZ2UiXSkpIHsNCiAgICAgICAgc2VsUHJvdG8ucmVtb3ZlQWxsUmFuZ2VzID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHRoaXMpOw0KICAgICAgICB9Ow0KDQogICAgICAgIHZhciBhZGRSYW5nZUJhY2t3YXJkID0gZnVuY3Rpb24oc2VsLCByYW5nZSkgew0KICAgICAgICAgICAgdmFyIGRvYyA9IERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpOw0KICAgICAgICAgICAgdmFyIGVuZFJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKGRvYyk7DQogICAgICAgICAgICBlbmRSYW5nZS5jb2xsYXBzZVRvUG9pbnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpOw0KICAgICAgICAgICAgc2VsLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShlbmRSYW5nZSkpOw0KICAgICAgICAgICAgc2VsLm5hdGl2ZVNlbGVjdGlvbi5leHRlbmQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTsNCiAgICAgICAgICAgIHNlbC5yZWZyZXNoKCk7DQogICAgICAgIH07DQoNCiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc1JhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UsIGRpcmVjdGlvbikgew0KICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgdGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNEaXJlY3Rpb25CYWNrd2FyZChkaXJlY3Rpb24pICYmIHNlbGVjdGlvbkhhc0V4dGVuZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZCh0aGlzLCByYW5nZSk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNSYW5nZUNvdW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1JhbmdlQ291bnQgPSB0aGlzLnJhbmdlQ291bnQ7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSYW5nZUNvdW50ID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBuYXRpdmUgcmFuZ2Ugc28gdGhhdCBjaGFuZ2luZyB0aGUgc2VsZWN0ZWQgcmFuZ2UgZG9lcyBub3QgYWZmZWN0IHRoZSBzZWxlY3Rpb24uDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGNvbnRyYXJ5IHRvIHRoZSBzcGVjIGJ1dCBpcyB0aGUgb25seSB3YXkgdG8gYWNoaWV2ZSBjb25zaXN0ZW5jeSBiZXR3ZWVuIGJyb3dzZXJzLiBTZWUNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlIDgwLg0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVTZWxlY3Rpb24uYWRkUmFuZ2UoZ2V0TmF0aXZlUmFuZ2UocmFuZ2UpLmNsb25lUmFuZ2UoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgYWRkaW5nIHRoZSByYW5nZSB3YXMgc3VjY2Vzc2Z1bA0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZUNvdW50ID0gdGhpcy5uYXRpdmVTZWxlY3Rpb24ucmFuZ2VDb3VudDsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCA9PSBwcmV2aW91c1JhbmdlQ291bnQgKyAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJhbmdlIHdhcyBhZGRlZCBzdWNjZXNzZnVsbHkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIHJhbmdlIHRoYXQgd2UgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbiBpcyByZWZsZWN0ZWQgaW4gdGhlIGxhc3QgcmFuZ2UgZXh0cmFjdGVkIGZyb20NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VsZWN0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwaS5jb25maWcuY2hlY2tTZWxlY3Rpb25SYW5nZXMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVJhbmdlID0gZ2V0U2VsZWN0aW9uUmFuZ2VBdCh0aGlzLm5hdGl2ZVNlbGVjdGlvbiwgdGhpcy5yYW5nZUNvdW50IC0gMSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXRpdmVSYW5nZSAmJiAhcmFuZ2VzRXF1YWwobmF0aXZlUmFuZ2UsIHJhbmdlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFwcGVucyBpbiBXZWJLaXQgd2l0aCwgZm9yIGV4YW1wbGUsIGEgc2VsZWN0aW9uIHBsYWNlZCBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0IG5vZGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gbmV3IFdyYXBwZWRSYW5nZShuYXRpdmVSYW5nZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudCAtIDFdID0gcmFuZ2U7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2UodGhpcywgcmFuZ2UsIHNlbGVjdGlvbklzQmFja3dhcmQodGhpcy5uYXRpdmVTZWxlY3Rpb24pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29sbGFwc2VkID0gc2VsZWN0aW9uSXNDb2xsYXBzZWQodGhpcyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYW5nZSB3YXMgbm90IGFkZGVkIHN1Y2Nlc3NmdWxseS4gVGhlIHNpbXBsZXN0IHRoaW5nIGlzIHRvIHJlZnJlc2gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBzZWxQcm90by5hZGRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlLCBkaXJlY3Rpb24pIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNEaXJlY3Rpb25CYWNrd2FyZChkaXJlY3Rpb24pICYmIHNlbGVjdGlvbkhhc0V4dGVuZCkgew0KICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZUJhY2t3YXJkKHRoaXMsIHJhbmdlKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShnZXROYXRpdmVSYW5nZShyYW5nZSkpOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQoNCiAgICAgICAgc2VsUHJvdG8uc2V0UmFuZ2VzID0gZnVuY3Rpb24ocmFuZ2VzKSB7DQogICAgICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiByYW5nZXMubGVuZ3RoID4gMQ==KSB7DQogICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbaV0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICB9IGVsc2UgaWYgKGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCAiZW1wdHkiKSAmJiBpc0hvc3RNZXRob2QodGVzdFJhbmdlLCAic2VsZWN0IikgJiYNCiAgICAgICAgICAgICAgIGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgdXNlRG9jdW1lbnRTZWxlY3Rpb24pIHsNCg0KICAgICAgICBzZWxQcm90by5yZW1vdmVBbGxSYW5nZXMgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIC8vIEFkZGVkIHRyeS9jYXRjaCBhcyBmaXggZm9yIGlzc3VlICMyMQ0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpOw0KDQogICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGVtcHR5KCkgbm90IHdvcmtpbmcgKGlzc3VlICMyNCkNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2NTZWxlY3Rpb24udHlwZSAhPSAiTm9uZSIpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gV29yayBhcm91bmQgZmFpbHVyZSB0byBlbXB0eSBhIGNvbnRyb2wgc2VsZWN0aW9uIGJ5IGluc3RlYWQgc2VsZWN0aW5nIGEgVGV4dFJhbmdlIGFuZCB0aGVuDQogICAgICAgICAgICAgICAgICAgIC8vIGNhbGxpbmcgZW1wdHkoKQ0KICAgICAgICAgICAgICAgICAgICB2YXIgZG9jOw0KICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbmNob3JOb2RlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSBnZXREb2N1bWVudCh0aGlzLmFuY2hvck5vZGUpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJhbmdlLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldERvY3VtZW50KCBjb250cm9sUmFuZ2UuaXRlbSgwKSApOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChkb2MpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0UmFuZ2UgPSBnZXRCb2R5KGRvYykuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UmFuZ2Uuc2VsZWN0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaChleCkge30NCiAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHRoaXMpOw0KICAgICAgICB9Ow0KDQogICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgICAgICAgIGlmICh0aGlzLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHsNCiAgICAgICAgICAgICAgICBhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyYXBwZWRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlKHJhbmdlKS5zZWxlY3QoKTsNCiAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZXNbMF0gPSByYW5nZTsNCiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlQ291bnQgPSAxOw0KICAgICAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0aGlzLl9yYW5nZXNbMF0uY29sbGFwc2VkOw0KICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHRoaXMsIHJhbmdlLCBmYWxzZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQoNCiAgICAgICAgc2VsUHJvdG8uc2V0UmFuZ2VzID0gZnVuY3Rpb24ocmFuZ2VzKSB7DQogICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgdmFyIHJhbmdlQ291bnQgPSByYW5nZXMubGVuZ3RoOw0KICAgICAgICAgICAgaWYgKHJhbmdlQ291bnQgPiAxKSB7DQogICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5nZUNvdW50KSB7DQogICAgICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbMF0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIG1vZHVsZS5mYWlsKCJObyBtZWFucyBvZiBzZWxlY3RpbmcgYSBSYW5nZSBvciBUZXh0UmFuZ2Ugd2FzIGZvdW5kIik7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICBzZWxQcm90by5nZXRSYW5nZUF0ID0gZnVuY3Rpb24oaW5kZXgpIHsNCiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIklOREVYX1NJWkVfRVJSIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBDbG9uZSB0aGUgcmFuZ2UgdG8gcHJlc2VydmUgc2VsZWN0aW9uLXJhbmdlIGluZGVwZW5kZW5jZS4gU2VlIGlzc3VlIDgwLg0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbmdlc1tpbmRleF0uY2xvbmVSYW5nZSgpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHZhciByZWZyZXNoU2VsZWN0aW9uOw0KDQogICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7DQogICAgICAgIHJlZnJlc2hTZWxlY3Rpb24gPSBmdW5jdGlvbihzZWwpIHsNCiAgICAgICAgICAgIHZhciByYW5nZTsNCiAgICAgICAgICAgIGlmIChhcGkuaXNTZWxlY3Rpb25WYWxpZChzZWwud2luKSkgew0KICAgICAgICAgICAgICAgIHJhbmdlID0gc2VsLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByYW5nZSA9IGdldEJvZHkoc2VsLndpbi5kb2N1bWVudCkuY3JlYXRlVGV4dFJhbmdlKCk7DQogICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUZXh0UmFuZ2UocmFuZ2UpKSB7DQogICAgICAgICAgICAgICAgdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICB9IGVsc2UgaWYgKGlzSG9zdE1ldGhvZCh0ZXN0U2VsZWN0aW9uLCAiZ2V0UmFuZ2VBdCIpICYmIHR5cGVvZiB0ZXN0U2VsZWN0aW9uLnJhbmdlQ291bnQgPT0gIm51bWJlciIpIHsNCiAgICAgICAgcmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgaWYgKGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgaW1wbGVtZW50c0RvY1NlbGVjdGlvbiAmJiBzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkgew0KICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gc2VsLnJhbmdlQ291bnQgPSBzZWwubmF0aXZlU2VsZWN0aW9uLnJhbmdlQ291bnQ7DQogICAgICAgICAgICAgICAgaWYgKHNlbC5yYW5nZUNvdW50KSB7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIA==aSA9IDAsIGxlbiA9IHNlbC5yYW5nZUNvdW50OyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzW2ldID0gbmV3IGFwaS5XcmFwcGVkUmFuZ2Uoc2VsLm5hdGl2ZVNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZShzZWwsIHNlbC5fcmFuZ2VzW3NlbC5yYW5nZUNvdW50IC0gMV0sIHNlbGVjdGlvbklzQmFja3dhcmQoc2VsLm5hdGl2ZVNlbGVjdGlvbikpOw0KICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZChzZWwpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgJiYgdHlwZW9mIHRlc3RTZWxlY3Rpb24uaXNDb2xsYXBzZWQgPT0gQk9PTEVBTiAmJiB0eXBlb2YgdGVzdFJhbmdlLmNvbGxhcHNlZCA9PSBCT09MRUFOICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkgew0KICAgICAgICByZWZyZXNoU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsKSB7DQogICAgICAgICAgICB2YXIgcmFuZ2UsIG5hdGl2ZVNlbCA9IHNlbC5uYXRpdmVTZWxlY3Rpb247DQogICAgICAgICAgICBpZiAobmF0aXZlU2VsLmFuY2hvck5vZGUpIHsNCiAgICAgICAgICAgICAgICByYW5nZSA9IGdldFNlbGVjdGlvblJhbmdlQXQobmF0aXZlU2VsLCAwKTsNCiAgICAgICAgICAgICAgICBzZWwuX3JhbmdlcyA9IFtyYW5nZV07DQogICAgICAgICAgICAgICAgc2VsLnJhbmdlQ291bnQgPSAxOw0KICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbihzZWwpOw0KICAgICAgICAgICAgICAgIHNlbC5pc0NvbGxhcHNlZCA9IHNlbGVjdGlvbklzQ29sbGFwc2VkKHNlbCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgfSBlbHNlIHsNCiAgICAgICAgbW9kdWxlLmZhaWwoIk5vIG1lYW5zIG9mIG9idGFpbmluZyBhIFJhbmdlIG9yIFRleHRSYW5nZSBmcm9tIHRoZSB1c2VyJ3Mgc2VsZWN0aW9uIHdhcyBmb3VuZCIpOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgc2VsUHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uKGNoZWNrRm9yQ2hhbmdlcykgew0KICAgICAgICB2YXIgb2xkUmFuZ2VzID0gY2hlY2tGb3JDaGFuZ2VzID8gdGhpcy5fcmFuZ2VzLnNsaWNlKDApIDogbnVsbDsNCiAgICAgICAgdmFyIG9sZEFuY2hvck5vZGUgPSB0aGlzLmFuY2hvck5vZGUsIG9sZEFuY2hvck9mZnNldCA9IHRoaXMuYW5jaG9yT2Zmc2V0Ow0KDQogICAgICAgIHJlZnJlc2hTZWxlY3Rpb24odGhpcyk7DQogICAgICAgIGlmIChjaGVja0ZvckNoYW5nZXMpIHsNCiAgICAgICAgICAgIC8vIENoZWNrIHRoZSByYW5nZSBjb3VudCBmaXJzdA0KICAgICAgICAgICAgdmFyIGkgPSBvbGRSYW5nZXMubGVuZ3RoOw0KICAgICAgICAgICAgaWYgKGkgIT0gdGhpcy5fcmFuZ2VzLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBOb3cgY2hlY2sgdGhlIGRpcmVjdGlvbi4gQ2hlY2tpbmcgdGhlIGFuY2hvciBwb3NpdGlvbiBpcyB0aGUgc2FtZSBpcyBlbm91Z2ggc2luY2Ugd2UncmUgY2hlY2tpbmcgYWxsIHRoZQ0KICAgICAgICAgICAgLy8gcmFuZ2VzIGFmdGVyIHRoaXMNCiAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvck5vZGUgIT0gb2xkQW5jaG9yTm9kZSB8fCB0aGlzLmFuY2hvck9mZnNldCAhPSBvbGRBbmNob3JPZmZzZXQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gRmluYWxseSwgY29tcGFyZSBlYWNoIHJhbmdlIGluIHR1cm4NCiAgICAgICAgICAgIHdoaWxlIChpLS0pIHsNCiAgICAgICAgICAgICAgICBpZiAoIXJhbmdlc0VxdWFsKG9sZFJhbmdlc1tpXSwgdGhpcy5fcmFuZ2VzW2ldKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgLy8gUmVtb3ZhbCBvZiBhIHNpbmdsZSByYW5nZQ0KICAgIHZhciByZW1vdmVSYW5nZU1hbnVhbGx5ID0gZnVuY3Rpb24oc2VsLCByYW5nZSkgew0KICAgICAgICB2YXIgcmFuZ2VzID0gc2VsLmdldEFsbFJhbmdlcygpOw0KICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmICghYXBpLnJhbmdlc0VxdWFsKHJhbmdlLCByYW5nZXNbaV0pKSB7DQogICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlc1tpXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFzZWwucmFuZ2VDb3VudCkgew0KICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSkgew0KICAgICAgICBzZWxQcm90by5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICBpZiAodGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7DQogICAgICAgICAgICAgICAgdmFyIHJhbmdlRWxlbWVudCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2UpOw0KDQogICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IENvbnRyb2xSYW5nZSBjb250YWluaW5nIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIHNlbGVjdGVkIENvbnRyb2xSYW5nZSBtaW51cyB0aGUNCiAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGNvbnRhaW5lZCBieSB0aGUgc3VwcGxpZWQgcmFuZ2UNCiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpOw0KICAgICAgICAgICAgICAgIHZhciBuZXdDb250cm9sUmFuZ2UgPSBnZXRCb2R5KGRvYykuY3JlYXRlQ29udHJvbFJhbmdlKCk7DQogICAgICAgICAgICAgICAgdmFyIGVsLCByZW1vdmVkID0gZmFsc2U7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgICAgICAgICAgICAgICBlbCA9IGNvbnRyb2xSYW5nZS5pdGVtKGkpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZWwgIT09IHJhbmdlRWxlbWVudCB8fCByZW1vdmVkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xSYW5nZS5zZWxlY3QoKTsNCg0KICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvbg0KICAgICAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24odGhpcyk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJlbW92ZVJhbmdlTWFudWFsbHkodGhpcywgcmFuZ2UpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIHNlbFByb3RvLnJlbW92ZVJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgIA==ICAgICAgcmVtb3ZlUmFuZ2VNYW51YWxseSh0aGlzLCByYW5nZSk7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgLy8gRGV0ZWN0aW5nIGlmIGEgc2VsZWN0aW9uIGlzIGJhY2t3YXJkDQogICAgdmFyIHNlbGVjdGlvbklzQmFja3dhcmQ7DQogICAgaWYgKCF1c2VEb2N1bWVudFNlbGVjdGlvbiAmJiBzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyAmJiBmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UpIHsNCiAgICAgICAgc2VsZWN0aW9uSXNCYWNrd2FyZCA9IGZ1bmN0aW9uKHNlbCkgew0KICAgICAgICAgICAgdmFyIGJhY2t3YXJkID0gZmFsc2U7DQogICAgICAgICAgICBpZiAoc2VsLmFuY2hvck5vZGUpIHsNCiAgICAgICAgICAgICAgICBiYWNrd2FyZCA9IChkb20uY29tcGFyZVBvaW50cyhzZWwuYW5jaG9yTm9kZSwgc2VsLmFuY2hvck9mZnNldCwgc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KSA9PSAxKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBiYWNrd2FyZDsNCiAgICAgICAgfTsNCg0KICAgICAgICBzZWxQcm90by5pc0JhY2t3YXJkID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uSXNCYWNrd2FyZCh0aGlzKTsNCiAgICAgICAgfTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBzZWxlY3Rpb25Jc0JhY2t3YXJkID0gc2VsUHJvdG8uaXNCYWNrd2FyZCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9Ow0KICAgIH0NCg0KICAgIC8vIENyZWF0ZSBhbiBhbGlhcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEZyb20gMS4zLCBldmVyeXRoaW5nIGlzICJiYWNrd2FyZCIgcmF0aGVyIHRoYW4gImJhY2t3YXJkcyINCiAgICBzZWxQcm90by5pc0JhY2t3YXJkcyA9IHNlbFByb3RvLmlzQmFja3dhcmQ7DQoNCiAgICAvLyBTZWxlY3Rpb24gc3RyaW5naWZpZXINCiAgICAvLyBUaGlzIGlzIGNvbmZvcm1hbnQgdG8gdGhlIG9sZCBIVE1MNSBzZWxlY3Rpb25zIGRyYWZ0IHNwZWMgYnV0IGRpZmZlcnMgZnJvbSBXZWJLaXQgYW5kIE1vemlsbGEncyBpbXBsZW1lbnRhdGlvbi4NCiAgICAvLyBUaGUgY3VycmVudCBzcGVjIGRvZXMgbm90IHlldCBkZWZpbmUgdGhpcyBtZXRob2QuDQogICAgc2VsUHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgdmFyIHJhbmdlVGV4dHMgPSBbXTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICByYW5nZVRleHRzW2ldID0gIiIgKyB0aGlzLl9yYW5nZXNbaV07DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHJhbmdlVGV4dHMuam9pbigiIik7DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVJblNhbWVEb2N1bWVudChzZWwsIG5vZGUpIHsNCiAgICAgICAgaWYgKHNlbC53aW4uZG9jdW1lbnQgIT0gZ2V0RG9jdW1lbnQobm9kZSkpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oIldST05HX0RPQ1VNRU5UX0VSUiIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gTm8gY3VycmVudCBicm93c2VyIGNvbmZvcm1zIGZ1bGx5IHRvIHRoZSBzcGVjIGZvciB0aGlzIG1ldGhvZCwgc28gUmFuZ3kncyBvd24gbWV0aG9kIGlzIGFsd2F5cyB1c2VkDQogICAgc2VsUHJvdG8uY29sbGFwc2UgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50KHRoaXMsIG5vZGUpOw0KICAgICAgICB2YXIgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2Uobm9kZSk7DQogICAgICAgIHJhbmdlLmNvbGxhcHNlVG9Qb2ludChub2RlLCBvZmZzZXQpOw0KICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlKTsNCiAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmNvbGxhcHNlVG9TdGFydCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICBpZiAodGhpcy5yYW5nZUNvdW50KSB7DQogICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLl9yYW5nZXNbMF07DQogICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTlZBTElEX1NUQVRFX0VSUiIpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmNvbGxhcHNlVG9FbmQgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCkgew0KICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudCAtIDFdOw0KICAgICAgICAgICAgdGhpcy5jb2xsYXBzZShyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJJTlZBTElEX1NUQVRFX0VSUiIpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIC8vIFRoZSBzcGVjIGlzIHZlcnkgc3BlY2lmaWMgb24gaG93IHNlbGVjdEFsbENoaWxkcmVuIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBzbyB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzDQogICAgLy8gbmV2ZXIgdXNlZCBieSBSYW5neS4NCiAgICBzZWxQcm90by5zZWxlY3RBbGxDaGlsZHJlbiA9IGZ1bmN0aW9uKG5vZGUpIHsNCiAgICAgICAgYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50KHRoaXMsIG5vZGUpOw0KICAgICAgICB2YXIgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2Uobm9kZSk7DQogICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTsNCiAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZSk7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmRlbGV0ZUZyb21Eb2N1bWVudCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAvLyBTZXBjaWFsIGJlaGF2aW91ciByZXF1aXJlZCBmb3IgQ29udHJvbCBzZWxlY3Rpb25zDQogICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgdGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7DQogICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gdGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTsNCiAgICAgICAgICAgIHZhciBlbGVtZW50Ow0KICAgICAgICAgICAgd2hpbGUgKGNvbnRyb2xSYW5nZS5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICBlbGVtZW50ID0gY29udHJvbFJhbmdlLml0ZW0oMCk7DQogICAgICAgICAgICAgICAgY29udHJvbFJhbmdlLnJlbW92ZShlbGVtZW50KTsNCiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLnJlZnJlc2goKTsNCiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmdldEFsbFJhbmdlcygpOw0KICAgICAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzW2ldLmRlbGV0ZUNvbnRlbnRzKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vIFRoZSBzcGVjIHNheXMgbm90aGluZyBhYm91dCB3aGF0IHRoZSBzZWxlY3Rpb24gc2hvdWxkIGNvbnRhaW4gYWZ0ZXIgY2FsbGluZyBkZWxldGVDb250ZW50cyBvbiBlYWNoDQogICAgICAgICAgICAgICAgLy8gcmFuZ2UuIEZpcmVmb3ggbW92ZXMgdGhlIHNlbGVjdGlvbiB0byB3aGVyZSB0aGUgZmluYWwgc2VsZWN0ZWQgcmFuZ2Ugd2FzLCBzbyB3ZSBlbXVsYXRlIHRoYXQNCiAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1tsZW4gLSAxXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgLy8gVGhlIGZvbGxvd2luZyBhcg==ZSBub24tc3RhbmRhcmQgZXh0ZW5zaW9ucw0KICAgIHNlbFByb3RvLmVhY2hSYW5nZSA9IGZ1bmN0aW9uKGZ1bmMsIHJldHVyblZhbHVlKSB7DQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9yYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsNCiAgICAgICAgICAgIGlmICggZnVuYyggdGhpcy5nZXRSYW5nZUF0KGkpICkgKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmdldEFsbFJhbmdlcyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICB2YXIgcmFuZ2VzID0gW107DQogICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZSk7DQogICAgICAgIH0pOw0KICAgICAgICByZXR1cm4gcmFuZ2VzOw0KICAgIH07DQoNCiAgICBzZWxQcm90by5zZXRTaW5nbGVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlLCBkaXJlY3Rpb24pIHsNCiAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZSwgZGlyZWN0aW9uKTsNCiAgICB9Ow0KDQogICAgc2VsUHJvdG8uY2FsbE1ldGhvZE9uRWFjaFJhbmdlID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgcGFyYW1zKSB7DQogICAgICAgIHZhciByZXN1bHRzID0gW107DQogICAgICAgIHRoaXMuZWFjaFJhbmdlKCBmdW5jdGlvbihyYW5nZSkgew0KICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCByYW5nZVttZXRob2ROYW1lXS5hcHBseShyYW5nZSwgcGFyYW1zKSApOw0KICAgICAgICB9ICk7DQogICAgICAgIHJldHVybiByZXN1bHRzOw0KICAgIH07DQogICAgDQogICAgZnVuY3Rpb24gY3JlYXRlU3RhcnRPckVuZFNldHRlcihpc1N0YXJ0KSB7DQogICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHsNCiAgICAgICAgICAgIHZhciByYW5nZTsNCiAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQpIHsNCiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VBdCgwKTsNCiAgICAgICAgICAgICAgICByYW5nZVsic2V0IiArIChpc1N0YXJ0ID8gIlN0YXJ0IiA6ICJFbmQiKV0obm9kZSwgb2Zmc2V0KTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UodGhpcy53aW4uZG9jdW1lbnQpOw0KICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKG5vZGUsIG9mZnNldCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlLCB0aGlzLmlzQmFja3dhcmQoKSk7DQogICAgICAgIH07DQogICAgfQ0KDQogICAgc2VsUHJvdG8uc2V0U3RhcnQgPSBjcmVhdGVTdGFydE9yRW5kU2V0dGVyKHRydWUpOw0KICAgIHNlbFByb3RvLnNldEVuZCA9IGNyZWF0ZVN0YXJ0T3JFbmRTZXR0ZXIoZmFsc2UpOw0KICAgIA0KICAgIC8vIEFkZCBjaGVla3kgc2VsZWN0KCkgbWV0aG9kIHRvIFJhbmdlIHByb3RvdHlwZQ0KICAgIGFwaS5yYW5nZVByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHsNCiAgICAgICAgZ2V0U2VsZWN0aW9uKCB0aGlzLmdldERvY3VtZW50KCkgKS5zZXRTaW5nbGVSYW5nZSh0aGlzLCBkaXJlY3Rpb24pOw0KICAgIH07DQoNCiAgICBzZWxQcm90by5jaGFuZ2VFYWNoUmFuZ2UgPSBmdW5jdGlvbihmdW5jKSB7DQogICAgICAgIHZhciByYW5nZXMgPSBbXTsNCiAgICAgICAgdmFyIGJhY2t3YXJkID0gdGhpcy5pc0JhY2t3YXJkKCk7DQoNCiAgICAgICAgdGhpcy5lYWNoUmFuZ2UoZnVuY3Rpb24ocmFuZ2UpIHsNCiAgICAgICAgICAgIGZ1bmMocmFuZ2UpOw0KICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpOw0KICAgICAgICB9KTsNCg0KICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICBpZiAoYmFja3dhcmQgJiYgcmFuZ2VzLmxlbmd0aCA9PSAxKSB7DQogICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1swXSwgImJhY2t3YXJkIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aGlzLnNldFJhbmdlcyhyYW5nZXMpOw0KICAgICAgICB9DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmNvbnRhaW5zTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIGFsbG93UGFydGlhbCkgew0KICAgICAgICByZXR1cm4gdGhpcy5lYWNoUmFuZ2UoIGZ1bmN0aW9uKHJhbmdlKSB7DQogICAgICAgICAgICByZXR1cm4gcmFuZ2UuY29udGFpbnNOb2RlKG5vZGUsIGFsbG93UGFydGlhbCk7DQogICAgICAgIH0sIHRydWUgKTsNCiAgICB9Ow0KDQogICAgc2VsUHJvdG8uZ2V0Qm9va21hcmsgPSBmdW5jdGlvbihjb250YWluZXJOb2RlKSB7DQogICAgICAgIHJldHVybiB7DQogICAgICAgICAgICBiYWNrd2FyZDogdGhpcy5pc0JhY2t3YXJkKCksDQogICAgICAgICAgICByYW5nZUJvb2ttYXJrczogdGhpcy5jYWxsTWV0aG9kT25FYWNoUmFuZ2UoImdldEJvb2ttYXJrIiwgW2NvbnRhaW5lck5vZGVdKQ0KICAgICAgICB9Ow0KICAgIH07DQoNCiAgICBzZWxQcm90by5tb3ZlVG9Cb29rbWFyayA9IGZ1bmN0aW9uKGJvb2ttYXJrKSB7DQogICAgICAgIHZhciBzZWxSYW5nZXMgPSBbXTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHJhbmdlQm9va21hcmssIHJhbmdlOyByYW5nZUJvb2ttYXJrID0gYm9va21hcmsucmFuZ2VCb29rbWFya3NbaSsrXTsgKSB7DQogICAgICAgICAgICByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZSh0aGlzLndpbik7DQogICAgICAgICAgICByYW5nZS5tb3ZlVG9Cb29rbWFyayhyYW5nZUJvb2ttYXJrKTsNCiAgICAgICAgICAgIHNlbFJhbmdlcy5wdXNoKHJhbmdlKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoYm9va21hcmsuYmFja3dhcmQpIHsNCiAgICAgICAgICAgIHRoaXMuc2V0U2luZ2xlUmFuZ2Uoc2VsUmFuZ2VzWzBdLCAiYmFja3dhcmQiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2VzKHNlbFJhbmdlcyk7DQogICAgICAgIH0NCiAgICB9Ow0KDQogICAgc2VsUHJvdG8udG9IdG1sID0gZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2RPbkVhY2hSYW5nZSgidG9IdG1sIikuam9pbigiIik7DQogICAgfTsNCg0KICAgIGZ1bmN0aW9uIGluc3BlY3Qoc2VsKSB7DQogICAgICAgIHZhciByYW5nZUluc3BlY3RzID0gW107DQogICAgICAgIHZhciBhbmNob3IgPSBuZXcgRG9tUG9zaXRpb24oc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpOw0KICAgICAgICB2YXIgZm9jdXMgPSBuZXcgRG9tUG9zaXRpb24oc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KTsNCiAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHNlbC5nZXROYW1lID09ICJmdW5jdGlvbiIpID8gc2VsLmdldE5hbWUoKSA6ICJTZWxlY3Rpb24iOw0KDQogICAgICAgIGlmICh0eXBlb2Ygc2VsLnJhbmdlQ291bnQgIT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWwucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7DQogICAgICAgICAgICAgICAgcmFuZ2VJbnNwZWN0c1tpXSA9IERvbVJhbmdlLmluc3BlY3Qoc2VsLmdldFJhbmdlQXQoaSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiAiWyIgKyBuYW1lICsgIihSYW5nZXM6ICIgKyByYW5nZUluc3BlY3RzLmpvaW4oIiwgIikgKw0KICAgICAgICAgICAgICAgICIpKGFuY2hvcjogIiArIGFuY2hvci5pbnNwZWN0KCkgKyAiLCBmb2N1czogIiArIGZvY3VzLmluc3BlY3QoKSArICJdIjsNCiAgICB9DQoNCiAgICBzZWxQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiAiV3JhcHBlZFNlbGVjdGlvbiI7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmluc3BlY3QgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7DQogICAgfTsNCg0KICAgIHNlbFByb3RvLmRldGFjaCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICBmaW5kQ2FjaGVkU2VsZWN0aW9uKHRoaXMud2luLCAiZGVsZXRlIik7DQogICAgICAgIGRlbGV0ZVBybw==cGVydGllcyh0aGlzKTsNCiAgICB9Ow0KDQogICAgV3JhcHBlZFNlbGVjdGlvbi5kZXRhY2hBbGwgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgZmluZENhY2hlZFNlbGVjdGlvbihudWxsLCAiZGVsZXRlQWxsIik7DQogICAgfTsNCg0KICAgIFdyYXBwZWRTZWxlY3Rpb24uaW5zcGVjdCA9IGluc3BlY3Q7DQogICAgV3JhcHBlZFNlbGVjdGlvbi5pc0RpcmVjdGlvbkJhY2t3YXJkID0gaXNEaXJlY3Rpb25CYWNrd2FyZDsNCg0KICAgIGFwaS5TZWxlY3Rpb24gPSBXcmFwcGVkU2VsZWN0aW9uOw0KDQogICAgYXBpLnNlbGVjdGlvblByb3RvdHlwZSA9IHNlbFByb3RvOw0KDQogICAgYXBpLmFkZENyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcihmdW5jdGlvbih3aW4pIHsNCiAgICAgICAgaWYgKHR5cGVvZiB3aW4uZ2V0U2VsZWN0aW9uID09ICJ1bmRlZmluZWQiKSB7DQogICAgICAgICAgICB3aW4uZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGdldFNlbGVjdGlvbih3aW4pOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KICAgICAgICB3aW4gPSBudWxsOw0KICAgIH0pOw0KfSk7DQo=</content>
    <filesize>143947</filesize>
  </attachment>
  <object>
    <name>Bookmarklet.BookmarkletSkin</name>
    <number>0</number>
    <className>XWiki.XWikiSkins</className>
    <guid>192ea34e-7e94-453e-84b5-11f9ef3ebeb5</guid>
    <class>
      <name>XWiki.XWikiSkins</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <baseskin>
        <customDisplay/>
        <disabled>0</disabled>
        <name>baseskin</name>
        <number>2</number>
        <picker>0</picker>
        <prettyName>Base Skin</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </baseskin>
      <bookmarklet.css>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>bookmarklet.css</name>
        <number>23</number>
        <picker>0</picker>
        <prettyName>bookmarklet.css</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </bookmarklet.css>
      <bookmarklet.js>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>bookmarklet.js</name>
        <number>21</number>
        <picker>0</picker>
        <prettyName>bookmarklet.js</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </bookmarklet.js>
      <bookmarklet.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>bookmarklet.vm</name>
        <number>10</number>
        <picker>0</picker>
        <prettyName>bookmarklet.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </bookmarklet.vm>
      <bookmarkletinline.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>bookmarkletinline.vm</name>
        <number>22</number>
        <picker>0</picker>
        <prettyName>bookmarkletinline.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </bookmarkletinline.vm>
      <docextra.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>docextra.vm</name>
        <number>20</number>
        <picker>0</picker>
        <prettyName>docextra.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </docextra.vm>
      <edit.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>edit.vm</name>
        <number>9</number>
        <picker>0</picker>
        <prettyName>Edit</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </edit.vm>
      <embed.css>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>embed.css</name>
        <number>15</number>
        <picker>0</picker>
        <prettyName>embed.css</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </embed.css>
      <embed.js>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>embed.js</name>
        <number>14</number>
        <picker>0</picker>
        <prettyName>embed.js</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </embed.js>
      <embed.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>embed.vm</name>
        <number>13</number>
        <picker>0</picker>
        <prettyName>embed.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </embed.vm>
      <footer.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>footer.vm</name>
        <number>6</number>
        <picker>0</picker>
        <prettyName>Footer</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </footer.vm>
      <global.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>global.vm</name>
        <number>16</number>
        <picker>0</picker>
        <prettyName>global.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </global.vm>
      <header.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>header.vm</name>
        <number>5</number>
        <picker>0</picker>
        <prettyName>Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </header.vm>
      <hierarchy.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>hierarchy.vm</name>
        <number>17</number>
        <picker>0</picker>
        <prettyName>hierarchy.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </hierarchy.vm>
      <javascript.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>javascript.vm</name>
        <number>19</number>
        <picker>0</picker>
        <prettyName>javascript.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </javascript.vm>
      <layoutvars.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>layoutvars.vm</name>
        <number>12</number>
        <picker>0</picker>
        <prettyName>layoutvars.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </layoutvars.vm>
      <logo>
        <customDisplay/>
        <disabled>0</disabled>
        <name>logo</name>
        <number>3</number>
        <picker>0</picker>
        <prettyName>Logo</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </logo>
      <name>
        <customDisplay/>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <style.css>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>style.css</name>
        <number>4</number>
        <picker>0</picker>
        <prettyName>Style</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </style.css>
      <stylesheets.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>stylesheets.vm</name>
        <number>18</number>
        <picker>0</picker>
        <prettyName>stylesheets.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </stylesheets.vm>
      <view.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>view.vm</name>
        <number>8</number>
        <picker>0</picker>
        <prettyName>View</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </view.vm>
      <viewheader.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>viewheader.vm</name>
        <number>7</number>
        <picker>0</picker>
        <prettyName>View Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </viewheader.vm>
      <xwikivars.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <name>xwikivars.vm</name>
        <number>11</number>
        <picker>0</picker>
        <prettyName>xwikivars.vm</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </xwikivars.vm>
    </class>
    <property>
      <baseskin>colibri</baseskin>
    </property>
    <property>
      <bookmarklet.css>#xdialog {&#xd;
  position: absolute; top: 0; left: 0; width: 100%; height: 10000%; z-index: 100000002;&#xd;
}&#xd;
&#xd;
#xdialog-inner {&#xd;
  position: relative;&#xd;
  width: 1024px;&#xd;
  top: 20px; left: 50%; margin-left: -512px; &#xd;
  //border: 20px solid gray;&#xd;
  //border: 20px solid rgba(0,0,0,0.35);&#xd;
  //border-radius: 5px;&#xd;
  //box-shadow: 0 0 50px rgba(0,0,0,0.5);&#xd;
  background: none;&#xd;
  height: 90%;&#xd;
}&#xd;
&#xd;
#xoverlay {&#xd;
  position: absolute;&#xd;
  top: 0;&#xd;
  left: 0;&#xd;
  width: 100%;&#xd;
  height: 100%;&#xd;
  background-color: black;&#xd;
  opacity: 0.30;&#xd;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=30)";&#xd;
  filter: alpha(opacity=30);&#xd;
  -khtml-opacity: 0.30;&#xd;
  -moz-opacity: 0.30;&#xd;
}&#xd;
&#xd;
#xdialog iframe {&#xd;
  display: block;&#xd;
  border: 0 none;&#xd;
  width: 100%;&#xd;
  z-index: 100000003;&#xd;
}&#xd;
&#xd;
#xdialog form {&#xd;
  display: none;&#xd;
}&#xd;
&#xd;
#xclose {&#xd;
  color: #333333;&#xd;
  font-size: 32px;&#xd;
  height: 32px;&#xd;
  right: 0;&#xd;
  position: absolute;&#xd;
  top: 0;&#xd;
  width: 32px;&#xd;
  z-index: 100000003;&#xd;
  cursor: pointer;&#xd;
}</bookmarklet.css>
    </property>
    <property>
      <bookmarklet.js>Bookmarklet = {};&#xd;
Bookmarklet.open = function(url) {&#xd;
  this.url = url;&#xd;
  var rangyHTML = '';    &#xd;
  try {&#xd;
    var rangySelection = rangy.getSelection();&#xd;
    rangySelection.refresh(true);&#xd;
    rangyHTML = rangySelection.toHtml();&#xd;
  } catch(e) {}  &#xd;
  JQuery(document.body).append("&lt;div id='divjrangy' style='display:none;'>&lt;/div>");&#xd;
  if (rangyHTML != '') {&#xd;
    rangyHTML = rangyHTML.replace(new RegExp('&lt;script[^>]*>([\\S\\s]*?)&lt;\/script\\s*>', 'img'), '');&#xd;
    rangyHTML = rangyHTML.replace(new RegExp('&lt;iframe[^>]*>([\\S\\s]*?)&lt;\/iframe\\s*>', 'img'), '');&#xd;
    rangyHTML = rangyHTML.replace(new RegExp('&lt;form[^>]*>([\\S\\s]*?)&lt;\/form\\s*>', 'img'), '');&#xd;
    rangyHTML = rangyHTML.replace(new RegExp('&lt;noscript[^>]*>([\\S\\s]*?)&lt;\/noscript\\s*>', 'img'), '');&#xd;
    rangyHTML = rangyHTML.replace(/&lt;!--[\s\S]*?-->/g, '');&#xd;
    rangyHTML = rangyHTML.replace(/\n|\r/g, '')&#xd;
    JQuery("#divjrangy").html(rangyHTML);&#xd;
    try {&#xd;
    JQuery("#divjrangy").find("[onmouseover]").each(function(){&#xd;
      JQuery(this).removeAttr('onmouseover');&#xd;
    });&#xd;
    } catch(e) {}&#xd;
    try {&#xd;
    JQuery("#divjrangy").find("[onmouseout]").each(function(){&#xd;
      JQuery(this).removeAttr('onmouseout');&#xd;
    });&#xd;
    } catch(e) {}&#xd;
    try {&#xd;
    JQuery("#divjrangy").find("[onclick]").each(function(){&#xd;
      JQuery(this).removeAttr('onclick');&#xd;
    });&#xd;
    } catch(e) {}&#xd;
    // expand relative links to extenal links&#xd;
    try {&#xd;
    JQuery("#divjrangy").find("a[href]").each(function(){&#xd;
      var jthis = JQuery(this);&#xd;
      var href = jthis.attr('href');&#xd;
      if(href.toLowerCase().indexOf(location.protocol) &lt; 0) {&#xd;
        jthis.attr('href', location.protocol + '//' + location.hostname+(location.port ? ':'+location.port: '') + '/' + href);&#xd;
      }&#xd;
    });&#xd;
    } catch(e) {}&#xd;
    // expand img src to external urls&#xd;
    try {&#xd;
    JQuery("#divjrangy").find("img[src]").each(function(){&#xd;
      var jthis = JQuery(this);&#xd;
      var src = jthis.attr('src');&#xd;
      if(src.toLowerCase().indexOf(location.protocol) &lt; 0) {&#xd;
        jthis.attr('src', location.protocol + '//' + location.hostname+(location.port ? ':'+location.port: '') + '/' + src);&#xd;
      }&#xd;
    });&#xd;
    } catch(e) {}&#xd;
  }&#xd;
  JQuery(document.body).append("\&#xd;
    &lt;div id='xdialog'>\&#xd;
      &lt;div id='xoverlay' style='opacity: 0.5; background-color: black;'>&lt;/div>\&#xd;
      &lt;div id='xdialog-inner' class='ui-widget-content'>\&#xd;
        &lt;form id='xform' name='xform' action='"+ this.url +"' method='post' target='xframe'>\&#xd;
          &lt;input type='hidden' id='xsource' name='xsource' value='' />\&#xd;
          &lt;input type='hidden' id='xtitle' name='xtitle' value='' />\&#xd;
          &lt;input type='hidden' id='xselection' name='xselection' />\&#xd;
        &lt;/form>\&#xd;
        &lt;iframe id='xframe' name='xframe' src='"+ this.url +"'>&lt;/iframe>\&#xd;
      &lt;/div>\&#xd;
    &lt;/div>")&#xd;
  JQuery('#xsource').val(window.location.href);&#xd;
  JQuery('#xtitle').val(document.title);&#xd;
  JQuery('#xselection').val(JQuery("#divjrangy").html());&#xd;
  JQuery('#divjrangy').remove();&#xd;
  JQuery('#xform').submit();&#xd;
  JQuery('#xoverlay').click(function(event){&#xd;
    Bookmarklet.close();&#xd;
  });&#xd;
}&#xd;
Bookmarklet.login = function(url) {&#xd;
  JQuery(document.body).append("\&#xd;
    &lt;div id='xdialog'>\&#xd;
      &lt;div id='xoverlay' style='opacity: 0.5; background-color: black;'>&lt;/div>\&#xd;
      &lt;div id='xdialog-inner' class='ui-widget-content'>\&#xd;
        &lt;form id='xform' name='xform' action='"+ url +"' method='post' target='xframe'>\&#xd;
          &lt;input type='hidden' id='xsource' name='xsource' value='' />\&#xd;
        &lt;/form>\&#xd;
        &lt;iframe id='xframe' name='xframe' src='"+ url +"'>&lt;/iframe>\&#xd;
      &lt;/div>\&#xd;
    &lt;/div>")&#xd;
  JQuery('#xsource').val(window.location.href);&#xd;
  JQuery('#xform').submit();&#xd;
  JQuery('#xoverlay').click(function(event){&#xd;
    Bookmarklet.close();&#xd;
  });&#xd;
}&#xd;
Bookmarklet.updateHeight = function(height) {&#xd;
  window.scrollTo(0,0);&#xd;
  JQuery('#xframe').height(height + 'px');&#xd;
}&#xd;
Bookmarklet.close = function () {&#xd;
  JQuery('#xdialog').remove();&#xd;
}</bookmarklet.js>
    </property>
    <property>
      <bookmarklet.vm>#set ($discard = $response.setContentType("text/javascript"))&#xd;
#set ($isGuest = $xcontext.getUser().equals('XWiki.XWikiGuest'))&#xd;
#set ($serverURL = "http://xwiki.fluenttype.com")&#xd;
#if ("$!request.serverPort" != "80")&#xd;
  #set ($serverURL = "${serverURL}:${request.serverPort}")&#xd;
#end&#xd;
#set ($externalURL = "${serverURL}${doc.getURL('view', 'xpage=embed')}")&#xd;
var getIEVersion = function() {&#xd;
  var ua = window.navigator.userAgent;&#xd;
  var ie = ua.indexOf("MSIE ");&#xd;
  return ((ie > 0) ? parseInt(ua.substring(ie+5, ua.indexOf(".", ie))) : 0);&#xd;
}&#xd;
var XWiki = {};&#xd;
XWiki.jsx = {};&#xd;
XWiki.jsx._defs = [];&#xd;
XWiki.jsx.use = function(v, url, callback) {&#xd;
  if (v &amp;&amp; url) {&#xd;
    if (!XWiki.jsx._defs[v]) {&#xd;
      XWiki.jsx._defs[v] = url;&#xd;
      if (!window[v]) {&#xd;
        (function(u,f){var d=document,l='onload',r='onreadystatechange',s=d.createElement('script');&#xd;
s[l]=function(){s[l]&amp;&amp;(s[l]=s[r]=null)||f()};s[r]=function(){/le|de/.test(s.readyState)&amp;&amp;s[l]()};&#xd;
s.async=true;s.src=u;(d.head||d.getElementsByTagName('head')[0]).appendChild(s)})(url, callback);&#xd;
      } else {&#xd;
        callback();&#xd;
      }&#xd;
    }        &#xd;
  }&#xd;
};&#xd;
XWiki.ssx = {};&#xd;
XWiki.ssx._defs = [];&#xd;
XWiki.ssx.use = function(v, url) {&#xd;
  if (v &amp;&amp; url) {&#xd;
    if (!XWiki.ssx._defs[v]) {&#xd;
      XWiki.ssx._defs[v] = url;&#xd;
      (function(u){var d=document,s=d.createElement('link');&#xd;
s.type="text/css";s.rel="stylesheet";s.href=u;(d.head||d.getElementsByTagName('head')[0]).appendChild(s)})(url);&#xd;
    }    &#xd;
  }&#xd;
};&#xd;
function onMessage(messageEvent) {&#xd;
  if (messageEvent.data['action']) {&#xd;
    if (messageEvent.data['action'] == 'close')&#xd;
      Bookmarklet.close();&#xd;
    if(messageEvent.data['action'] == 'open') {&#xd;
      Bookmarklet.close();&#xd;
      Bookmarklet.open("$externalURL");&#xd;
    }&#xd;
  }&#xd;
  if (messageEvent.data['height'])&#xd;
    Bookmarklet.updateHeight(messageEvent.data['height']);&#xd;
}&#xd;
XWiki.jsx.use('JQuery', "${serverURL}${xwiki.getSkinFile('jquery-1.9.1.min.js')}", function() {&#xd;
JQuery = jQuery.noConflict();&#xd;
var rangyurl = "${serverURL}${xwiki.getSkinFile('rangy-core.js')}";&#xd;
var rangyversion = 1.2;&#xd;
if (getIEVersion() >= 9) {&#xd;
  rangyversion = '1.3';&#xd;
}&#xd;
rangyurl = rangyurl.replace('rangy%2Dcore.js', 'rangy-core-' + rangyversion + '.js');&#xd;
XWiki.jsx.use('Rangy', rangyurl, function() {&#xd;
XWiki.jsx.use('Bookmarklet', "${serverURL}${xwiki.getSkinFile('bookmarklet.js')}", function() {&#xd;
  XWiki.ssx.use('Bookmarklet', "${serverURL}${xwiki.getSkinFile('bookmarklet.css')}");&#xd;
  // save original selection&#xd;
        var ranges = [];&#xd;
        try {&#xd;
          var selection = window.getSelection();&#xd;
          for (var i=0; i&lt;selection.rangeCount; i++) {&#xd;
            ranges.push(selection.getRangeAt(i));&#xd;
          }&#xd;
        } catch(e) {}&#xd;
  rangy.init();  &#xd;
  // restore original selection&#xd;
        if (ranges.length > 0) {&#xd;
          try {&#xd;
            var selection = window.getSelection();&#xd;
            for (i=0; i&lt; ranges.length; i++) {&#xd;
              selection.addRange(ranges[i]);&#xd;
            }&#xd;
          } catch(e) {}&#xd;
        }&#xd;
  window.scrollTo(0,0);&#xd;
  Bookmarklet.url = "$externalURL";&#xd;
  Bookmarklet.loginurl = "http://xwiki.fluenttype.com/xwiki/bin/login/XWiki/XWikiLogin?xpage=embed";&#xd;
  #if($isGuest)&#xd;
    #set($xredirect = $escapetool.url('http://xwiki.fluenttype.com/xwiki/bin/view/Bookmarklet/LoggedIn?xpage=embed&amp;xsource='))&#xd;
    Bookmarklet.login("http://xwiki.fluenttype.com/xwiki/bin/login/XWiki/XWikiLogin?xpage=embed&amp;xredirect=$!xredirect" + window.location.href);&#xd;
  #else&#xd;
    Bookmarklet.open("$externalURL");&#xd;
  #end&#xd;
  XWiki.jsx.use('Porthole', "${serverURL}${xwiki.getSkinFile('porthole.js')}", function() {&#xd;
    // Create a proxy window to send to and receive message from the guest iframe&#xd;
    window.windowProxy = new Porthole.WindowProxy("$externalURL", 'xframe');&#xd;
    window.windowProxy.addEventListener(onMessage);&#xd;
  });&#xd;
});&#xd;
});&#xd;
});</bookmarklet.vm>
    </property>
    <property>
      <bookmarkletinline.vm>#set ($bookmarkletClass = $xwiki.getClass('Bookmarklet.BookmarkletClass'))&#xd;
&lt;form id='bookmarkletForm' action="" class='hidden' method='post'>&#xd;
&lt;input type='hidden' name='xpage' value='embed' />&#xd;
&lt;input type='hidden' name='xsource' value="$escapetool.url($!request.xsource)" />&#xd;
#foreach ($propName in $bookmarkletClass.getEnabledPropertyNames())&#xd;
  #set ($propId = $doc.getValue($propName))&#xd;
  #if ("$!propId" != "")&#xd;
    #set ($propValue = $request.get($propId))&#xd;
    #if ("$!propValue" != "")&#xd;
      &lt;input type='hidden' name="$propId" id="$propId" value="$escapetool.xml($propValue)" />&#xd;
    #end&#xd;
  #end&#xd;
#end&#xd;
&lt;/form></bookmarkletinline.vm>
    </property>
    <property>
      <docextra.vm>##&#xd;
## Document footer: tags, creation date, modification date&#xd;
##&#xd;
##&#xd;
&lt;div id="xdocFooter">&#xd;
  #template("documentTags.vm")&#xd;
  &lt;div id="xdocAuthors">&#xd;
    &lt;div class="xdocCreation"> ## Creation&#xd;
      $msg.get('core.footer.creation', [$xwiki.getUserName($doc.creator), $xwiki.formatDate($doc.creationDate)])&lt;br/>&#xd;
      #if($tdoc.realLanguage != $doc.realLanguage)&#xd;
        $msg.get('core.footer.translationCreation', [$tdoc.realLanguage, $xwiki.getUserName($tdoc.creator), $xwiki.formatDate($tdoc.creationDate)])&lt;br/>&#xd;
      #end&#xd;
    &lt;/div>&#xd;
##    &lt;div class="xdocLastModification"> ## Last modification&#xd;
##      $msg.get('core.footer.modification', [$xwiki.getUserName($tdoc.author), $xwiki.formatDate($tdoc.date)])&#xd;
##    &lt;/div>&#xd;
  &lt;/div>&#xd;
&lt;/div>&#xd;
##&#xd;
##&#xd;
## More document related data: comments, attachments ...&#xd;
##&#xd;
#if (!$isInEmbedMode)&#xd;
&lt;div id="xwikidata" class="layoutsubsection">&#xd;
##&#xd;
## Build the list of documents extras to display, if it does not exist (default).&#xd;
## List format : ['ExtraAnchor', 'ExtraName', 'ExtraTabText', ExtraNumberOfItems, 'extratemplate.vm', 'keyboardShortcut']&#xd;
##&#xd;
#if (!$docextras)&#xd;
  #set ($docextras = [])&#xd;
  #if ($showcomments)&#xd;
    $xwiki.jsfx.use('uicomponents/viewers/comments.js', {'forceSkinAction': true, 'language': ${xcontext.language}})&#xd;
    $xwiki.ssfx.use('uicomponents/viewers/comments.css', true)&#xd;
    #set ($discard = $docextras.add(['Comments', 'comments', $msg.get('docextra.comments'), $doc.getObjects('XWiki.XWikiComments').size(), 'commentsinline.vm', $msg.get('core.shortcuts.view.comments')]))&#xd;
  #end&#xd;
  #if ($showannotations)&#xd;
    #if (!$annotationCount)&#xd;
      ## Annotation count is supposed to be defined in xwikivars.vm. If for a reason or another it is not&#xd;
      ## defined at this point, we tap into the standard annotation class, and do not load again the&#xd;
      ## config document. This however should not happen.&#xd;
      #set ($annotationCount = $doc.getObjects('AnnotationCode.AnnotationClass').size())&#xd;
    #end&#xd;
    #set ($discard = $docextras.add(['Annotations', 'annotations', $msg.get('docextra.annotations'), $annotationCount, 'annotationsinline.vm', $msg.get('core.shortcuts.view.annotations')]))&#xd;
  #end&#xd;
  #if ($showattachments)&#xd;
    $xwiki.jsfx.use('uicomponents/widgets/upload.js', {'forceSkinAction': true, 'language': ${xcontext.language}})&#xd;
    $xwiki.ssfx.use('uicomponents/widgets/upload.css', true)&#xd;
    $xwiki.jsfx.use('js/xwiki/viewers/attachments.js', {'forceSkinAction': true, 'language': ${xcontext.language}})&#xd;
    $xwiki.ssfx.use('js/xwiki/viewers/attachments.css', true)&#xd;
    ### Support attachment sorting&#xd;
    #set ($sortAttachmentsBy = "$!{request.sortAttachmentsBy}")&#xd;
    #if ($sortAttachmentsBy != '')&#xd;
      ## Prepend request parameter&#xd;
      #set ($sortAttachmentsBy = "&amp;sortAttachmentsBy=$escapetool.url(${sortAttachmentsBy})")&#xd;
    #end&#xd;
    #set ($discard = $docextras.add(['Attachments', 'attachments', $msg.get('docextra.attachments'), $doc.getAttachmentList().size(), "attachmentsinline.vm$!{sortAttachmentsBy}", $msg.get('core.shortcuts.view.attachments')]))&#xd;
  #end&#xd;
  #if ($showhistory)&#xd;
    ## Pagination style&#xd;
    $xwiki.ssfx.use('uicomponents/pagination/pagination.css', true)##&#xd;
    #set ($discard = $docextras.add(['History', 'history', $msg.get('docextra.history'), -1, 'historyinline.vm', $msg.get('core.shortcuts.view.history')]))&#xd;
  #end&#xd;
  #if ($showinformation)&#xd;
    #set ($discard = $docextras.add(['Information', 'information', $msg.get('docextra.information'), -1, 'informationinline.vm', $msg.get('core.shortcuts.view.information')]))&#xd;
  #end&#xd;
#end&#xd;
##&#xd;
## Put anchors before the footer, otherwise the top of each section would be hidden by the floating topmenu&#xd;
##&#xd;
#if ($docextras.size() > 0)&#xd;
&lt;div id="docextraanchors" class="invisible">&#xd;
#foreach ($docextra in $docextras)&lt;span id="${docextra.get(0)}anchor">&amp;nbsp;&lt;/span>#end&#xd;
&lt;/div>&#xd;
#end&#xd;
##&#xd;
## Display tabs&#xd;
##&#xd;
#if($docextras.size() > 0)&#xd;
  &lt;div id="xwikidatacontents">&#xd;
    &lt;div class="floatcontainer" id="docExtraTabs">&#xd;
      &lt;ul class="xwikitabbar" id="docExtrasTabsUl">&#xd;
        #foreach($docextra in $docextras)&#xd;
          &lt;li id="${docextra.get(0)}tab">&#xd;
            &lt;a id="${docextra.get(0)}link" href="$doc.getURL('view', "viewer=${docextra.get(1)}")">&#xd;
              $docextra.get(2) #if($docextra.get(3) >= 0) &lt;span class="itemCount">$msg.get('docextra.extranb', [$docextra.get(3)])&lt;/span> #end&#xd;
            &lt;/a>&#xd;
          &lt;/li>&#xd;
        #end&#xd;
      &lt;/ul>&#xd;
    &lt;/div>&#xd;
    ##&#xd;
    ## Display panes (AJAX placeholders)&#xd;
    ##&#xd;
    &lt;div id="docextrapanes">&#xd;
      #foreach($docextra in $docextras)&#xd;
        &lt;div id="${docextra.get(0)}pane" class="hidden empty">&lt;/div>&#xd;
      #end&#xd;
    &lt;/div>&#xd;
    ##&#xd;
    ## JavaScript code generation&#xd;
    ##&#xd;
    &lt;script type="text/javascript">&#xd;
      var hashviewer = self.document.location.hash.substring(1);&#xd;
      #foreach($docextra in $docextras)&#xd;
        #set ($extraAnchor = $listtool.get($docextra, 0))&#xd;
        #set ($extraName = $listtool.get($docextra, 1))&#xd;
        #set ($extraTemplate = $listtool.get($docextra, 4))&#xd;
        #set ($extraShortcut = $listtool.get($docextra, 5))&#xd;
        ##&#xd;
        ## Set the extra to load&#xd;
        ##&#xd;
        #if ($velocityCount == 1)&#xd;
          var extraInit = function(){ XWiki.displayDocExtra("${extraAnchor}", "${extraTemplate}", false) };&#xd;
        #end&#xd;
        if (hashviewer == "${extraAnchor}") {&#xd;
          var extraInit = function(){ XWiki.displayDocExtra("${extraAnchor}", "${extraTemplate}", true) };&#xd;
        }&#xd;
        ##&#xd;
        ## Replace tab link&#xd;
        ##&#xd;
        if ($("${extraAnchor}link") != null) {&#xd;
          $("${extraAnchor}link").href="#${extraAnchor}";&#xd;
          Event.observe($("${extraAnchor}link"), "click", function(){ XWiki.displayDocExtra("${extraAnchor}", "${extraTemplate}", false); }, false);&#xd;
        }&#xd;
        ##&#xd;
        ## Replace top menu link (if any)&#xd;
        ##&#xd;
        if ($("tmShow${extraAnchor}") != null) {&#xd;
          $("tmShow${extraAnchor}").href="#${extraAnchor}";&#xd;
          Event.observe($("tmShow${extraAnchor}"), "click", function(){ XWiki.displayDocExtra("${extraAnchor}", "${extraTemplate}", true); }, false);&#xd;
        }&#xd;
        ##&#xd;
        ## Replace shortcut link (if any)&#xd;
        ##&#xd;
        if ($("${extraName}shortcut") != null) {&#xd;
          $("${extraName}shortcut").down('a').href="#${extraName}";&#xd;
          Event.observe($("${extraName}shortcut"), "click", function(){ XWiki.displayDocExtra("${extraAnchor}", "${extraTemplate}", true); }, false);&#xd;
        }&#xd;
        ##&#xd;
        ## Override keyboard shortcut (if any)&#xd;
        ##&#xd;
        #if ($keyboardShortcutsEnabled &amp;&amp; "$!extraShortcut" != "")&#xd;
          shortcut.remove("$extraShortcut");&#xd;
          shortcut.add("$extraShortcut", function() { XWiki.displayDocExtra("${extraAnchor}", "${extraTemplate}", true); }, { 'type':'keypress', 'propagate':false, 'disable_in_input':true });&#xd;
        #end&#xd;
      #end&#xd;
      document.observe("dom:loaded", extraInit, false);&#xd;
    &lt;/script>&#xd;
  &lt;/div> ## xwikidatacontents&#xd;
#end&#xd;
&lt;/div>  ## xwikidata&#xd;
#end</docextra.vm>
    </property>
    <property>
      <edit.vm>###&#xd;
### Main "edit" template&#xd;
###&#xd;
### General wrapper for edit actions&#xd;
###&#xd;
##&#xd;
## Is the document being edited by another user?&#xd;
## If yes, warn about it and show a forcing link:&#xd;
##&#xd;
#if($tdoc.getLocked() &amp;&amp; "$!request.get('force')" == '')&#xd;
  #template("startpage.vm")&#xd;
  &lt;div class="main layoutsubsection">&#xd;
   &lt;div id="mainContentArea">&#xd;
    ##&#xd;
    $response.setStatus(423)&#xd;
    #set($newquerystring = "$!{request.getQueryString().replaceAll('&amp;', '&amp;amp;').replaceAll('&amp;amp;amp;', '&amp;amp;')}"&#xd;
                         + '&amp;amp;force=1')&#xd;
    #set($forceEditURL = $doc.getURL($xcontext.getAction(), ${newquerystring}))&#xd;
    #xwikimessageboxstart($msg.get('notice') "$msg.get('doclockedby') $xwiki.getUserName($doc.getLockingUser())")&#xd;
    &lt;a href="$forceEditURL">$msg.get('forcelock')&lt;/a>&#xd;
    #xwikimessageboxend()&#xd;
    ##&#xd;
   &lt;/div>## mainContentArea&#xd;
  &lt;/div>## main layoutsubsection&#xd;
  #template("endpage.vm")&#xd;
#else&#xd;
  ##&#xd;
  ## Determine what editor to show&#xd;
  ##&#xd;
  #if("$!editor" == '')&#xd;
    ## Normally no special characters should exist in the editor parameter, so this is just a protection measure.&#xd;
    #set($editor = "$!{escapetool.xml($request.getParameter('editor'))}")&#xd;
    #if($editor == '')&#xd;
      ## Determine the sheets using the default document translation because objects are accessible only from the default translation.&#xd;
      #if(!$services.sheet.getSheets($doc, $context.action).isEmpty())&#xd;
        #set($editor = 'inline')&#xd;
      #elseif (($xwiki.getUserPreference('editor') == 'Wysiwyg') &amp;&amp; ($tdoc.syntax.toIdString() == 'xwiki/1.0' &amp;&amp; !$tdoc.isAdvancedContent() || $services.wysiwyg.isSyntaxSupported($tdoc.syntax.toIdString())))&#xd;
        #set($editor = 'wysiwyg')&#xd;
      #else&#xd;
        #set($editor = 'wiki')&#xd;
      #end&#xd;
    #end&#xd;
  #end&#xd;
  #if($editor == 'inline')&#xd;
    ## The inline editor uses the view layout, unlike the rest of the editors.&#xd;
    #template('startpage.vm')&#xd;
    #template('editinline.vm')&#xd;
    #template('endpage.vm')&#xd;
  #else&#xd;
  ##&#xd;
  ## "Compute" the title&#xd;
  ##&#xd;
  #set($title = $xwiki.parseContent($msg.get('editpageTitle')))&#xd;
  ##&#xd;
  ## Header&#xd;
  ##&#xd;
  #template("xwikivars.vm")&#xd;
  #template("layoutvars.vm")&#xd;
  #template("htmlheader.vm")&#xd;
#if($displayMainMenu)&#xd;
  #template("menuview.vm")&#xd;
#end&#xd;
  #template("header.vm")&#xd;
  #if($editor == 'wiki' || $editor == 'wysiwyg')&#xd;
    &lt;form id="edit" method="post" action="$doc.getURL('preview')" class="withLock">&#xd;
    &lt;div class="hidden">&#xd;
    ## CSRF prevention&#xd;
    &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />&#xd;
    ## Pass the section number when the form is submitted in order to affect only the specified section.&#xd;
    ## We need to test if the section number is present to prevent a NumberFormatException for the empty string.&#xd;
    #if("$!{request.section}" != '')&#xd;
      &lt;input type="hidden" name="section" value="$!{escapetool.xml($request.section)}" />&#xd;
    #end&#xd;
    ## This input is used by the full screen widget: it stores the selector of the maximized element, so that the full screen can be restored when coming back from preview.&#xd;
    &lt;input type="hidden" name="x-maximized" value="$!{escapetool.xml($request.get('x-maximized'))}"/>&#xd;
    &lt;/div>&#xd;
  #end&#xd;
  ##################&#xd;
  ##   Edit zone  ##&#xd;
  ##################&#xd;
  &lt;div id="xwikieditor" class="layoutsection">&#xd;
  &lt;div id="xwikieditorinner">&#xd;
  &lt;div class="leftsidecolumns">&#xd;
  &lt;div id="editcolumn" class="editor editor-${editor}">&#xd;
  &lt;div class="alleditcontent">&#xd;
#if ($displayContentMenu)&#xd;
  &lt;div id="editmenu" class="actionmenu">&#xd;
  #template("editmenu.vm")&#xd;
  &lt;/div>&#xd;
#end&#xd;
  &lt;div id="mainEditArea">&#xd;
  #template("hierarchy.vm")&#xd;
  #if (($editor == 'wiki' || $editor == 'wysiwyg') &amp;&amp; !$request.section)&#xd;
    #template('editmeta.vm')&#xd;
  #end&#xd;
  #template("editmodes.vm")&#xd;
  #template("edit${editor}.vm")&#xd;
  ## This javascript must be placed here since it uses velocity variables set in the template above.&#xd;
  &lt;script type="text/javascript">&#xd;
    //&lt;![CDATA[&#xd;
    if ($('tmEditWysiwyg')) {&#xd;
      // Manage switch from wiki to wysiwyg, content must be preserved between those editors.&#xd;
      Event.observe($('tmEditWysiwyg'), "click", function(event) {&#xd;
        #if($doc.syntax.toIdString() == "xwiki/1.0")&#xd;
        if (checkAdvancedContent('$msg.get("checkadvancedcontent")') == false) {&#xd;
          Event.stop(event);&#xd;
          return;&#xd;
        }&#xd;
        #end&#xd;
        document.forms.${formname}.action='$doc.getURL("edit", "editor=wysiwyg&amp;$languageparams")';&#xd;
        document.forms.${formname}.submit();&#xd;
        Event.stop(event);&#xd;
      });&#xd;
&#xd;
      // Manage switch from wysiwyg to wiki, content must be preserved between those editors.&#xd;
      Event.observe($('tmEditWiki'), "click", function(event) {&#xd;
        document.forms.${formname}.action='$doc.getURL("edit", "editor=wiki&amp;$languageparams")';&#xd;
        document.forms.${formname}.submit();&#xd;
        Event.stop(event);&#xd;
      });&#xd;
    }&#xd;
    //]]&gt;&#xd;
  &lt;/script>&#xd;
  &lt;/div> ## mainEditArea&#xd;
  &lt;/div> ## alleditcontent&#xd;
  &lt;/div> ## editcolumn&#xd;
  &lt;div class="clearfloats">&lt;/div>&#xd;
  &lt;/div> ## leftsidecolumns&#xd;
  #template("editpanels.vm")&#xd;
  &lt;div class="clearfloats">&lt;/div>&#xd;
  &lt;/div> ## xwikieditorinner&#xd;
  &lt;/div> ## xwikieditor&#xd;
  ##&#xd;
  ## Footer&#xd;
  ##&#xd;
  #if($editor == 'wiki' || $editor == 'wysiwyg')&#xd;
    &lt;/form>&#xd;
  #end&#xd;
  #template("footer.vm")&#xd;
  #template("htmlfooter.vm")&#xd;
  #end ## $editor != 'inline'&#xd;
#end</edit.vm>
    </property>
    <property>
      <embed.css>#body #contentcolumn .main {&#xd;
  padding: 0;&#xd;
}&#xd;
&#xd;
#mainContentArea, #mainEditArea {&#xd;
  border: none;&#xd;
}&#xd;
&#xd;
#editPanels {&#xd;
  margin-right: 2em;&#xd;
  position: absolute;&#xd;
  right: 0;&#xd;
  top: 3em;&#xd;
  width: auto;&#xd;
}&#xd;
&#xd;
#editPanels .panel {&#xd;
  float: left;&#xd;
}&#xd;
&#xd;
.editor-wiki .alleditcontent, .editor-wysiwyg .alleditcontent {&#xd;
  margin: 0;&#xd;
}&#xd;
&#xd;
#xwikimaincontainerinner {&#xd;
  height: auto;&#xd;
}&#xd;
&#xd;
#parentinput label {&#xd;
  margin-bottom: 0.5em;&#xd;
}&#xd;
&#xd;
#body #contentcolumn .main {&#xd;
  height: 99%;&#xd;
}&#xd;
&#xd;
#mainContentArea {&#xd;
  display: none;&#xd;
  height: 96%;&#xd;
}</embed.css>
    </property>
    <property>
      <embed.js>XWiki.exists = function(space, page) {&#xd;
  var exists = false;&#xd;
  new Ajax.Request("/xwiki/rest/wikis/xwiki/spaces/" + space + "/pages/" + page, {&#xd;
    method: 'get',&#xd;
    asynchronous: false,&#xd;
    onSuccess: function (response) {&#xd;
      exists = true;&#xd;
    },&#xd;
    onFailure: function(response) {&#xd;
      exists = false;&#xd;
    }&#xd;
  });&#xd;
  return exists;&#xd;
};&#xd;
&#xd;
var updateTopLocation = function() {  &#xd;
  //if (topLocation &amp;&amp; topLocation != "" &amp;&amp; topLocation != "undefined") {&#xd;
  //  var heightHash = $(document.body).getHeight();&#xd;
  //  window.top.location = unescape(topLocation) + '#=' + heightHash;&#xd;
  //}&#xd;
}&#xd;
&#xd;
function onMessage(messageEvent) {&#xd;
  console.log(messageEvent);&#xd;
}&#xd;
&#xd;
var updateRedirect = function(form) {&#xd;
  var xredirect = form.down('[name=xredirect]');&#xd;
  if (xredirect)&#xd;
    xredirect.setValue(docviewurl);&#xd;
  else {&#xd;
    xredirect = new Element('input', {'type':'hidden', 'name':'xredirect', 'value':docviewurl});&#xd;
    form.insert({bottom:xredirect});&#xd;
  }&#xd;
}&#xd;
&#xd;
document.observe("xwiki:dom:loaded", function(event) {&#xd;
  windowProxy = new Porthole.WindowProxy(window.xsource);&#xd;
  windowProxy.addEventListener(onMessage);&#xd;
  if ($('mainContentArea'))&#xd;
    $('mainContentArea').setStyle({display: 'block'});  &#xd;
  var form;&#xd;
  if ($('edit'))&#xd;
    form = $('edit')&#xd;
  else if ($('inline'))&#xd;
    form = $('inline')&#xd;
  else if ($('update'))&#xd;
    form = $('update')&#xd;
  else if ($('propupdate'))&#xd;
    form = $('propupdate')&#xd;
  if (form) {&#xd;
    form.observe('submit', function() {&#xd;
      updateRedirect(form);&#xd;
    });&#xd;
  }&#xd;
  document.observe('xwiki:actions:cancel', function(event) {&#xd;
    windowProxy.post({'action': 'close'});&#xd;
    event.stop();&#xd;
  });&#xd;
  windowProxy.post({'height': $('body').getDimensions().height})&#xd;
  document.observe('xwiki:wysiwyg:loaded', function(event) {&#xd;
    windowProxy.post({'height': $('body').getDimensions().height})&#xd;
  })&#xd;
});</embed.js>
    </property>
    <property>
      <embed.vm>########################################################&#xd;
## Default behavior of xpage=embed&#xd;
########################################################&#xd;
#set($discard = $context.setLinksQueryString("xpage=embed&amp;xsource=$escapetool.url($!request.xsource)"))&#xd;
#if ($context.action != "create")&#xd;
#template("${context.action}.vm")&#xd;
#else&#xd;
#template("view.vm")&#xd;
#end</embed.vm>
    </property>
    <property>
      <footer.vm>#if($isInServletMode &amp;&amp; !$isInEmbedMode)## Visible only in a page&#xd;
&lt;div id="footerglobal" class="layoutsection">&#xd;
&lt;div class="minwidth">&lt;/div>&#xd;
&lt;hr/>&#xd;
  &lt;div id="xwikilicence">$!copyright&lt;/div>&#xd;
  #set ($version = $xwiki.getSpacePreference('version'))&#xd;
  #if ("$!version" == "")&#xd;
    #set ($version = $xwiki.getXWikiPreference("version"))&#xd;
  #end&#xd;
  #if ("$!version" != "")&#xd;
    #set ($version = $xwiki.parseContent($version))&#xd;
  #else&#xd;
    #set ($version = $!xwiki.version)&#xd;
  #end&#xd;
  &lt;div id="xwikiplatformversion">$version&lt;/div>&#xd;
&lt;hr/>&#xd;
&lt;/div>&#xd;
#end&#xd;
### TODO: Format the footer for pdf output</footer.vm>
    </property>
    <property>
      <global.vm>###&#xd;
### Global header&#xd;
###&#xd;
### The uppermost area of each page&#xd;
### Contains the company logo, links to global actions and the search facility&#xd;
###&#xd;
#if(!$isInEmbedMode)&#xd;
#if($isInServletMode) ## Visible only in a page&#xd;
&lt;div id="headerglobal" class="layoutsection">&#xd;
#if($xcontext.action == "view")&#xd;
&lt;div class="minwidthb">&lt;/div>&#xd;
#else&#xd;
&lt;div class="minwidthd">&lt;/div>&#xd;
#end&#xd;
  &lt;div id="company">&#xd;
  &lt;div id="companylogo">&#xd;
    &lt;a href="$!xwiki.getURL($services.model.resolveDocument('', 'default', $doc.documentReference.extractReference('WIKI')))" title="Home" rel="home">&#xd;
#if("$!{themeDocFullName}" == '')&#xd;
  #set($themeDocFullName = "$!xwiki.getUserPreference('colorTheme')")&#xd;
#end&#xd;
#if($themeDocFullName == '')&#xd;
  #set($themeDocFullName = 'ColorThemes.DefaultColorTheme')&#xd;
#end&#xd;
#set($themeDoc = $xwiki.getDocument($themeDocFullName))&#xd;
#set($themeObj = $themeDoc.getObject('ColorThemes.ColorThemeClass'))&#xd;
#set($logoname = $themeObj.getProperty('logoImage').value)&#xd;
#if("$!{logoname}" != '')&#xd;
  #set($logourl = $themeDoc.getAttachmentURL($logoname))&#xd;
#else&#xd;
  #set($logoname = $xwiki.getSkinPreference('logo', 'logo.png'))&#xd;
  #set($logo = $!prefdoc.getAttachment($logoname))&#xd;
  #if(!$logo)&#xd;
    #set($logourl = $xwiki.getSkinFile($logoname))&#xd;
  #else&#xd;
    #set($logourl = $prefdoc.getAttachmentURL($logo.filename))&#xd;
  #end&#xd;
#end&#xd;
    &lt;img src="$!logourl" alt="Wiki Logo"/>&#xd;
    &lt;/a>&#xd;
  &lt;/div> ## companylogo&#xd;
  &lt;/div> ## company&#xd;
  &lt;div id="globallinks">&#xd;
    &lt;form action="#if($xwiki.exists('Main.Search'))$xwiki.getURL('Main.Search')#else$xwiki.getURL('Main.WebSearch')#end">&#xd;
      &lt;div class="globalsearch">&#xd;
        &lt;label class="hidden" for="headerglobalsearchinput">$msg.get('panels.search.inputLabel')&lt;/label>&lt;input class="globalsearchinput withTip" id="headerglobalsearchinput" type="text" name="text" value="$msg.get('panels.search.inputText')" size="15"/>&lt;input class="button" type="image" value="$msg.get('panels.search.submit')" alt="$msg.get('panels.search.submit')" src="$xwiki.getSkinFile('icons/xwiki/search.png')"/>&#xd;
      &lt;/div>&#xd;
    &lt;/form>&#xd;
#if($xwiki.isMultiLingual())&#xd;
  &lt;span class="glink" id="headerlanguages">&#xd;
  #set($defaultLanguage = "$!{doc.getDefaultLanguage()}")&#xd;
  #if($defaultLanguage == '')&#xd;
    #set($defaultLanguage = "$!{doc.getLanguage()}")&#xd;
  #end&#xd;
  #if($defaultLanguage == '')&#xd;
    #set($defaultLanguage = "default")&#xd;
  #end&#xd;
  &lt;a href="$!doc.getURL("view", "language=$defaultLanguage")" class="language-default#if($tdoc.realLanguage == $defaultLanguage || ($defaultLanguage == 'default' &amp;&amp; $tdoc.realLanguage == '')) language-current#end">$defaultLanguage&lt;/a>&#xd;
  #set ($wikiSettingsLanguages = $!xwiki.getXWikiPreference('languages').trim().split('\s*[,| ]\s*'))&#xd;
  #set ($hasLanguagesSet = $wikiSettingsLanguages.size() > 1 || "$!wikiSettingsLanguages.get(0)" != '')&#xd;
  #foreach($lang in $doc.translationList)&#xd;
    #if(!$hasLanguagesSet || $wikiSettingsLanguages.contains($lang))&#xd;
      &lt;a href="$!doc.getURL("view", "language=$lang")" class="language-translation#if($tdoc.realLanguage == $lang) language-current#end">$!lang&lt;/a>&#xd;
    #end&#xd;
  #end&#xd;
  &lt;/span>&#xd;
#end&#xd;
  &lt;/div> ## globallinks&#xd;
  &lt;div class="clearfloats">&lt;/div>&#xd;
&lt;/div> ## headerglobal&#xd;
#end&#xd;
#end&#xd;
### TODO: Format the header for pdf output</global.vm>
    </property>
    <property>
      <header.vm/>
    </property>
    <property>
      <hierarchy.vm>#template('xwikivars.vm')&#xd;
#set($parents = [])&#xd;
#set($discard = $parents.add($doc.fullName))&#xd;
#macro(computeHierarchy $doc $result $level)&#xd;
  #set($parent = $doc.parent)&#xd;
  #if(($parent != '') &amp;&amp; ($level &lt; 6) &amp;&amp; (!$parents.contains($parent)))&#xd;
    #set($discard = $parents.add($parent))&#xd;
    #set($pdoc = $xwiki.getDocument($parent).getTranslatedDocument())&#xd;
    #if ($pdoc)&#xd;
      #set ($pdocurl = $pdoc.getURL('view'))&#xd;
      #set ($nstring = "&lt;a href='$pdocurl'>$escapetool.xml(${pdoc.getPlainTitle()})&lt;/a> &lt;span class='separator'>&amp;#187;&lt;/span> $result")&#xd;
      #set ($level = $level + 1)&#xd;
      #computeHierarchy($pdoc $nstring $level)&#xd;
    #else&#xd;
      ## No access to the parent document&#xd;
      &lt;a href='$xwiki.getURL($parent)'>$escapetool.xml(${parent})&lt;/a> &lt;span class='separator'>&amp;#187;&lt;/span> $result&#xd;
    #end&#xd;
  #else&#xd;
    $result&#xd;
  #end&#xd;
#end&#xd;
#if($isInServletMode &amp;&amp; $displayHierarchy) ## Visible only in a page&#xd;
  &lt;div id="hierarchy">&#xd;
  #if ($doc.fullName != 'Main.WebHome')&#xd;
    #if ($xcontext.action == 'edit' || $xcontext.action == 'inline')&#xd;
      #computeHierarchy($doc "&lt;a href='${doc.getURL('view')}'>$escapetool.xml($tdoc.getPlainTitle())&lt;/a>" 0)&#xd;
    #else&#xd;
      #computeHierarchy($doc "&lt;span class='current'>$escapetool.xml($tdoc.getPlainTitle())&lt;/span>" 0)&#xd;
    #end&#xd;
  #end&#xd;
  &lt;/div>&#xd;
#end</hierarchy.vm>
    </property>
    <property>
      <javascript.vm>#*&#xd;
##&#xd;
## CSS files related to JS libraries.&#xd;
##&#xd;
&lt;link href="$xwiki.getSkinFile("uicomponents/suggest/suggest.css", true)" rel="stylesheet" type="text/css" />&#xd;
&lt;link href="$xwiki.getSkinFile("js/xwiki/lightbox/lightbox.css", true)" rel="stylesheet" type="text/css" />&#xd;
&lt;!--[if IE]&gt;&#xd;
  &lt;link href="$xwiki.getSkinFile("js/xwiki/lightbox/lightboxIE.css", true)" rel="stylesheet" type="text/css" />&#xd;
&lt;![endif]-->&#xd;
##&#xd;
## JS Libraries.&#xd;
##&#xd;
$xwiki.jsfx.use('js/scriptaculous/effects.js', true)&#xd;
$xwiki.jsfx.use('js/xwiki/widgets/modalPopup.js', true)&#xd;
$xwiki.ssfx.use('js/xwiki/widgets/modalPopup.css', {'forceSkinAction' : true, 'colorTheme' : $themeDoc})&#xd;
$xwiki.jsfx.use('js/xwiki/widgets/jumpToPage.js', true)&#xd;
$xwiki.ssfx.use('js/xwiki/widgets/jumpToPage.css', {'forceSkinAction' : true, 'language' : $xcontext.language})&#xd;
$xwiki.jsfx.use('uicomponents/model/entityReference.js')&#xd;
$xwiki.jsfx.use('uicomponents/widgets/confirmationBox.js', true)&#xd;
$xwiki.ssfx.use('uicomponents/widgets/confirmationBox.css', true)&#xd;
$xwiki.jsfx.use('uicomponents/widgets/confirmedAjaxRequest.js', true)&#xd;
$xwiki.jsfx.use('uicomponents/widgets/notification.js', true)&#xd;
$xwiki.ssfx.use('uicomponents/widgets/notification.css', true)&#xd;
$xwiki.jsfx.use('uicomponents/widgets/list/xlist.js')&#xd;
$xwiki.jsfx.use('uicomponents/suggest/suggest.js', {'forceSkinAction' : true, 'language' : $xcontext.language})&#xd;
#if($xwiki.exists('XWiki.SearchSuggestConfig'))&#xd;
  ## Hook to request the search suggest script if search suggest configuration is present.&#xd;
  ## We can't just have it as a always-use SSX yet since we compute a hash to be sure to refresh&#xd;
  ## the file when the configuration changes.&#xd;
  ## Ideally, this code should be located in a interface extension, in the search application.&#xd;
  #set($searchSuggestConfigDocument = $xwiki.getDocument('XWiki.SearchSuggestConfig'))&#xd;
  #set($searchSuggestConfigObject = $searchSuggestConfigDocument.getObject('XWiki.SearchSuggestConfig'))&#xd;
  #if($searchSuggestConfigObject.getProperty('activated').value == 1)&#xd;
   #set($searchSuggestConfigHash = '')&#xd;
   #foreach($source in $searchSuggestConfigDocument.getObjects('XWiki.SearchSuggestSourceClass'))&#xd;
     #if($source.getProperty('activated').value == 1)&#xd;
       #set($sourceId = "${source.get('name')}:${source.get('url')}:${source.get('highlight')}:${source.get('icon')}}")&#xd;
       #set($searchSuggestConfigHash = "${searchSuggestConfigHash}|${sourceId}")&#xd;
     #end&#xd;
   #end&#xd;
   $xwiki.jsfx.use('uicomponents/search/searchSuggest.js', {&#xd;
    'forceSkinAction' : true,  &#xd;
    'h' : $searchSuggestConfigHash.hashCode()  &#xd;
   })&#xd;
   $xwiki.ssfx.use('uicomponents/search/searchSuggest.css', true)&#xd;
  #end&#xd;
#end&#xd;
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/prototype/prototype.js")">&lt;/script>&#xd;
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/xwiki.js", true)">&lt;/script>&#xd;
&lt;script type="text/javascript">&#xd;
// &lt;![CDATA[&#xd;
XWiki.webapppath = "${xwiki.webAppPath}";&#xd;
XWiki.servletpath = "${xwiki.servletPath}";&#xd;
XWiki.contextPath = "${request.contextPath}";&#xd;
XWiki.mainWiki = "$!{escapetool.javascript(${xcontext.mainWikiName})}";&#xd;
XWiki.currentWiki = "$!{escapetool.javascript(${xcontext.database})}";&#xd;
XWiki.currentSpace = "$!{escapetool.javascript($doc.space)}";&#xd;
XWiki.currentPage = "$!{escapetool.javascript($doc.name)}";&#xd;
XWiki.editor = "$!{escapetool.javascript($editor)}";&#xd;
XWiki.viewer = "$!{escapetool.javascript($viewer)}";&#xd;
XWiki.contextaction = "${xcontext.getAction()}";&#xd;
XWiki.docisnew = $!doc.isNew();&#xd;
XWiki.docsyntax = "$!doc.getSyntax().toIdString()";&#xd;
XWiki.docvariant = "$!{escapetool.javascript($docvariant.replace('&amp;amp;', '&amp;'))}";&#xd;
XWiki.blacklistedSpaces = [ #foreach($space in $blacklistedSpaces)#if($velocityCount > 1),#end"$space"#end ];&#xd;
XWiki.hasEdit = $hasEdit;&#xd;
XWiki.hasProgramming = $hasProgramming;&#xd;
XWiki.hasBackupPackImportRights =#if ($xwiki.package) $xwiki.package.hasBackupPackImportRights()#else false#end;&#xd;
window.docviewurl = "${doc.getURL('view')}";&#xd;
window.docediturl = "${doc.getURL('edit')}";&#xd;
window.docsaveurl = "${doc.getURL('save')}";&#xd;
window.docgeturl = "${doc.getURL('get')}";&#xd;
window.xsource = "$escapetool.url($!request.xsource)";&#xd;
// ]]&gt;&#xd;
&lt;/script>&#xd;
#set($editActions = ['edit', 'inline', 'admin'])&#xd;
#if($editActions.contains($xcontext.action))&#xd;
$xwiki.get('jsfx').use('uicomponents/lock/lock.js')&#xd;
$xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js')&#xd;
$xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true)&#xd;
#end&#xd;
##&#xd;
## Hooks for inserting JavaScript skin extensions&#xd;
##&#xd;
## - Skin JAR extension hook. Placed first to allow other skin extensions to override it.&#xd;
&lt;!-- com.xpn.xwiki.plugin.skinx.JsResourceSkinExtensionPlugin -->&#xd;
## - Skin file extension hook.&#xd;
&lt;!-- com.xpn.xwiki.plugin.skinx.JsSkinFileExtensionPlugin -->&#xd;
## - Skin extension hook&#xd;
&lt;!-- com.xpn.xwiki.plugin.skinx.JsSkinExtensionPlugin -->&#xd;
##&#xd;
## Compatibility "aspect" file for deprecated code.&#xd;
## Placed at the very end of the stream so that skin file extensions code can be deprecated easily as well.&#xd;
##&#xd;
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/compatibility.js", false)" defer="defer">&lt;/script>&#xd;
#if ($isInEmbedMode)&#xd;
  &lt;script type="text/javascript" src="$xwiki.getSkinFile("porthole.js", false)">&lt;/script>&#xd;
  &lt;script type="text/javascript" src="$xwiki.getSkinFile("embed.js", true)">&lt;/script>&#xd;
#end&#xd;
## Marker script that signals that all the deferred scripts have indeed been executed, guarding against a premature dom:loaded event&#xd;
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/markerScript.js", false)" defer="defer">&lt;/script>&#xd;
*#&#xd;
##&#xd;
## JS Libraries.&#xd;
##&#xd;
$xwiki.jsfx.use('js/amd/require.js', {'defer': false})&#xd;
$xwiki.jsfx.use('js/prototype/prototype.js', {'defer': false})&#xd;
$xwiki.jsfx.use('js/scriptaculous/effects.js', true)&#xd;
##&#xd;
## In order to make it easy to debug Javascript in browsers, allow the request parameter "minify=false" to be passed to&#xd;
## avoid using the minified versions of JS/CSS.&#xd;
##&#xd;
#if ("$!request.minify" == 'false')&#xd;
  $xwiki.jsfx.use('js/xwiki/xwiki.js', {'forceSkinAction': true, 'defer': false})&#xd;
  $xwiki.jsfx.use('js/xwiki/widgets/modalPopup.js', true)&#xd;
  $xwiki.ssfx.use('js/xwiki/widgets/modalPopup.css', {'forceSkinAction' : true, 'colorTheme' : $themeDoc})&#xd;
  $xwiki.jsfx.use('js/xwiki/widgets/jumpToPage.js', true)&#xd;
  $xwiki.ssfx.use('js/xwiki/widgets/jumpToPage.css', {'forceSkinAction' : true, 'language' : $xcontext.language})&#xd;
  $xwiki.jsfx.use('uicomponents/model/entityReference.js')&#xd;
  $xwiki.jsfx.use('uicomponents/widgets/confirmationBox.js', true)&#xd;
  $xwiki.ssfx.use('uicomponents/widgets/confirmationBox.css', true)&#xd;
  $xwiki.jsfx.use('uicomponents/widgets/confirmedAjaxRequest.js', true)&#xd;
  $xwiki.jsfx.use('uicomponents/widgets/notification.js', true)&#xd;
  $xwiki.ssfx.use('uicomponents/widgets/notification.css', true)&#xd;
  $xwiki.jsfx.use('uicomponents/widgets/list/xlist.js')&#xd;
  $xwiki.jsfx.use('uicomponents/suggest/suggest.js', {'forceSkinAction' : true, 'language' : $xcontext.language})&#xd;
  $xwiki.ssfx.use('uicomponents/suggest/suggest.css', true)&#xd;
#else&#xd;
  $xwiki.jsfx.use('js/xwiki/xwiki-min.js', {'forceSkinAction': true, 'defer': false, 'language': $xcontext.language})  &#xd;
  $xwiki.ssfx.use('css/xwiki-min.css', {'forceSkinAction': true, 'colorTheme': $themeDoc, 'language': $xcontext.language})&#xd;
#end&#xd;
$xwiki.jsfx.use('js/amd/jsx.js', {'forceSkinAction': true, 'defer': false})&#xd;
#*&#xd;
#if($xwiki.exists('XWiki.SearchSuggestConfig'))&#xd;
  ## Hook to request the search suggest script if search suggest configuration is present.&#xd;
  ## We can't just have it as a always-use SSX yet since we compute a hash to be sure to refresh&#xd;
  ## the file when the configuration changes.&#xd;
  ## Ideally, this code should be located in a interface extension, in the search application.&#xd;
  #set($searchSuggestConfigDocument = $xwiki.getDocument('XWiki.SearchSuggestConfig'))&#xd;
  #set($searchSuggestConfigObject = $searchSuggestConfigDocument.getObject('XWiki.SearchSuggestConfig'))&#xd;
  #if($searchSuggestConfigObject.getProperty('activated').value == 1)&#xd;
    #set($searchSuggestConfigHash = '')&#xd;
    #foreach($source in $searchSuggestConfigDocument.getObjects('XWiki.SearchSuggestSourceClass'))&#xd;
      #if($source.getProperty('activated').value == 1)&#xd;
        #set($sourceId = "${source.get('name')}:${source.get('url')}:${source.get('highlight')}:${source.get('icon')}}")&#xd;
        #set($searchSuggestConfigHash = "${searchSuggestConfigHash}|${sourceId}")&#xd;
      #end&#xd;
    #end&#xd;
    $xwiki.jsfx.use('uicomponents/search/searchSuggest.js', {&#xd;
      'forceSkinAction' : true,&#xd;
      'h' : $searchSuggestConfigHash.hashCode()&#xd;
    })&#xd;
    $xwiki.ssfx.use('uicomponents/search/searchSuggest.css', true)&#xd;
  #end&#xd;
#end&#xd;
*#&#xd;
#set($editActions = ['edit', 'inline', 'admin'])&#xd;
#if($editActions.contains($xcontext.action))&#xd;
  $xwiki.jsfx.use('uicomponents/lock/lock.js')&#xd;
  $xwiki.jsfx.use('uicomponents/widgets/validation/livevalidation_prototype.js')&#xd;
  $xwiki.ssfx.use('uicomponents/widgets/validation/livevalidation.css', true)&#xd;
#end&#xd;
&lt;script type="text/javascript">&#xd;
var timer = Date.now();&#xd;
&lt;/script>&#xd;
##&#xd;
## Hooks for inserting JavaScript skin extensions&#xd;
##&#xd;
#javaScriptExtensionHooks&#xd;
##&#xd;
## Compatibility "aspect" file for deprecated code.&#xd;
## Placed at the very end of the stream so that skin file extensions code can be deprecated easily as well.&#xd;
##&#xd;
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/compatibility.js", false)" defer="defer">&lt;/script>&#xd;
#if ($isInEmbedMode)&#xd;
  &lt;script type="text/javascript" src="$xwiki.getSkinFile("porthole.js", false)">&lt;/script>&#xd;
  &lt;script type="text/javascript" src="$xwiki.getSkinFile("embed.js", true)">&lt;/script>&#xd;
#end&#xd;
## Marker script that signals that all the deferred scripts have indeed been executed, guarding against a premature dom:loaded event&#xd;
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/markerScript.js", false)" defer="defer">&lt;/script>&#xd;
&lt;script type="text/javascript">&#xd;
// &lt;![CDATA[&#xd;
require.config({&#xd;
  baseUrl: '/',&#xd;
  ## see: http://requirejs.org/docs/jquery.html#noconflictmap to see why this works.&#xd;
  paths: { 'jquery': "$xwiki.getSkinFile('js/amd/')jquery" },&#xd;
  map: {&#xd;
    '*': { 'jquery': 'jQueryNoConflict' },&#xd;
    'jQueryNoConflict': { 'jquery': 'jquery' }&#xd;
  }&#xd;
});&#xd;
define('jQueryNoConflict', ['jquery'], function($) { $.noConflict(); return $; });&#xd;
XWiki.webapppath = "${xwiki.webAppPath}";&#xd;
XWiki.servletpath = "${xwiki.servletPath}";&#xd;
XWiki.contextPath = "${request.contextPath}";&#xd;
XWiki.mainWiki = "$!{escapetool.javascript(${xcontext.mainWikiName})}";&#xd;
XWiki.currentWiki = "$!{escapetool.javascript(${xcontext.database})}";&#xd;
XWiki.currentSpace = "$!{escapetool.javascript($doc.space)}";&#xd;
XWiki.currentPage = "$!{escapetool.javascript($doc.name)}";&#xd;
XWiki.editor = "$!{escapetool.javascript($editor)}";&#xd;
XWiki.viewer = "$!{escapetool.javascript($viewer)}";&#xd;
XWiki.contextaction = "${xcontext.getAction()}";&#xd;
XWiki.docisnew = $!doc.isNew();&#xd;
XWiki.docsyntax = "$!doc.getSyntax().toIdString()";&#xd;
XWiki.docvariant = "$!{escapetool.javascript($docvariant.replace('&amp;amp;', '&amp;'))}";&#xd;
XWiki.blacklistedSpaces = [ #foreach($space in $blacklistedSpaces)#if($velocityCount > 1),#end"$space"#end ];&#xd;
XWiki.hasEdit = $hasEdit;&#xd;
XWiki.hasProgramming = $hasProgramming;&#xd;
XWiki.hasBackupPackImportRights =#if ($xwiki.package) $xwiki.package.hasBackupPackImportRights()#else false#end;&#xd;
XWiki.hasRenderer = $services.rendering.availableRendererSyntaxes.contains($!doc.getSyntax());&#xd;
window.docviewurl = "${doc.getURL('view')}";&#xd;
window.docediturl = "${doc.getURL('edit')}";&#xd;
window.docsaveurl = "${doc.getURL('save')}";&#xd;
window.docgeturl = "${doc.getURL('get')}";&#xd;
window.xsource = "$escapetool.url($!request.xsource)";&#xd;
// ]]&gt;&#xd;
&lt;/script></javascript.vm>
    </property>
    <property>
      <layoutvars.vm>##&#xd;
## In admin mode, Panels.PanelWizard must display the layout for the requested space&#xd;
##&#xd;
#set($spaceprefs = "")&#xd;
#set($globalprefs = false)&#xd;
&#xd;
#if($doc.name == "WebPreferences" &amp;&amp; "$!{request.space}" != "") ## space administration&#xd;
  #set($spaceprefs = $request.space)&#xd;
  #set($showLeftPanels =  $xwiki.getSpacePreferenceFor("showLeftPanels", $request.space))&#xd;
  #set($showRightPanels = $xwiki.getSpacePreferenceFor("showRightPanels", $request.space))&#xd;
#elseif($doc.fullName == "XWiki.XWikiPreferences" || "$!request.editor" == "globaladmin")&#xd;
  #set($globalprefs = true)&#xd;
  #set($showLeftPanels = $xwiki.getXWikiPreference("showLeftPanels"))&#xd;
  #set($showRightPanels = $xwiki.getXWikiPreference("showRightPanels"))&#xd;
#else&#xd;
  #set($showLeftPanels = $xwiki.getSpacePreference("showLeftPanels"))&#xd;
  #set($showRightPanels = $xwiki.getSpacePreference("showRightPanels"))&#xd;
#end&#xd;
&#xd;
#if(!$showLeftPanels || $showLeftPanels == "" || $showLeftPanels == "default")&#xd;
  #set($showLeftPanels = "1")&#xd;
#end&#xd;
#if($showLeftPanels == "yes")&#xd;
  #set($showLeftPanels = "1")&#xd;
#end&#xd;
#if($showLeftPanels == "no" || !$isInServletMode)&#xd;
  #set($showLeftPanels = "0")&#xd;
#end&#xd;
&#xd;
#if(!$showRightPanels || $showRightPanels == "" || $showRightPanels == "default")&#xd;
  #set($showRightPanels = "1")&#xd;
#end&#xd;
#if($showRightPanels == "yes")&#xd;
  #set($showRightPanels = "1")&#xd;
#end&#xd;
#if($showRightPanels == "no" || !$isInServletMode)&#xd;
  #set($showRightPanels = "0")&#xd;
#end&#xd;
&#xd;
#if($showLeftPanels)&#xd;
  #if($globalprefs == true)&#xd;
     #set($leftPanels = $xwiki.getXWikiPreference("leftPanels"))&#xd;
  #elseif($spaceprefs != "")&#xd;
     #set($leftPanels = $xwiki.getSpacePreferenceFor("leftPanels", $spaceprefs))&#xd;
  #else&#xd;
    #set($leftPanels = $xwiki.getUserPreference("leftPanels"))&#xd;
    #if($leftPanels == "")&#xd;
       #set($leftPanels = $xwiki.getSpacePreference("leftPanels"))&#xd;
    #end&#xd;
  #end&#xd;
  #if($leftPanels == "")&#xd;
      #set($showLeftPanels = "0")&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#if($showRightPanels)&#xd;
  #if($globalprefs == true)&#xd;
    #set($rightPanels = $xwiki.getXWikiPreference("rightPanels"))&#xd;
  #elseif($spaceprefs != "")&#xd;
    #set($rightPanels = $xwiki.getSpacePreferenceFor("rightPanels", $spaceprefs))&#xd;
  #else&#xd;
    #set($rightPanels = $xwiki.getUserPreference("rightPanels"))&#xd;
    #if($rightPanels == "")&#xd;
      #set($rightPanels = $xwiki.getSpacePreference("rightPanels"))&#xd;
    #end&#xd;
  #end&#xd;
  #if($rightPanels == "")&#xd;
      #set($showRightPanels = "0")&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#if($showLeftPanels == "yes")&#xd;
 #if($showRightPanels == "yes")&#xd;
  #set($colsclass = "show-all")&#xd;
 #else&#xd;
  #set($colsclass = "hide-right")&#xd;
 #end&#xd;
#else&#xd;
 #if($showRightPanels == "yes")&#xd;
  #set($colsclass = "hide-left")&#xd;
 #else&#xd;
  #set($colsclass = "hide-all")&#xd;
 #end&#xd;
#end&#xd;
&#xd;
#if ($isInServletMode)&#xd;
  #set($displayContentMenu = true)&#xd;
  #set($displayShortcuts = true)&#xd;
  #set($displayMainMenu = true)&#xd;
  #set($displayDocExtra = true)  &#xd;
  #set($displayHierarchy = true)&#xd;
#end&#xd;
&#xd;
#if ($isInEmbedMode)&#xd;
  #set($displayMainMenu = false)&#xd;
  #set($displayContentMenu = false)&#xd;
  #set($displayDocExtra = false)&#xd;
  #set($showRightPanels = "0")&#xd;
  #set($showLeftPanels = "0")&#xd;
#set ($layoutObj = $doc.getObject('XWiki.LayoutClass'))&#xd;
#if ($layoutObj)&#xd;
  #set ($displayMainMenu = $doc.getValue('displayMainMenu') == 1)&#xd;
  #set ($displayContentMenu = $doc.getValue('displayContentMenu') == 1)&#xd;
  #set ($displayShortcuts = $doc.getValue('displayShortcuts') == 1)&#xd;
  #set ($displayDocExtra = $doc.getValue('displayDocExtra') == 1)&#xd;
  #set ($showLeftPanels = $doc.getValue('showLeftPanels'))&#xd;
  #set ($showRightPanels = $doc.getValue('showRightPanels'))&#xd;
  #set ($displayHierarchy = $doc.getValue('displayHierarchy'))&#xd;
#end&#xd;
#end&#xd;
## To let custom skins easily override layout variables, we evaluate a template that is empty by default.&#xd;
#template("layoutExtraVars.vm")</layoutvars.vm>
    </property>
    <property>
      <logo/>
    </property>
    <property>
      <name>BookmarkletSkin</name>
    </property>
    <property>
      <style.css/>
    </property>
    <property>
      <stylesheets.vm>#template('colorThemeInit.vm')&#xd;
## The default stylesheet configuration option allows to override the default style.css CSS&#xd;
#set ($defaultstyle = $xwiki.getSpacePreference('stylesheet'))&#xd;
#if ($defaultstyle == '')&#xd;
  #set ($defaultstyle = "style.css")&#xd;
#end&#xd;
#set ($defaultStyleURL = $xwiki.getSkinFile($defaultstyle, true))&#xd;
&lt;link href="${defaultStyleURL}#if ($themeDoc)?colorTheme=$!{themeDocFullName}#end" rel="stylesheet" type="text/css" media="all" />&#xd;
&lt;link href="$xwiki.getSkinFile('print.css', true)#if ($themeDoc)?colorTheme=$!{themeDocFullName}#end" rel="stylesheet" type="text/css" media="#if ($printss)all#{else}print#{end}" />&#xd;
#set ($a11y = "$!{request.getCookie('a11y').getValue()}")&#xd;
#if ($a11y == '')&#xd;
  #set ($a11y = "$!{xwiki.getUserPreference('accessibility')}")&#xd;
#end&#xd;
#if ($a11y == '1')&#xd;
  &lt;link href="$xwiki.getSkinFile('css/accessibility.css', true)" rel="stylesheet" type="text/css" media="all" />&#xd;
#end&#xd;
## The stylesheets configuration option allows to override the alternate stylesheets&#xd;
## style1.css, style2.css and style3.css&#xd;
#set ($stylesheets = $xwiki.getSpacePreference('stylesheets'))&#xd;
#if ($stylesheets != '')&#xd;
  #foreach ($stylesheet in $stylesheets.split(','))&#xd;
    #if (!$stylesheet.equalsIgnoreCase($defaultstyle))&#xd;
      &lt;link href="$xwiki.getSkinFile($stylesheet, true)" rel="alternate stylesheet" type="text/css" title="Alternate StyleSheet ${velocityCount}" />&#xd;
    #end&#xd;
  #end&#xd;
#end&#xd;
#if ($isInEmbedMode)&#xd;
  &lt;link href="${xwiki.getSkinFile('embed.css', true)}#if ($themeDoc)?colorTheme=$!{themeDocFullName}#end" rel="stylesheet" type="text/css" media="all" />&#xd;
#end&#xd;
## IE specific stylesheets&#xd;
&lt;!--[if IE]&gt;&#xd;
  &lt;link href="$xwiki.getSkinFile('ie-all.css', true)#if ($themeDoc)?colorTheme=$!{themeDocFullName}#end" rel="stylesheet" type="text/css" />&#xd;
&lt;![endif]-->&#xd;
## Hook for inserting CSS skin extensions&#xd;
#styleSheetExtensionHooks</stylesheets.vm>
    </property>
    <property>
      <view.vm/>
    </property>
    <property>
      <viewheader.vm/>
    </property>
    <property>
      <xwikivars.vm>#if (!$XWIKIVARS_VM)&#xd;
#set ($XWIKIVARS_VM = true)&#xd;
#template("frequentlyUsedDocs.vm")&#xd;
#set ($isGuest = $xcontext.getUser().equals('XWiki.XWikiGuest'))&#xd;
#set ($isSuperAdmin = ($xcontext.user == 'XWiki.superadmin'))&#xd;
#set ($hasEdit = $xwiki.hasAccessLevel('edit'))&#xd;
#set ($hasAdmin = $xwiki.hasAccessLevel('admin'))&#xd;
#set ($hasComment = $xwiki.hasAccessLevel('comment'))&#xd;
## To query for a right at wiki level, we use a reserved space name, and for space level, a reserved&#xd;
## document name.  These are very unlikely to be used otherwise (i.e., it is expected that there is no&#xd;
## existing space or documents using these names).  Note that this hack will be unnecessary when the&#xd;
## new authorization service is made the default, as it will provide an API for checking these&#xd;
## rights directly.&#xd;
#set ($reservedSpaceName = 'SpaceReservedForInternalXWikiUsagejDGER5nj3KOE5ouUFUc7OYru')&#xd;
#set ($reservedDocumentName = 'DocumentReservedForInternalXWikiUsageMK9DxecV0XcDGnIeqzNDB4K')&#xd;
#set ($hasCreateSpace = $xwiki.hasAccessLevel('edit', "${reservedSpaceName}.DocumentReservedForInternalXWikiUsage"))&#xd;
#set ($hasCreatePage = $xwiki.hasAccessLevel('edit', "${doc.space}.${reservedDocumentName}"))&#xd;
#set ($hasGlobalAdmin = $xwiki.hasAccessLevel('admin', $xcontext.user, 'XWiki.XWikiPreferences'))&#xd;
## Note: The document name is not internally used to determine if a user has programming access level. We pass XWiki.XWikiPreferences for consistency with the call for global admin&#xd;
#set ($hasProgramming = $xwiki.hasAccessLevel('programming', $xcontext.user, 'XWiki.XWikiPreferences'))&#xd;
#set ($hasSpaceAdmin = $xwiki.hasAccessLevel('admin', $xcontext.user, "${doc.space}.WebPreferences"))&#xd;
#set ($hasWatch = $xwiki.watchlist &amp;&amp; !$isGuest &amp;&amp; !$isSuperAdmin &amp;&amp; $xwiki.exists($services.model.serialize($services.model.createDocumentReference($xcontext.database, 'XWiki', 'XWikiUserWatchListSheet'), 'local')))&#xd;
#set ($hasDashboard = $xwiki.exists($services.model.serialize($services.model.createDocumentReference($xcontext.database, 'Dashboard', 'XWikiUserDashboardSheet'), 'local')))&#xd;
##&#xd;
## Are comments, attachments, history etc. enabled?&#xd;
##&#xd;
#macro (retrieveSetting $settingName $settingValue)&#xd;
  #set ($settingValue = "$!{xwiki.getSpacePreference($settingName)}")&#xd;
  #if ($settingValue != 'false' &amp;&amp; $settingValue != 'no' &amp;&amp; $settingValue != '0')&#xd;
    #set ($settingValue = true)&#xd;
  #else&#xd;
    #set ($settingValue = false)&#xd;
  #end&#xd;
#end&#xd;
#retrieveSetting('showcomments' $settingValue)&#xd;
#set ($showcomments = $settingValue)&#xd;
#retrieveSetting('showattachments' $settingValue)&#xd;
#set ($showattachments = $settingValue)&#xd;
#retrieveSetting('showhistory' $settingValue)&#xd;
#set ($showhistory = $settingValue)&#xd;
#retrieveSetting('showinformation' $settingValue)&#xd;
#set ($showinformation = $settingValue)&#xd;
##&#xd;
## Annotations are special, they can be hidden from the Page Elements administrative settings,&#xd;
## and they can be disabled per-space from the Annotations administration category.&#xd;
#retrieveSetting('showannotations' $settingValue)&#xd;
#set ($showannotations = $settingValue)&#xd;
#if ($showannotations)&#xd;
  ## The general settings allow displaying the tab&#xd;
  #set ($showannotations = false)&#xd;
  #if ($xwiki.exists('AnnotationCode.AnnotationConfig'))&#xd;
    #set ($annotationConfigObject = $xwiki.getDocument('AnnotationCode.AnnotationConfig').getObject('AnnotationCode.AnnotationConfig'))&#xd;
    #if ($annotationConfigObject.getProperty('activated').value != 0 &amp;&amp; !$annotationConfigObject.getProperty('exceptionSpaces').value.contains($doc.space))&#xd;
      #set ($showannotations = true)&#xd;
      #set ($annotationClass = $annotationConfigObject.getProperty('annotationClass').value)&#xd;
      #set ($annotationCount = $doc.getObjects($annotationClass).size())&#xd;
    #end&#xd;
  #end&#xd;
#end&#xd;
##&#xd;
##&#xd;
#set ($isReadOnly = $xwiki.isReadOnly())&#xd;
#set ($spaceViewUrl = $spaceDoc.getURL('view'))&#xd;
#set ($viewUrl = $doc.getURL('view'))&#xd;
#set ($userObj = $!crtUserDoc.getObject('XWiki.XWikiUsers', 0))&#xd;
## =====================================================================================&#xd;
## Advanced users are:&#xd;
## - super admin&#xd;
## - user documents who have their usertype property set to "Advanced"&#xd;
## - guest users who have admin rights (i.e. when the wiki is empty with no rights set)&#xd;
## =====================================================================================&#xd;
#if ($isSuperAdmin)&#xd;
  #set ($isAdvancedUser = true)&#xd;
#elseif ($isGuest &amp;&amp; $hasAdmin)&#xd;
  #set ($isAdvancedUser = true)&#xd;
#elseif (!$userObj.getProperty('usertype').value)&#xd;
  #set ($isAdvancedUser = false)&#xd;
#else&#xd;
  #set ($isAdvancedUser = ($userObj.getProperty('usertype').value == 'Advanced'))&#xd;
#end&#xd;
## ======================================================================================&#xd;
## Compute list of spaces to blacklist so that simple users don't see them.&#xd;
## TODO : replace this list by a hidden space feature.&#xd;
## ======================================================================================&#xd;
#if ($hasAdmin || $isAdvancedUser)&#xd;
  #set ($blacklistedSpaces = [])&#xd;
#else&#xd;
  #set ($blacklistedSpaces = ['Import', 'Panels', 'Scheduler', 'Stats', 'XAppClasses', 'XAppSheets', 'XAppTemplates', 'XWiki', 'WatchCode', 'WatchSheets', 'XApp', 'WatchAdmin', 'Watch', 'ColorThemes', 'AnnotationCode'])&#xd;
#end&#xd;
## ======================================================================================&#xd;
## Since the WysiwygService does not trigger the evaluation of the xwikivars.vm, we need a way to make this variable&#xd;
## visible to the GWT Service calls (and potentially other java code). We set it on the session so it's set when the &#xd;
## page to be edited with the wysiwyg is displayed, and it's available on the session for the WysiwygService functions, &#xd;
## such as getSpaceNames(). This hack is to be removed when the blacklistedSpaces will be set as a configuration &#xd;
## preference and all public API will do the hidden spaces filtering by default. &#xd;
## ======================================================================================&#xd;
#set ($discard = $request.getSession().setAttribute('blacklistedSpaces', $blacklistedSpaces))&#xd;
#set ($parent ="&lt;a href='$parentDoc.getURL()'>$escapetool.xml(${parentDoc.displayTitle})&lt;/a>")&#xd;
#if ($tdoc)&#xd;
  #set ($headertitle = "&lt;a href='$viewUrl'>$escapetool.xml(${tdoc.displayTitle})&lt;/a>")&#xd;
#else&#xd;
  #set ($headertitle = "&lt;a href='$viewUrl'>$escapetool.xml(${doc.displayTitle})&lt;/a>")&#xd;
#end&#xd;
#set ($skin = $xwiki.getSkin())&#xd;
## Compute the copyright and evaluate its content with Velocity to allow users to put some scripts inside&#xd;
#set ($copyright = $xwiki.parseContent($xwiki.getSpaceCopyright()))&#xd;
#set ($xwikimode = $xcontext.getMode())&#xd;
#set ($logredir = $escapetool.xml($xwiki.relativeRequestURL))&#xd;
##&#xd;
#if ($xwiki.exists('XWiki.MaintenanceInfo'))&#xd;
  #set ($maintenanceinfo = 'XWiki.MaintenanceInfo')&#xd;
#elseif ($xwiki.exists('xwiki:XWiki.MaintenanceInfo'))&#xd;
  #set ($maintenanceinfo = 'xwiki:XWiki.MaintenanceInfo')&#xd;
#end&#xd;
## Check language option&#xd;
#set ($languageparams = '')&#xd;
#if ($xwiki.isMultiLingual() &amp;&amp; ("$!{tdoc.realLanguage}" != ''))&#xd;
  #set ($languageparams = "language=${tdoc.realLanguage}")&#xd;
#end&#xd;
## Check revision option&#xd;
#if ($request.rev)&#xd;
  #set ($revparams = "rev=$!{escapetool.url(${request.rev})}")&#xd;
#else&#xd;
  #set ($revparams = '')&#xd;
#end&#xd;
#if ($revparams != '' &amp;&amp; $languageparams != '')&#xd;
  #set ($docvariant = "$languageparams&amp;amp;$revparams")&#xd;
#else&#xd;
  #set ($docvariant = "${languageparams}${revparams}")&#xd;
#end&#xd;
#set ($keyboardShortcutsEnabled = $isAdvancedUser)&#xd;
#set ($isInPortletMode = $xwikimode == 1 || "$!request.getAttribute('javax.portlet.request')" != '')&#xd;
#set ($isInEmbedMode = ("$request.xpage" == "embed" || ($request.xredirect &amp;&amp; $request.xredirect.contains("xpage=embed"))) &amp;&amp; !$isInPortletMode)&#xd;
#if ($request.xredirect &amp;&amp; $request.xredirect.contains('xpage=embed'))&#xd;
  #set($discard = $context.setLinksQueryString("xpage=embed"))&#xd;
#end&#xd;
#set ($isInServletMode = $xwikimode == 0 &amp;&amp; !$isInPortletMode)&#xd;
#template("deprecatedVars.vm")&#xd;
#end</xwikivars.vm>
    </property>
  </object>
</xwikidoc>